(*

The Makam metalanguage -- a tool for rapid language prototyping
Copyright (C) 2011- Antonis Stampoulis

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

*)

<<
open Termlangcanon;;
open Termlangbuiltin;;
open Termlangprolog;;
open Batteries;;
open PegBuiltins;;
module StringSet = Set.Make(String);;

let (--->) x1 x2 = UChannel.combine_span x1.span x2.span ;;
let autospan_bin f a b =
    let span = a ---> b in
    { content = f ?loc:(Some span) a.content b.content ;
      span    = span }
;;
let autospan_un f a =
    { content = f ?loc:(Some a.span) a.content ;
      span    = a.span }
;;
let autospan_fold f a xs =
    List.fold_left (fun cur elm -> autospan_bin f cur elm) a xs
;;
let mkTm v ls =
    let span =
      match ls with
        hd :: _ -> hd.span
      | [] -> None
    in
    autospan_fold mkApp (autospan_un mkVar { content = v ; span = span }) ls ;;
let mkTmConst spanFrom v =
    autospan_un mkVar { content = v ; span = spanFrom.span }
;;
let mkLamO ?(loc = None) (s,t) = mkLamO ~loc:loc s t ;;

let mkList nilspan es =
  List.fold_left
    (fun cur elm -> mkTm "cons" [ elm ; cur ])
    (mkTmConst nilspan "nil")
    (List.rev es)
;;

let mkTuple l =
  let (hd :: tl) = List.rev l in
  List.fold_left
    (fun cur elm -> mkTm "tuple" [ elm ; cur ])
    hd
    tl
;;

let makam_toplevel_parser : (syntax_type -> unit Peg.parser_t) ref = ref (fun _ _ _ _ -> None) ;;
let last_command_span : UChannel.span ref = ref None ;;

let _KEYWORDS = StringSet.of_list [ "if"; "then"; "else"; "when"; "type"; "fun"; "pfun" ];;

exception Forget of string ;;

exception NoTestSuite;;
exception NoQueryToTest;;

let query_test startspan endspan premises =
  let testsuite =
    if Option.is_none (!globalstate).current_testsuite then
      raise NoTestSuite
    else
      Option.get (!globalstate).current_testsuite
  in
  let premise =
    Utils.ExtList.foldnonempty
    (fun q1 q2 -> mkTm "and" [ q1 ; q2 ])
    (mkTmConst endspan "success")
    (fun x -> x) premises
  in
  mkTm "clause" [ mkTm "testcase" [ mkTmConst startspan testsuite ];
                  { premise with span = startspan ---> endspan } ]
;;

let isLetterChar c =
  match UString.category c with
   | `Ll | `Lm | `Lo | `Lt | `Lu -> true | _ -> false
;;

let end_enclosed_marker = ref (UString.of_string "");;
let enclosed_flip s =
  let flip_char c =
    (match UString.to_string (UString.implode [c]) with
      "{" -> "}"
    | "(" -> ")"
    | "[" -> "]"
    | "<" -> ">"
    | "〚" -> "〛"
    | s -> if isLetterChar c then "" else s
    ) |> UString.of_string
  in
  s |> UString.explode |> List.map flip_char |> List.rev |> List.map UString.to_string |> String.concat "" |> UString.of_string;;

let current_metas = ref [];;

let mkNewmetas s bindings body =
  let bindings = match bindings with hd :: tl -> { hd with span = s ---> hd } :: tl | _ -> bindings in
  List.fold_right
    (fun binding body -> mkTm "newmeta" [ autospan_bin mkLamO binding body ])
    bindings body
>>

(* term language *)

epsilon  -> << () >> ;
loced(p) -> startloc:(epsilon << UChannel.loc _input >>)
            res:p
            endloc:(epsilon << UChannel.loc _input >>)
            << { content = res ; span = UChannel.mk_span startloc endloc } >>
ltoken(p) -> r:token(loced(p)) << r >>
lkeyword(p) -> r:token(loced(keyword(p))) << r >>

lexpr -> fn:lkeyword("fun") bindings:repplusWHITE(binding) token("=>") body:lexpr
        << let bindings = List.flatten bindings in
           let bindings = match bindings with hd :: tl -> { hd with span = fn ---> hd } :: tl | _ -> bindings in
           List.fold_right (fun binding body -> autospan_bin mkLamO binding body) bindings body >>

       / fn:lkeyword("pfun")
         bindings:repWHITE(binding)
         resetMetas:( epsilon << current_metas := [] >> )
         s:loced(epsilon)
         destructurings:repWHITE(baseexpr)
         newvars:( epsilon << List.map (fun x -> { x with content = (x.content, None) }) (List.rev !current_metas) >> )
         token("=>") body:prop
        << let introMetas = mkNewmetas s newvars in
           let destructBindings =
             List.mapi (fun i destr -> { content = ("~destruct" ^ (string_of_int i), None); span = destr.span }) destructurings
           in
           let destructVars =
             List.map (fun id -> autospan_un mkVar { id with content = fst id.content }) destructBindings
           in
           let bindings = List.append (List.flatten bindings) destructBindings in
           let bindings = match bindings with hd :: tl -> { hd with span = fn ---> hd } :: tl | _ -> bindings in
           let body =
             match destructurings with
               [] -> body
             | _ :: _ ->
               mkTm "and" [
                 mkTm "eq" [ mkTuple destructVars; mkTuple destructurings ];
                 body
               ]
           in
           List.fold_right (fun binding body -> autospan_bin mkLamO binding body) bindings (introMetas body) >>

      / hd:appexpr^ token("::") tl:lexpr
        << mkTm "cons" [ hd ; tl ] >>

      / e:appexpr^ << e >>

appexpr -> f:baseexpr^ args:repWHITE(baseexpr)
        << List.fold_left (autospan_bin mkApp) f args >>

namepref -> "^n" / "ⁿ" ;

baseexpr -> id:ltoken(qualident)   << autospan_un mkVar id >>
          / id:ltoken(("_" x:ident << "_" ^ x >> / "_" << "_" >>))
            << current_metas := id :: !current_metas ;
               autospan_un mkCapturingVar id >>
          / id:ltoken(metaident)
            << current_metas := id :: !current_metas ;
               autospan_un mkVar id >>
          / id:ltoken(identnamed)  << autospan_un mkVar id >>
          / x:ltoken( ( namepref id:ident << id >>) ) << autospan_un mkNameVar x >>
          / id:ltoken( ("#" s:identany << s >>) ) << autospan_un mkCapturingVar id >>
          / token("@") e:baseexpr
            << mkTm "mkforall" [ e ] >>
          / s:loced( ( token(["]) str:rep(strchar) ["] << str |> String.concat "" >> ) )
            << autospan_un mkString s >>

          (* string expansions *)
          / token("`") l:rep(expansion) nilspan:loced("`")
            << mkTm "expansion" [ mkList nilspan l ] >>

          (* lists *)
          / token("[") es:repSEP(lexpr, ",") nilspan:ltoken("]")
            << mkList nilspan es >>

          (* tuples *)
          / token("(") hd:lexpr^ token(",") es:repplusSEP(lexpr, ",") token(")")
            << mkTuple (hd :: es) >>

          / i:ltoken(num)                       << autospan_un mkInt i >>
          / token("{prop|") p:prop token("|}")  << p >>
          / token("{dbt|") d:dbt token("|}")    << d >>

          (* free-form quotes *)
          / token(start_enclosed)
            str:loced(rep(enclosed))
            end_enclosed
            << autospan_un mkString { str with content = UString.to_string (UString.concat str.content) } >>

          / e:lparenthesized(annotexpr)         << e >>
          / e:lparenthesized(lexpr^)             << e >>

identnamed -> x:ident^ namepref nmeta:identany << toVarWithNamedMeta x nmeta >>
            / x:identany << x >>
identany   -> x:ident^ << x >> / "_" x:ident << "_" ^ x >> / "_" << "_" >>
qualidentmain -> ms:repplus( (x:ident^ "." &ident^) ) x:ident^ << let prefix = String.join "." ms in prefix ^ "." ^ x >>
qualident  -> x:qualidentmain << x >>
            / "." x:qualidentmain^ << "." ^ x >>
            / "." x:ident^ << "." ^ x >>

annotexpr -> e:lexpr^ token(":") t:lmonotyp << autospan_bin mkAnnot e t >>

typ  -> t:ltyp << t.content >>

adhoc -> s:ltoken("[") a:repWHITE(token(ident)) e:ltoken("]")
         << let a = { content = a ; span = s ---> e } in
            autospan_bin _tForallAdhoc a >>
       / epsilon << fun x -> x >>

ltyp  -> a:adhoc t:lmonotyp << a t >>
       / a:adhoc ts:repplusWHITE(typebinding) token("->") t:lmonotyp
         << let base = List.fold_right (autospan_bin _tArrow) (List.flatten ts) t in
            a base >>

lmonotyp -> t:multtyp^ token("->") e:lmonotyp     << autospan_bin _tArrow t e >>
          / t:multtyp^                            << t >>

multtyp -> t:apptyp^ token("*") e:multtyp         << autospan_bin _tTuple t e >>
         / t:apptyp^                              << t>>

apptyp -> x:loced(typconstr)
          << let id, args = x.content in
             let args = List.map (fun y -> y.content) args in
             { content = _tVar ~args:args ~loc:x.span id.content ; span = x.span } >>
        / b:basetyp << b >>

typconstr -> id:ltoken(tident) args:repWHITE(basetyp) << id, args >>

basetyp -> id:ltoken(tident)  << autospan_un (_tVar ~args:[]) id >>
         / id:ltoken(("_" x:tident << "_" ^ x >>)) << autospan_un (_tVar ~args:[]) id >>
         / id:lkeyword("type")   << { content = { _tType with loc = id.span } ; span = id.span } >>
         / t:lparenthesized(lmonotyp)   << t >>

binding -> token("(") ids:repWHITE(ltoken(identnamed)) token(":") t:lmonotyp token(")")
           << List.fold_right
               (fun id cur -> { content = (id.content, Some t.content) ; span = id ---> t } :: cur)
               ids [] >>
         / id:ltoken(identnamed) <<  [ { content = (id.content, None) ; span = id.span } ] >>

(* Lambda Prolog part *)

clause   -> goal:lexpr^ token(keyword("when")) cond:prop token("<-") premise:prop
             << mkTm "whenclause" [ goal ; cond ; premise ] >>
          / goal:lexpr^ token(keyword("when")) cond:prop token(":-") premise:prop
             << mkTm "whenclause" [ goal ; cond ; premise ] >>
          / goal:lexpr^ token(keyword("when")) cond:prop endspan:loced(epsilon)
             << mkTm "whenclause" [ goal ; cond ; mkTmConst endspan "success" ] >>
          / goal:lexpr^ x:token("<-") premise:prop
            << mkTm "clause" [ goal ; premise ] >>
          / goal:lexpr^ x:token(":-") premise:prop
            << mkTm "clause" [ goal ; premise ] >>
          / goal:lexpr^ endspan:loced(epsilon)
            << mkTm "clause" [ goal ; mkTmConst endspan "success" ] >>

prop     -> bf:newmetas ps:repplusSEP(hyp, ",") endspan:loced(epsilon)
            << let p = Utils.ExtList.foldnonempty (fun q1 q2 -> mkTm "and" [ q1 ; q2 ]) (mkTmConst endspan "success")
                       (fun x -> x) ps in
               bf p >>

newmetas -> s:ltoken("[") bindings:repplusWHITE(binding) token("]")
            << mkNewmetas s (List.flatten bindings) >>
          / epsilon << fun x -> x >>

hyp      -> token(keyword("if")) ifh:hyp1 token(keyword("then")) thenh:hyp1 token(keyword("else")) elseh:hyp
            << mkTm "ifte" [ ifh ; thenh ; elseh ] >>
          / h:hyp1 << h >>

hyp1     -> token("(") newvars:repWHITE(newvar)
            knowns:rep( (x:assumption token("->") << x >>) )
            &&( epsilon << fun _ -> List.length newvars + List.length knowns > 0 >> )
            req:hyp token(")")
             << req |>
                    fun x -> List.fold_left
                    (fun r elm -> mkTm "assume" [ elm ; r ]) x
                    (List.rev knowns)
                    |>
                    List.fold_right
                    (fun binding r -> mkTm "newvar" [ autospan_bin mkLamO binding r ])
                    newvars >>
          / h:hyp2 << h >>

hyp2     -> token("(") p:prop token(")") << p >>
          / token("(") mult:repplusSEP(hyp^, ";") endspan:ltoken(")")
            << Utils.ExtList.foldnonempty (fun r elm -> mkTm "or" [ r ; elm ]) (mkTmConst endspan "failure")
               (fun x -> x) mult >>
          / token("once") token("(") p:prop token(")") << mkTm "once" [ p ] >>
          / p:lexpr^ << p >>

assumption -> x:lexpr^ endspan:loced(epsilon) << mkTm "clause" [ x ; mkTmConst endspan "success" ] >>
            / token("(") c:clause token(")") << c >>

newvar   -> id:ltoken(ident^) token(":") t:basetyp token("->") << { content = (id.content, Some t.content) ; span = id ---> t } >>


(* commands *)
def       -> ids:repplusSEP(token(ident^), ",")  token(":") t:typ
             << List.map (fun x -> x, t) ids >>

typebinding -> token("(") ids:repplusWHITE(ltoken(identnamed)) token(":") t:lmonotyp token(")")
           << List.map (fun _ -> t) ids >>

(* base/profiling versions *)

prologcmd1 ->
             token("`(") p:hyp token(")") token(".")
             << fun () -> (global_set_last_query None;
                          if !_ONLY_TYPECHECK then
                             (Benchmark.cumulative "total queries" (lazy(global_typecheck_silent p.content)))
                          else
                             (Benchmark.cumulative "total staged commands"
                                (lazy(Termlangrefl.global_staged_command p.content)))) >>

           / d:defBM token(".") << fun () -> (
                global_set_last_query None;
                Benchmark.cumulative "total defs"
                (lazy(List.iter (uncurry global_define) d))) >>
           / c:clauseBM token(".") << fun () -> (global_set_last_query None;
                                                 if !_ONLY_TYPECHECK then
                                                  (Benchmark.cumulative "total clauses"
                                                    (lazy(global_typecheck_silent c.content)))
                                                 else
                                                  (Benchmark.cumulative "total clauses"
                                                    (lazy(Termlangprolog.global_new_clause c.content)))) >>
           / p:hyp token("?") << fun () -> (global_set_last_query (Some p);
                                            if !_ONLY_TYPECHECK then
                                             (Benchmark.cumulative "total queries"
                                               (lazy(global_typecheck_silent p.content)))
                                           else
                                             (Benchmark.cumulative "total queries"
                                              (lazy(Termlangprolog.global_query p.content)))) >>
           / p:quoteline(hyp) token("?") << fun () -> global_set_last_query (Some p) >>

           / t:querytest
             <<  fun () -> ((if Option.is_none (!globalstate).last_query then raise NoQueryToTest);
                           let query = Option.get (!globalstate).last_query in
                           global_set_last_query None;
                           if !_ONLY_TYPECHECK then
                            (Benchmark.cumulative "total clauses"
                              (lazy(global_typecheck_silent (t query).content)))
                           else
                            (Benchmark.cumulative "total clauses"
                              (lazy(Termlangprolog.global_new_clause (t query).content))))
                         >>
           / token("%") d:directive token(".") << fun () -> (global_set_last_query None; d ()) >>
           / c:block_mode << fun () -> flush IO.stdout >>
           / repplusV(white)^ << fun () -> () >>

prologcmd  -> ( repV(white) !white << () >> / epsilon << () >> ) c:loced(prologcmd1)
              << (
                 last_command_span := c.span ;
                 let p = c.content () in
                 Benchmark.cumulative "total" (lazy(p))) >>

prologcmdvoid ->
             d:defBM token(".") << fun () -> () >>
           / c:clauseBM token(".") << fun () -> () >>
           / p:hyp token("?") << fun () -> () >>
           / t:querytest    << fun () -> () >>
           / token("%") d:directive token(".") << fun () -> () >>
           / repplusV(white)^ << fun () -> () >>


consumeBM -> fastrepV( ( . ) )  << () >>

(* benchmarking *)
defBM -> d:def ;
clauseBM -> c:clause ;

ident_or_str -> s:ident << s >> / s:str << s >>

directive -> "use" repplus(white) s:token(ident_or_str)
           << fun () -> Termlangcanon.global_load_file (fun syntax -> Peg.parse_of_file (!makam_toplevel_parser syntax)) s >>
           / "import" repplus(white) s:token(ident_or_str) token("as") m:token(ident)
           << fun () -> Termlangcanon.global_load_file (fun syntax -> Peg.parse_of_file (!makam_toplevel_parser syntax)) ~modul:m s >>
           / "import" repplus(white) s:token(ident)
           << fun () -> Termlangcanon.global_load_file (fun syntax -> Peg.parse_of_file (!makam_toplevel_parser syntax)) ~modul:s s >>
           / "extend" s:token(ident)
           << fun () -> Termlangcanon.global_enter_module s >>
           / "end"
           << fun () -> Termlangcanon.global_leave_module () >>
           / "open" s:token(ident)
           << fun () -> Termlangcanon.global_open_module s >>
           / "directory" repplus(white) s:token(str)
           << fun () -> Termlangcanon.global_add_directory s >>
           / "typenorm" repplus(white) e:baseexpr
           << fun () -> global_typecheck_and_normalize (e.content) >>
           / "type" repplus(white) e:baseexpr
           << fun () -> global_typecheck (e.content) >>
           / "reset"
           << fun () -> global_reset () >>
           / "usenew" repplus(white) s:token(ident_or_str)
             << fun () -> begin
                  global_reset () ;
                  Termlangcanon.global_load_file (fun syntax -> Peg.parse_of_file (!makam_toplevel_parser syntax)) s
                end >>
           / "curmodule"
           << fun () -> Printf.printf "Current module: %a\n" (Option.print String.print) (!globalstate).current_module >>
           / "testsuite" repplus(white) s:token(ident)
           << fun () -> global_set_testsuite s >>

          / b:flag("debug") << fun () -> _DEBUG_DEMAND := b >>
          / b:flag("debugfull") << fun () -> _DEBUG := b >>
          / b:flag("debugnames") << fun () -> _DEBUG_NAMES := b >>
          / b:flag("debugtypes") << fun () -> _DEBUG_TYPES := b >>
          / b:flag("debugstage") << fun () -> Termlangrefl._DEBUG_STAGING := b >>
          / b:flag("constraints") << fun () -> _DEBUG_CONSTRAINTS := b >>
          / b:flag("benchmark")  << fun () -> _BENCHMARK := b >>
          / b:flag("log")         << fun () -> _LOGGING := b >>
          / b:flag("only_typecheck") << fun () -> _ONLY_TYPECHECK := b >>
          / b:flag("trace") es:repplusSEP(baseexpr, ",") << fun () -> List.iter (fun e -> global_trace b (e.content)) es >>
          / "forget" s:token(cmdname)  << fun () -> raise (Forget s) >>

flag(p) -> p token("+") << true  >>
         / p token("-") << false >>


cmdflushed -> c:prologcmd << flush IO.stdout >>
toplevel   -> c:rep(cmdflushed) repV(white) << () >>

block_mode -> token("%block-begin.")
              startloc:(epsilon << UChannel.loc _input >>)
              cs:rep( (!"%block-end." c:. << c >>) )
              "%block-end."
              << Peg.parse_of_string ~initloc:startloc
                                     (!makam_toplevel_parser `Makam)
                                     (UString.to_string (UString.implode cs))
              >>
            / token("%block-begin") id:token(ident) token(".")
              cs:rep( (!"%block-end." c:. << c >>) )
              "%block-end."
              << let initloc = let open UChannel in
                               { description = "block " ^ id; lineno = 1; charno = 1; offset = 0 }
                 in
                 Peg.parse_of_string ~initloc:initloc
                                     (!makam_toplevel_parser `Makam)
                                     (UString.to_string (UString.implode cs)) >>

to_EOL -> repV( (![\n] .) ) "\n" << () >>

literate   -> c:rep(literate_line) << () >>
literate_makam_start -> "```makam\n" << () >>
                / "```makam-" !"noeval" repplusV(latin1letter) "\n" << () >>
literate_makam_end -> at_start("```\n") << () >>

literate_line -> literate_makam_start
                 startloc:(epsilon << UChannel.loc _input >>)
                 cs:rep( (!literate_makam_end c:. << c >>) )
                 literate_makam_end
                 << Peg.parse_of_string ~initloc:startloc
                                        (!makam_toplevel_parser `Makam)
                                        (UString.to_string (UString.implode cs))
                 >>
               / !literate_makam_start to_EOL << () >>

at_start(p) -> &&( epsilon << fun _ -> let open UChannel in (loc _input).charno == 1 >> )
               c:p << c >>


(* -------------------------------------- *)
(* Query Result Tests                     *)
(* -------------------------------------- *)

quoteline(p) -> at_start(">> ") res:p << res >>

querytest -> start:loced(quoteline("Yes.")) stop:loced(epsilon) to_EOL
             << fun query -> query_test start stop [ mkTm "once" [ query ] ] >>

           / start:loced(quoteline("Impossible.")) stop:loced(epsilon) to_EOL
             << fun query -> query_test start stop [ mkTm "not" [ query ] ] >>

           / start:loced(quoteline("Yes:")) to_EOL
             varsvals:repplus(quoteline(var_assignment))
             stop:loced(epsilon)
              << fun query ->
                 let (vars, vals) = List.split varsvals in
                 let vars' = mkTuple vars in
                 let vals' = mkTuple vals in
                 query_test start stop
                            [ mkTm "once" [ query ];
                              mkTm "unif_alpha_eqv" [ vars'; vals' ] ] >>

var_assignment -> x:ltoken(ident) token(":=") e:lexpr token(("," / ".")) to_EOL
                  << (autospan_un mkVar x, e) >>

(* Free-form quotes *)
start_enclosed -> &&( enclosed_starter << fun s -> end_enclosed_marker := enclosed_flip (fst s); true >> )
                  e:enclosed_starter << e >>

end_enclosed -> &&( enclosed_ender << fun s -> (s = !end_enclosed_marker) >>)
                e:enclosed_ender << e >>

enclosed -> str:repplus((!end_enclosed c:. << c >>)) << str |> UString.implode >>

enclosed_starter -> hd:enclosed_starter_first tl:enclosed_starter_rest << ([UString.implode [hd]; fst tl] |> UString.concat, snd tl) >>
enclosed_ender_not_last -> &( (enclosed_ender_head enclosed_ender_last << () >>) ) << () >>
                         / &( (enclosed_ender_head enclosed_ender_not_last << () >>) ) << () >>
enclosed_ender -> hd:rep( (enclosed_ender_not_last x:enclosed_ender_head << x >>) )
                  tl:enclosed_ender_last << (List.append hd [tl]) |> UString.implode >>

enclosed_starter_first -> x:[{〚] << x >> / x:[<] !"-" << x >>
enclosed_starter_rest -> xs:rep(enclosed_starter_rest_char) id:identaux ys:repplus(enclosed_starter_rest_char)
                         << ([ xs |> UString.implode; id |> UString.of_string; ys |> UString.implode ] |> UString.concat, id) >>
                       / xs:rep(enclosed_starter_rest_char) << (xs |> UString.implode, "") >>
enclosed_starter_rest_char -> x:enclosed_starter_first << x >>
                       / x:[(<`:|[] << x >>
enclosed_ender_head -> x:enclosed_ender_last << x >>
                     / x:[)>`:|]] << x >>
enclosed_ender_last -> x:[}〛>] << x >>


(* -------------------------------------- *)
(* Dynamic binding trees parsing          *)
(* -------------------------------------- *)

(*
   top:  a.top        -- lambda
         | `a.top     -- nu, first-order representation of lambdas
         | `_.top     -- magicnu: when you don't know which variables to bind, bind all unknown ones
         | head seq   -- normal term
         | base       -- base terms
   head: a            -- constant or normal variables
         | `a         -- first-order variable
         | @a         -- the result is computed through the predicate 'a'. also written: ▷a
         | !a         -- use dbtguess for transforming each argument based on its type. also writen: ⋯a
   base: n            -- integer
         | 'a | "..." -- string literals
         | [ seq ]    -- list
   seq:  elm seq | epsilon -- sequences
   elm:  head | base | (top) | {whiteblock}elm{/whiteblock}
*)

dbt_top -> var:ltoken(ident)^ "." d:dbt_top
           << mkTm "dbt_lam" [ autospan_bin mkLam var d ] >>
         / token("`") token("_") token(".") d:dbt_top
           << mkTm "dbt_magicnu" [ d ] >>
         / token("`") var:ltoken(ident) token(".") d:dbt_top
           << mkTm "dbt_nu" [ autospan_un mkString var ; d ] >>
         / h:dbt_head^ seq:dbt_seq << h seq >>
         / b:dbt_elm << b >>
dbt_seq  -> es:repWHITE(dbt_elm)
            << List.fold_left
                             (fun cur elm -> mkTm "cons" [ elm ; cur ])
                             (mkTm "nil" []) (List.rev es) >>
dbt_head -> var:ltoken(ident)^ << fun l -> mkTm "dbt_constr" [ autospan_un mkVar var ; l ] >>
          / token("`") var:loced(ident) << fun l -> mkTm "dbt_lookup" [ autospan_un mkString var ; l ] >>
          / token("@") var:loced(ident) << fun l -> mkTm "dbt_comp" [ autospan_un mkVar var ; l ] >>
          / token("▷") var:loced(ident) << fun l -> mkTm "dbt_comp" [ autospan_un mkVar var ; l ] >>
          / token("!") var:loced(ident) << fun l -> mkTm "dbt_auto" [ autospan_un mkVar var ; l ] >>
          / token("⋯") var:loced(ident) << fun l -> mkTm "dbt_auto" [ autospan_un mkVar var ; l ] >>
dbt_base -> i:ltoken(num) << mkTm "dbt_int" [ autospan_un mkInt i ] >>
          / s:loced( ( token(["]) str:rep(strchar) ["] << str |> String.concat "" >> ) )
            << mkTm "dbt_string" [ autospan_un mkString s ] >>
          / ltoken("'") s:loced(ident) << mkTm "dbt_string" [ autospan_un mkString s ] >>
          / token("[") l:dbt_seq token("]") << mkTm "dbt_list" [ l ] >>

dbt_elm -> h:dbt_head^ << h (mkTm "nil" []) >>
         / b:dbt_base^ << b >>
         / t:lparenthesized(dbt_top) << t >>

dbt -> d:dbt_top repV(white) << d >>

(* -------------------------------------- *)
(* Utility definitions: character classes *)
(* -------------------------------------- *)
latin1char -> &&( . << fun c -> try (ignore (UChar.char_of c); true) with | _ -> false >> ) a:. << a >>
letterchar -> &&( .
                  << isLetterChar >> )
              a:. << a >>
latin1letter -> &latin1char c:letterchar << c >>
digitchar -> a:[0123456789]              << a >>
num       -> is:repplus(digitchar)       << is |> UString.implode |> UString.to_string |> int_of_string >>
eof -> !. ;

(* whitespace *)
comment -> "(*" repV(commentchar) "*)" ;
commentchar -> !"*)" . ;
white ->  &&( . << UString.is_whitespace >> ) . / comment ;
whiteNoComment -> &&( . << UString.is_whitespace >>) . ;
whiteNoNewline -> ![\n] white ;


identfstchar -> c:letterchar    << c >>
identrstchar -> c:(letterchar / digitchar / [_']) << c >>
identaux     -> c:identfstchar cs:rep(identrstchar) << UString.implode (c :: cs) |> UString.to_string >>
ident        -> &&( identaux^ << fun x -> not (StringSet.mem x _KEYWORDS) >> ) id:identaux^ << id >>
keyword(p)   -> &&( identaux^ << fun x -> StringSet.mem x _KEYWORDS >>) x:p << x >>

metaidentfstchar -> &&( letterchar << UString.is_uppercase >> )
                    c:letterchar   << c >>
metaident        -> c:metaidentfstchar cs:rep(identrstchar)
                   << UString.implode (c :: cs) |> UString.to_string >>

cmdnamefstchar -> &latin1char c:letterchar    << c >>
cmdnamerstchar -> &latin1char c:(letterchar / digitchar / [_'-]) << c >>
cmdname        -> c:cmdnamefstchar cs:rep(cmdnamerstchar) << UString.implode (c :: cs) |> UString.to_string >>

tidentqual   -> m:ident^ "." &ident^ x:tident << m ^ "." ^ x >>
              / x:ident^ << x >>

tident       -> x:tidentqual << x >>
              / "." x:tidentqual^ << "." ^ x >>

(* string characters must include the escape characters allowed by ocaml, so that bootstrapping works properly *)
hexdigitchar ->  a:[0123456789abcdefABCDEF]  << a >>
escapechar ->
     s:[\\] c:[\\"'ntbr]
           << ([ s; c ] |> UString.implode) |> UString.to_string >>
   / s:[\\] n1:digitchar n2:digitchar n3:digitchar
           << ([ s; n1; n2; n3 ] |> UString.implode) |> UString.to_string >>
   / s:[\\] x:[x] n1:hexdigitchar n2:hexdigitchar n3:hexdigitchar
           << ([ s; x; n1; n2; n3 ] |> UString.implode) |> UString.to_string >>
strchar ->  s:escapechar << Utils.unescape s >>
         / !"\"" c:. << ([ c ] |> UString.implode) |> UString.to_string >>
str     -> token(["]) str:rep(strchar) ["] << str |> String.concat "" >>

(* string expansions *)
expansion_char ->
    s:escapechar << Utils.unescape s >>
  / s:"\\`"       << "`" >>
  / s:"\\$"       << "$" >>
  / s:"$" &(!"{") << "$" >>
  / !"`" !"$" c:.     << ([ c ] |> UString.implode) |> UString.to_string >>

expansion ->
   str:loced( (s:repplus(expansion_char) << s |> String.concat "" >>) ) << autospan_un mkString str >>
 / "${" t:lexpr token("}") << t >>

ocamlrevchar  -> !"<<" c:. << c >>
ocamlrevtext  -> cs:repplus(ocamlrevchar) << (cs |> UString.implode) |> UString.to_string >>


(* -------------------------------------- *)
(* Utility definitions: others            *)
(* -------------------------------------- *)
token(p)         -> repV(white)^ a:p        << a >>
tokenW(p)        -> repV(white)^ a:p white  << a >>

rep(p) ->  l:fastrep(p) << l >> ;
repV(p) -> fastrepV(p) ;
repplus(p) ->  hd:p tl:rep(p) << hd :: tl >>
repplusV(p) ->  p repV(p) ;
repplusSEP(p, sep) ->
          hd:p tl:rep( ( token(sep) repV(white) x:p << x >> ) )  << hd :: tl >>
repSEP(p, sep) -> l:repplusSEP(p, sep) << l >>
                / epsilon << [] >>

repWHITE(p) ->
          hd:p tl:rep( ( repplusV(white) x:p << x >> ) ) repV(white) << hd :: tl >>
        / repV(white) << [] >>

repplusWHITE(p) ->
          hd:p tl:rep( ( repplusV(white) x:p << x >> ) ) repV(white) << hd :: tl >>


lparenthesized(p) ->  x:ltoken("(")^ p:p y:ltoken(")") << { content = p.content ; span = x ---> y } >> ;


<<

let guard_nested_parser parsr =
  (fun memocells resetmemo input ->
   let oldmemo = !_memotable in
   let oldlr   = LRHash.copy _lrinfo in
   let result  =
     try
       `Left(parsr memocells resetmemo input)
     with exn -> `Right(exn)
   in
   _memotable := oldmemo ;
   LRHash.clear _lrinfo ;
   LRHash.iter (fun k v -> LRHash.add _lrinfo k v) oldlr ;
   match result with `Left(v) -> v | `Right(exn) -> raise exn)
;;

makam_toplevel_parser :=
  (fun syntax memocells resetmemo input ->
     match syntax with
       `Makam -> guard_nested_parser parse_toplevel memocells resetmemo input
     | `Markdown -> guard_nested_parser parse_literate memocells resetmemo input)
;;

>>
