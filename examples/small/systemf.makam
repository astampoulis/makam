%use utils.
%use extutils.

systemf : testsuite.
%testsuite systemf.

term : type.
typ  : type.

lam : (term -> term) -> term .
lam : typ -> (term -> term) -> term.
app : term -> term -> term .
eunit : term .

arrow : typ -> typ -> typ .
tunit : typ .

typeof : term -> typ -> prop .
typeof eunit tunit .

typeof (lam E) (arrow T1 T2) :-
  (x:term -> typeof x T1 -> typeof (E x) T2) .

typeof (lam T1 E) (arrow T1 T2) :-
  (x:term -> typeof x T1 -> typeof (E x) T2) .

typeof (app E1 E2) T2 :-
  typeof E1 (arrow T1 T2),
  typeof E2 T1 .

>> typeof (lam (fun x => app x eunit)) T ?
>> Yes:
>> T := arrow (arrow tunit T') T'.

intconst : int -> term.
tint  : typ.
typeof (intconst _) tint.

(* System F *)

polylam : (typ -> term) -> term .
polyinst : term -> typ -> term .
pi : (typ -> typ) -> typ .


typeof (polylam EF) (pi TF) :-
  (x : typ -> typeof (EF x) (TF x)).

typeof (polyinst E T) (TF T) :-
  typeof E (pi TF).

ascribe : term -> typ -> term.
typeof (ascribe E T) T :-
  typeof E T.

sigma : (typ -> typ) -> typ.
pack  : typ -> term -> term.
unpack : term -> (typ -> term -> term) -> term.

typeof (pack T E) (sigma F) :-
  typeof E (F T).

typeof (unpack E F) T' :-
  typeof E (sigma TF),
  (x:typ -> y:term ->
   typeof y (TF x) ->
   typeof (F x y) T').

gentypeof : term -> typ -> prop.
gentype : typ -> typ -> prop.
gentypeof E T' :-
  typeof E T,
  gentype T T'.
gentype T T :- not(getunif T (T' : typ)).
gentype T (pi TF') :-
  getunif T (T' : typ),
  absunif T (T' : typ) TF,
  (x:typ -> gentype (TF x) (TF' x)).
