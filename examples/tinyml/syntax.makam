expr, baseexpr, exprC : syntax expr.
constr_args : syntax expr.
patt, pattC : syntax patt.
typ : syntax typ.
constrid : syntax constructor.
branch : syntax branch.
id : syntax (concrete.name expr).
def : syntax (concrete.name expr * expr).
binop, binopC : syntax binop.

%open syntax.

exprvar : concrete.namespace expr.
typvar : concrete.namespace typ.

clet : (concrete.name expr * expr) -> expr -> expr.
cletrec : (concrete.name expr * expr) -> expr -> expr.
cpvar : concrete.name expr -> patt.
cbranch : patt -> expr -> branch.

token_ARROW : syntax unit.
token_FATARROW : syntax unit.
token_PROD : syntax unit.

`( syntax_rules {{

token_ARROW -> { <token "→"> } / { <token "->"> }
token_FATARROW -> { <token "⇒"> } / { <token "=>"> }
token_PROD -> { <token "×"> } / { <token "*"> }

binop ->
        (fun u => binop_add) { <token "+"> }
      / (fun u => binop_sub) { <token "-"> }
      / (fun u => binop_mul) { <token "*"> }
      / (fun u => binop_le) { <token "<="> }
      / (fun u => binop_ge) { <token ">="> }
      / (fun u => binop_eq) { <token "=="> }
      / (fun u => binop_ne) { <token "!="> }
      / (fun u => binop_ne) { <token "<>"> }
      / (fun u => binop_lt) { <token "<"> }
      / (fun u => binop_gt) { <token ">"> }

}} ).

`( syntax.def_js binopC binop ).

`( syntax_rules {{

constr_args -> { <expr> } / (fun u => etuple nil) { <optunit ws_empty> }

expr -> etuple nil
        { "()" }
      / (fun ids => fun body => lam (concrete.bindmany ids body))
        { "(" <list_sep_plus (token ",") id> ")" token_FATARROW <expr> }
      / (fun hd => fun tl => etuple (cons hd tl))
        { "(" <expr> "," <list_sep (token ",") expr> ")" }
      / match
        { "match" <expr> "{" <list_sep (token "|") branch> "}" }
      / cletrec
        { "letrec" <def> "in" <expr> }
      / clet
        { "let" <def> "in" <expr> }
      / app
        { <baseexpr> "(" <list_sep_plus (token ",") expr> ")" }
      / constr
        { <constrid> <constr_args> }
      / ebinop
        { <baseexpr> <binopC> <baseexpr> }
      / { <baseexpr> }

baseexpr ->
        concrete.var
        { <id> }
      / eint
        { <makam.int_literal> }
      / { "(" <expr> ")" }

patt -> ptuple nil
        { "()" }
      / (fun hd => fun tl => ptuple (cons hd tl))
        { "(" <patt> "," <list_sep (token ",") patt> ")" }
      / cpvar
        { <id> }
      / pconstr
        { <constrid> <patt> }
      / (fun c => pconstr c (ptuple nil))
        { <constrid> }

def -> tuple
        { <id> "=" <expr> }

id -> concrete.name exprvar
        { <makam.ident> }

constrid -> constructor { <charcons (charclass "ABCDEFGHIJKLMNOPQRSTUVWXYZ") makam.ident_> }

branch -> cbranch
        { <pattC> token_FATARROW <expr> }

}} ).

`( syntax.def_js pattC patt ).
`( syntax.def_js exprC expr ).

concrete.pick_namespace_userdef (_: expr) exprvar.
concrete.pick_namespace_userdef (_: typ) typvar.

concrete.handle_unresolved_name (concrete.name exprvar ID) (named ID).
concrete.handle_unresolved_name (concrete.name typvar ID) (tbase ID).

concrete.resolve_conversion
    (clet (Name, Def) Body)
    (let Def (concrete.bindone Name Body)).

concrete.resolve_conversion
    (cletrec (Name, Def) Body)
    (letrec (concrete.bindone Name (Def, Body))).

concrete.resolve_conversion (cpvar N) pvar.

concrete.resolve_conversion
    (cbranch P E)
    (branch (P', concrete.bindmany Names E)) when refl.isunif P' :-
  concrete.names_of exprvar P Names,
  concrete.resolve (concrete P) P'.

concrete.resolve_conversion
    (cbranch P E)
    (branch (P', concrete.bindmany Names E)) when refl.isunif P :-
  concrete.resolve (concrete P) P',
  concrete.names_of exprvar P Names.


(* ---- moving on to programs ---- *)

program_ : syntax program.
program_concrete : syntax (concrete program).

topleveldef, topleveldef_ : syntax topleveldef.
constrdef : syntax (constructor * typ).
typC, typ, prodtyp, basetyp : syntax typ.
typid : syntax (concrete.name typ).
typ_concrete : syntax (concrete typ).

`( syntax_rules {{

program_concrete -> concrete { <program_> }
typ_concrete -> concrete { <typC> }

program_ -> program { <many topleveldef_> <exprC> }

topleveldef_ -> { <topleveldef> ";" (optunit ws_newline) }

topleveldef -> datadef
               { "data" <makam.ident> "=" <list_sep (token "|") constrdef> }
             / letdef
               { "let" <makam.ident> "=" <exprC> }

constrdef -> tuple
           { <constrid> "of" <typC> }
           / (fun c => tuple c (product nil))
           { <constrid> }

typ -> (fun t => fun t2 => arrowmany (cons t nil) t2)  { <basetyp> token_ARROW <typ> }
     / arrowmany { "(" <list_sep (token ",") typ> ")" token_ARROW <typ> }
     / prodtyp ;

prodtyp -> (fun hd => fun tl => product (cons hd tl)) { <basetyp> token_PROD <list_sep_plus token_PROD basetyp> }
     / basetyp ;

basetyp -> concrete.var { <typid> }
         / product nil { "()" }
         / { "(" <typ> ")" }

typid -> concrete.name typvar { <makam.ident> }

}}).

`( syntax.def_js typC typ ).
`( syntax.def_toplevel_js typ_concrete ).
`( syntax.def_toplevel_js program_concrete ).

change_unifs : typ -> typ -> prop.
change_unifs_cases : [A]reified A -> reified A -> prop.

change_unifs X Y :-
  if (refl.isunif Y) then
    (reify X X_reified,
     change_unifs_cases X_reified Y_reified,
     reflect Y_reified Y)
  else
    (reify Y Y_reified,
     change_unifs_cases X_reified Y_reified,
     reflect X_reified X).

change_unifs_cases (reified.term Head Args) (reified.term Head Args') :-
  reified_args.map @change_unifs_cases Args Args'.

change_unifs_cases (reified.const C) (reified.const C).

change_unifs_cases (reified.bvar Head Args) (reified.bvar Head Args') :-
  reified_args.map @change_unifs_cases Args Args'.

change_unifs_cases (reified.nvar Head Args) (reified.nvar Head Args') :-
  reified_args.map @change_unifs_cases Args Args'.

change_unifs_cases (reified.lambda F) (reified.lambda F') :-
  (x:A -> change_unifs_cases (F x) (F' x)).

change_unifs_cases (reified.unifvar I _ _ _) (reified.term concrete.var [ reified.term concrete.name [ reified.term typvar [], reified.const S ] ]) when refl.isunif S :-
  tostring I IS, expansion.str `t_${IS}` S.

isocast_def (Iso: iso typ string) :-
  eq Iso (iso.compose [ iso.bidi change_unifs, iso.inverse (iso.bidi concrete.resolve), PrettyIso ]),
  isocast_find unit (PrettyIso: iso (concrete typ) string).
