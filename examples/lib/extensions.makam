(* Redefine basic predicates before loading anything, so that
   extensions are supported properly. *)

builtin_known : clause -> prop -> prop.
builtin_known C G :- known C G.

builtin_resetknown : A -> prop -> prop.
builtin_resetknown P G :- resetknown P G.

known : clause -> prop -> prop.
resetknown : A -> prop -> prop.

%use utils.
%use generic.

(* --------------------------------------------------------- *)
(*  mode declarations                                        *)
(* --------------------------------------------------------- *)

guarded : type -> type.

transform_guarded : A -> B -> list dyn -> list dyn -> list dyn -> list dyn ->prop.
transform_guarded (X : (guarded A -> B)) (Y : A -> B') Res Res' Guards Guards' :-
  transform_guarded (X' : B) (Y' : B') ( (dyn (Z : A)) :: Res ) Res' ( (dyn (Z : A)) :: Guards ) Guards'.
transform_guarded (X : A -> B) (Y : A -> B') Res Res' Guards Guards' :-
  not(typeq (Q : A) (W : guarded C)),
  transform_guarded (X' : B) (Y' : B') ( (dyn (Z : A)) :: Res ) Res' Guards Guards'.
transform_guarded X Y Res Res' Guards Guards' :-
  not(typeq (X : A) (W : B -> C)), typeq X Y, reverse Res Res', reverse Guards Guards'.

transform_modedecl_preds : A -> A -> prop.

modedecl : cmd -> cmd -> prop.

transform_modedecl_clause : clause -> clause -> prop.

transform_modedecl_clause ClauseIn ClauseOut :-

  caseguard ClauseIn
   [ (clause G1 P1,
        {prop| headargs G1 X1 Args1, transform_modedecl_preds X1 X1' |},
        {prop| headargs G1' X1' Args1, eq ClauseOut (clause G1' P1) |}),
     (whenclause G2 Pre2 P2,
        {prop| headargs G2 X2 Args2, transform_modedecl_preds X2 X2' |},
        {prop| headargs G2' X2' Args2, eq ClauseOut (whenclause G2' Pre2 P2) |}),
     (C3,
        {prop| success |},
        {prop| eq ClauseOut ClauseIn |}) ].

   

modedecl CmdIn CmdOut :-

  caseguard CmdIn
   [ (cmd_newterm X T,
        {prop| transform_guarded T T' [] Params [] Guards, not(typeq T T') |},
	{prop| append X "_guarded" CX,
	       eq CmdOut (cmd_many
	         [ cmd_newterm X T' ,
                   cmd_newterm CX T',
                   cmd_stage (fun res =>
		     {prop| lookup X Xt, lookup CX CXt,
                            headargs G Xt Params, headargs CG CXt Params,
		            eq res (cmd_many
			     [ cmd_newclause (clause (transform_modedecl_preds Xt CXt) (success)),
			       cmd_newclause (clause G (guardall Guards CG)) ]) |}) ]) |}),
     (cmd_newclause C,
        {prop| transform_modedecl_clause C C' |},
        {prop| eq CmdOut (cmd_newclause C') |}),
     (Cmd, success, eq CmdOut Cmd) ].



(* --------------------------------------------------------- *)
(*  otherwise clauses                                        *)
(* --------------------------------------------------------- *)

otherwise : A -> prop.
otherwise X :- print "The otherwise predicate is just an annotation -- it should not be used directly. Make sure you are using the owise extension.", failure.

transform_owise_preds : A -> A -> A -> prop.

owise : cmd -> cmd -> prop.

get_goal : clause -> prop -> prop.
get_goal (clause G _) G.
get_goal (whenclause G _ _) G.

set_goal : clause -> prop -> clause -> prop.
set_goal (clause _ Q) G (clause G Q).
set_goal (whenclause _ Q R) G (whenclause G Q R).

transform_owise_clause : clause -> clause -> prop.

transform_owise_clause ClauseIn ClauseOut :-

  get_goal ClauseIn Goal,

  caseguard Goal
   [ (otherwise G1,
        {prop| success |},
        {prop| headargs G1 X1 Args1, transform_owise_preds X1 _ X1', headargs G1' X1' Args1,
	       set_goal ClauseIn G1' ClauseOut |}),
     (G2,
        {prop| headargs G2 X2 Args2, transform_owise_preds X2 X2' _ |},
        {prop| headargs G2' X2' Args2, set_goal ClauseIn G2' ClauseOut |}),
     (C3,
        {prop| success |},
        {prop| eq ClauseOut ClauseIn |}) ].

appmany_all : A -> list dyn -> B -> prop.
appmany_all (X : A -> B) (cons (dyn (HD : A)) TL) Res :- appmany_all (X HD) TL Res.
appmany_all (X : A) nil (X : A) :- not(typeq X (Z : B -> C)).

owise CmdIn CmdOut :-

  caseguard CmdIn
   [ (cmd_newterm X T,
        {prop| success |},
	{prop| append X "_normal" X1,
	       append X "_otherwise" X2,
	       eq CmdOut (cmd_many
	         [ cmd_newterm X T,
		   cmd_newterm X1 T,
		   cmd_newterm X2 T,
                   cmd_stage (fun res =>
		     {prop| lookup X Xt, lookup X1 X1t, lookup X2 X2t,
		            appmany_all Xt Unifs XtUnifs, appmany_all X1t Unifs X1tUnifs, appmany_all X2t Unifs X2tUnifs,
		            eq res (cmd_many
			     [ cmd_newclause (clause (transform_owise_preds Xt X1t X2t) success),
			       cmd_newclause (clause XtUnifs (ifte X1tUnifs success X2tUnifs)) ]) |}) ]) |}),
     (cmd_newclause C,
        {prop| transform_owise_clause C C' |},
        {prop| eq CmdOut (cmd_newclause C') |}),
     (Cmd, success, eq CmdOut Cmd) ].



(* ------------------------------------------------ *)
(*  transformation of clauses for known/resetknown  *)
(* ------------------------------------------------ *)

transform_clause : clause -> clause -> prop.
transform_clause C C'' :- transform_modedecl_clause C C', transform_owise_clause C' C''.


known C Q :- 
  transform_clause C C', builtin_known C' Q.
resetknown C Q :-
  transform_clause C C', builtin_known C' Q.



(* test *)

knd            : type.
ktype          : knd.
kname          : knd.
karrow         : knd -> knd -> knd.
kmap           : knd -> knd.
typ            : type.
tarrow         : typ -> typ -> typ .
tbase          : string -> typ.
tpi            : knd -> (typ -> typ) -> typ.

kindof_var : string -> knd -> prop.

`( modedecl (cmd_newterm "kindof" (X : guarded typ -> knd -> prop)) ).
`( modedecl (cmd_newclause (clause (kindof (tarrow T1 T2) ktype) {prop| kindof T1 ktype, kindof T2 ktype |}))).
`( modedecl (cmd_newclause (clause (kindof (tbase T) K) {prop| kindof_var T K |}))).
`( modedecl (cmd_newclause (clause (kindof (tpi K TF) ktype) {prop| (x:typ -> kindof x K -> kindof (TF x) ktype) |}))).


`( owise (cmd_newterm "test" (X : knd -> prop))).
`( owise (cmd_newclause (clause (test ktype) (print "lala"))) ).
`( owise (cmd_newclause (clause (otherwise (test X)) {prop| print "babu", eq X ktype, print "bare" |}))).


