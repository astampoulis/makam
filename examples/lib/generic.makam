%use utils.

structural : (dyn -> dyn -> prop) -> dyn -> dyn -> prop.

(* defer if both input and output are uninstantiated metavariables *)
(structural Rec (dyn (X : A)) (dyn (Y : A))) when refl.isunif X, refl.isunif Y <-
  guardmany [ dyn X , dyn Y ] (Rec (dyn X) (dyn Y)).

(* deal with built-in types *)
structural Rec (dyn (X : string)) (dyn (X : string)).
structural Rec (dyn (X : int)) (dyn (X : int)).
structural Rec (dyn (X : A -> B)) (dyn (Y : A -> B)) <-
  (x:A -> Rec (dyn (X x)) (dyn (Y x))).

(* the essence: forward and backward destructuring *)

(structural Rec (dyn (X : A)) (dyn (Y : A)))
when not(typeq X (B : C -> D)), not(refl.isunif X) <-
  refl.headargs X Hd Args,
  map Rec Args Args',
  refl.headargs Y Hd Args'.

(structural Rec (dyn (X : A)) (dyn (Y : A)))
when not(typeq X (B : C -> D)), refl.isunif X, not(refl.isunif Y) <-
  refl.headargs Y Hd Args',
  map Rec Args Args',
  refl.headargs X Hd Args.

(* Generic fold *)

generic_fold : (dyn -> A -> A -> prop) -> dyn -> A -> A -> prop.
(generic_fold F (dyn (X : A)) Cur Res) when refl.isunif X <-
  guard X (F (dyn X) Cur Res).
generic_fold F (dyn (X : string)) Cur Cur.
generic_fold F (dyn (X : int)) Cur Cur.
generic_fold F (dyn (X : A -> B)) Cur Res <-
  (x:A -> F (dyn (X x)) Cur Res).
(generic_fold F (dyn (X : A)) Cur Res)
when not(typeq X (B : C -> D)), not(refl.isunif X) <-
  refl.headargs X Hd Args,
  foldl (fun cur elm res => F elm cur res) Cur Args Res.  


(* eq_benign: no instantiation goes on. *)
eq_benign : A -> A -> prop.
eq_benign_aux : dyn -> dyn -> prop.

eq_benign X Y <- eq_benign_aux (dyn X) (dyn Y).

(eq_benign_aux (dyn (X : A)) (dyn (Y : A))) when refl.isunif X, refl.isunif Y, refl.decomposeunif X I Xargs, refl.decomposeunif Y I Yargs <-
  map eq_benign_aux Xargs Yargs.
(eq_benign_aux (dyn (X : string)) (dyn (Y : string))) when not(refl.isunif X), not(refl.isunif Y) <- eq X Y.
(eq_benign_aux (dyn (X : int)) (dyn (Y : int))) when not(refl.isunif X), not(refl.isunif Y) <- eq X Y.
(eq_benign_aux (dyn (X : A -> B)) (dyn (Y : A -> B))) when not(refl.isunif X), not(refl.isunif Y) <-
  (x:A -> eq_benign_aux (dyn (X x)) (dyn (Y x))).

builtintyp : [A] A -> prop.
builtintyp (X : A -> B).
builtintyp (X : string).
builtintyp (X : int).

(eq_benign_aux (dyn X) (dyn Y)) when not(refl.isunif X), not(refl.isunif Y), not(builtintyp X) <-
  refl.headargs X Hd Args,
  refl.headargs Y Hd Args',
  map eq_benign_aux Args Args'.

