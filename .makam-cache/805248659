(function (input, startOffset) {
      let offset = startOffset;
      const parsers = {
    "(peg.layout.enter layout_grammar_tests.pterm)": (function*(args) {
      const {  } = args;
      const memoEntry = `(peg.layout.enter layout_grammar_tests.pterm)`;
      const historyEntry = `(peg.layout.enter layout_grammar_tests.pterm):${offset}`;
      const keepOffset = offset;
      if (history.includes(historyEntry)) {
        throw new Error(`left recursion found: adding ${historyEntry} to ${history}`);
      }
      if (memoEntry in memoize && memoize[memoEntry][keepOffset] !== undefined) {
        const { result, newOffset } = memoize[memoEntry][keepOffset];
        offset = newOffset;
        return result;
      } else {
        let historyCopy = history.slice();
        history.push(historyEntry);
        const data = (function (input, offset) { return (function (input, startOffset) {
     const currentLineOffset = (offset) => {
       const lastNewlineOffset = input.lastIndexOf("\n", offset);
       const lastCarret = input.lastIndexOf("\r", offset);
       const lastLineOffset = Math.max(lastNewlineOffset, lastCarret);
       return JSON.stringify(lastLineOffset == -1 ? offset : offset - lastLineOffset - 1);
     };

     const layoutOffsets = [ { stringOffset: startOffset, layoutOffset: -1 } ];

     const previousLayoutOffset = (offset) => {
       const previous = layoutOffsets.slice().reverse().find(({stringOffset}) => stringOffset <= offset);
       return JSON.stringify(previous.layoutOffset);
     };
     const addLayoutOffset = (stringOffset, layoutOffset) => {
       if (layoutOffsets.find(x => x.stringOffset === stringOffset)) return;
       layoutOffsets.push({stringOffset, layoutOffset});
       layoutOffsets.sort((a, b) => a.stringOffset - b.stringOffset);
     };
     const popLayoutOffset = (offset, curLayoutOffset) => {
       const previous = layoutOffsets.slice().reverse().find(({stringOffset, layoutOffset}) => stringOffset <= offset && layoutOffset < curLayoutOffset);
       addLayoutOffset(offset, previous.layoutOffset);
     };
     return (function (input, startOffset) {
      let offset = startOffset;
      const parsers = {
    "(peg.layout.block (fun (x_0: peg.peg unit) => layout_grammar_tests.pterm))": (function*(args) {
      const {  } = args;
      const memoEntry = `(peg.layout.block (fun (x_0: peg.peg unit) => layout_grammar_tests.pterm))`;
      const historyEntry = `(peg.layout.block (fun (x_0: peg.peg unit) => layout_grammar_tests.pterm)):${offset}`;
      const keepOffset = offset;
      if (history.includes(historyEntry)) {
        throw new Error(`left recursion found: adding ${historyEntry} to ${history}`);
      }
      if (memoEntry in memoize && memoize[memoEntry][keepOffset] !== undefined) {
        const { result, newOffset } = memoize[memoEntry][keepOffset];
        offset = newOffset;
        return result;
      } else {
        let historyCopy = history.slice();
        history.push(historyEntry);
        const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (function(){return previousLayoutOffset(offset);})();
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (function(){return currentLineOffset(offset);})();
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (function(){
      // console.error("layout.begin", "current", JSON.parse(`${result_1}`), "new", JSON.parse(`${result_2}`), `start of input is <<${input.substr(offset, 15)}>>`);
      if (JSON.parse(`${result_2}`) > JSON.parse(`${result_1}`)) {
        // console.error(`layout.begin successful for layout offset ${JSON.parse(`${result_2}`)}`);
        addLayoutOffset(offset, JSON.parse(`${result_2}`));
        return `${result_2}`;
      } else {
        // console.error(`layout.begin failed for layout offset ${JSON.parse(`${result_2}`)}`);
        return null;
      }
    })();
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = yield { parser: "layout_grammar_tests.pterm", args: {  } };
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_3 = `${result_1}`;
     if (result_3 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_4 = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (function(){return currentLineOffset(offset);})();
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result_4 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (function(){
      // console.error("layout.end", "layout", JSON.parse(`${result_3}`), "line", JSON.parse(`${result_4}`), `start of input is <<${input.substr(offset, 15)}>>`);
    })();
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_5 = `${result_1}`;
     if (result_5 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_6 = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (function(){return currentLineOffset(offset);})();
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result_6 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (offset < input.length
     ? (JSON.stringify(input[offset++]))
     : null);
     offset = keepOffset;
     return (result === null ? "unit" : null);
  })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     offset = keepOffset;
     return (result === null ? "unit" : null);
  })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (function(){
      // console.error("layout.next", "layout", JSON.parse(`${result_5}`), "line", JSON.parse(`${result_6}`), `start of input is <<${input.substr(offset, 15)}>>`);
      if (JSON.parse(`${result_5}`) == JSON.parse(`${result_6}`)) {
        // console.error(`layout.next successful for layout offset ${JSON.parse(`${result_5}`)}`);
        addLayoutOffset(offset, JSON.parse(`${result_5}`));
        return "unit";
      } else {
        // console.error(`layout.next failed for layout offset ${JSON.parse(`${result_5}`)}`);
        return null;
      }
    })();
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     offset = keepOffset;
     return (result === null ? "unit" : null);
  })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (function(){
        // console.error(`layout.end successful for layout offset ${JSON.parse(`${result_3}`)}`);
        popLayoutOffset(offset, JSON.parse(`${result_3}`));
        return "unit";
    })();
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `${result_2}`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
        if (result === null) offset = keepOffset;
        if (!(memoEntry in memoize)) memoize[memoEntry] = {};
        memoize[memoEntry][keepOffset] = { result, newOffset: offset };
        history = historyCopy;
        return result;
      }
     }),
   "(peg.syntax (syntax.choices (cons (syntax.transform (fun (x_0: string) => (fun (x_1: string) => (fun (x_2: string) => (string.append x_0 x_1 x_2)))) \"(a, b) => JSON.stringify(JSON.parse(a) + JSON.parse(b))\" (fun (x_0: string) => (fun (x_1: string) => (fun (x_2: string) => (string.headtail x_2 x_0 x_1)))) (syntax.cons (syntax.captured (syntax.charclass \"abcdefghijklmnopqrstuvwxyz\")) (syntax.cons (syntax.captured (syntax.charmany (syntax.charclass \"abcdefghijklmnopqrstuvwxyz\"))) syntax.nil))) (cons (syntax.apply \"\" syntax.nil) nil))))": (function*(args) {
      const {  } = args;
      const memoEntry = `(peg.syntax (syntax.choices (cons (syntax.transform (fun (x_0: string) => (fun (x_1: string) => (fun (x_2: string) => (string.append x_0 x_1 x_2)))) "(a, b) => JSON.stringify(JSON.parse(a) + JSON.parse(b))" (fun (x_0: string) => (fun (x_1: string) => (fun (x_2: string) => (string.headtail x_2 x_0 x_1)))) (syntax.cons (syntax.captured (syntax.charclass "abcdefghijklmnopqrstuvwxyz")) (syntax.cons (syntax.captured (syntax.charmany (syntax.charclass "abcdefghijklmnopqrstuvwxyz"))) syntax.nil))) (cons (syntax.apply "" syntax.nil) nil))))`;
      const historyEntry = `(peg.syntax (syntax.choices (cons (syntax.transform (fun (x_0: string) => (fun (x_1: string) => (fun (x_2: string) => (string.append x_0 x_1 x_2)))) "(a, b) => JSON.stringify(JSON.parse(a) + JSON.parse(b))" (fun (x_0: string) => (fun (x_1: string) => (fun (x_2: string) => (string.headtail x_2 x_0 x_1)))) (syntax.cons (syntax.captured (syntax.charclass "abcdefghijklmnopqrstuvwxyz")) (syntax.cons (syntax.captured (syntax.charmany (syntax.charclass "abcdefghijklmnopqrstuvwxyz"))) syntax.nil))) (cons (syntax.apply "" syntax.nil) nil)))):${offset}`;
      const keepOffset = offset;
      if (history.includes(historyEntry)) {
        throw new Error(`left recursion found: adding ${historyEntry} to ${history}`);
      }
      if (memoEntry in memoize && memoize[memoEntry][keepOffset] !== undefined) {
        const { result, newOffset } = memoize[memoEntry][keepOffset];
        offset = newOffset;
        return result;
      } else {
        let historyCopy = history.slice();
        history.push(historyEntry);
        const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = ((offset < input.length && "abcdefghijklmnopqrstuvwxyz".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_3 = yield { parser: "(peg.syntax (syntax.choices (cons (syntax.transform (fun (x_0: string) => (fun (x_1: string) => (fun (x_2: string) => (string.append x_0 x_1 x_2)))) \"(a, b) => JSON.stringify(JSON.parse(a) + JSON.parse(b))\" (fun (x_0: string) => (fun (x_1: string) => (fun (x_2: string) => (string.headtail x_2 x_0 x_1)))) (syntax.cons (syntax.captured (syntax.charclass \"abcdefghijklmnopqrstuvwxyz\")) (syntax.cons (syntax.captured (syntax.charmany (syntax.charclass \"abcdefghijklmnopqrstuvwxyz\"))) syntax.nil))) (cons (syntax.apply \"\" syntax.nil) nil))))", args: {  } };
     if (result_3 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (function(){return ((a, b) => JSON.stringify(JSON.parse(a) + JSON.parse(b)))(`${result_2}`, `${result_3}`);})();
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = `""`;
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
        if (result === null) offset = keepOffset;
        if (!(memoEntry in memoize)) memoize[memoEntry] = {};
        memoize[memoEntry][keepOffset] = { result, newOffset: offset };
        history = historyCopy;
        return result;
      }
     }),
   "layout_grammar_tests.label": (function*(args) {
      const {  } = args;
      const memoEntry = `layout_grammar_tests.label`;
      const historyEntry = `layout_grammar_tests.label:${offset}`;
      const keepOffset = offset;
      if (history.includes(historyEntry)) {
        throw new Error(`left recursion found: adding ${historyEntry} to ${history}`);
      }
      if (memoEntry in memoize && memoize[memoEntry][keepOffset] !== undefined) {
        const { result, newOffset } = memoize[memoEntry][keepOffset];
        offset = newOffset;
        return result;
      } else {
        let historyCopy = history.slice();
        history.push(historyEntry);
        const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = ((offset < input.length && "abcdefghijklmnopqrstuvwxyz".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = yield { parser: "(peg.syntax (syntax.choices (cons (syntax.transform (fun (x_0: string) => (fun (x_1: string) => (fun (x_2: string) => (string.append x_0 x_1 x_2)))) \"(a, b) => JSON.stringify(JSON.parse(a) + JSON.parse(b))\" (fun (x_0: string) => (fun (x_1: string) => (fun (x_2: string) => (string.headtail x_2 x_0 x_1)))) (syntax.cons (syntax.captured (syntax.charclass \"abcdefghijklmnopqrstuvwxyz\")) (syntax.cons (syntax.captured (syntax.charmany (syntax.charclass \"abcdefghijklmnopqrstuvwxyz\"))) syntax.nil))) (cons (syntax.apply \"\" syntax.nil) nil))))", args: {  } };
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (function(){return ((a, b) => JSON.stringify(JSON.parse(a) + JSON.parse(b)))(`${result_1}`, `${result_2}`);})();
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
        if (result === null) offset = keepOffset;
        if (!(memoEntry in memoize)) memoize[memoEntry] = {};
        memoize[memoEntry][keepOffset] = { result, newOffset: offset };
        history = historyCopy;
        return result;
      }
     }),
   "(peg.layout.block (fun (x_0: peg.peg unit) => (peg.many (peg.apply (fun (x_1: string) => (fun (x_2: layout_grammar_tests.term) => (tuple x_1 x_2))) (peg.cons x_0 (peg.cons (peg.captured (layout_grammar_tests.token layout_grammar_tests.label)) (peg.cons (layout_grammar_tests.token \"=\") (peg.cons (peg.captured layout_grammar_tests.pterm) peg.nil))))))))": (function*(args) {
      const {  } = args;
      const memoEntry = `(peg.layout.block (fun (x_0: peg.peg unit) => (peg.many (peg.apply (fun (x_1: string) => (fun (x_2: layout_grammar_tests.term) => (tuple x_1 x_2))) (peg.cons x_0 (peg.cons (peg.captured (layout_grammar_tests.token layout_grammar_tests.label)) (peg.cons (layout_grammar_tests.token "=") (peg.cons (peg.captured layout_grammar_tests.pterm) peg.nil))))))))`;
      const historyEntry = `(peg.layout.block (fun (x_0: peg.peg unit) => (peg.many (peg.apply (fun (x_1: string) => (fun (x_2: layout_grammar_tests.term) => (tuple x_1 x_2))) (peg.cons x_0 (peg.cons (peg.captured (layout_grammar_tests.token layout_grammar_tests.label)) (peg.cons (layout_grammar_tests.token "=") (peg.cons (peg.captured layout_grammar_tests.pterm) peg.nil)))))))):${offset}`;
      const keepOffset = offset;
      if (history.includes(historyEntry)) {
        throw new Error(`left recursion found: adding ${historyEntry} to ${history}`);
      }
      if (memoEntry in memoize && memoize[memoEntry][keepOffset] !== undefined) {
        const { result, newOffset } = memoize[memoEntry][keepOffset];
        offset = newOffset;
        return result;
      } else {
        let historyCopy = history.slice();
        history.push(historyEntry);
        const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_0 = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_0 = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (function(){return previousLayoutOffset(offset);})();
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result_0 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (function(){return currentLineOffset(offset);})();
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (function(){
      // console.error("layout.begin", "current", JSON.parse(`${result_0}`), "new", JSON.parse(`${result_1}`), `start of input is <<${input.substr(offset, 15)}>>`);
      if (JSON.parse(`${result_1}`) > JSON.parse(`${result_0}`)) {
        // console.error(`layout.begin successful for layout offset ${JSON.parse(`${result_1}`)}`);
        addLayoutOffset(offset, JSON.parse(`${result_1}`));
        return `${result_1}`;
      } else {
        // console.error(`layout.begin failed for layout offset ${JSON.parse(`${result_1}`)}`);
        return null;
      }
    })();
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result_0 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = `${result_0}`;
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (function(){return currentLineOffset(offset);})();
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (offset < input.length
     ? (JSON.stringify(input[offset++]))
     : null);
     offset = keepOffset;
     return (result === null ? "unit" : null);
  })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     offset = keepOffset;
     return (result === null ? "unit" : null);
  })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (function(){
      // console.error("layout.next", "layout", JSON.parse(`${result_1}`), "line", JSON.parse(`${result_2}`), `start of input is <<${input.substr(offset, 15)}>>`);
      if (JSON.parse(`${result_1}`) == JSON.parse(`${result_2}`)) {
        // console.error(`layout.next successful for layout offset ${JSON.parse(`${result_1}`)}`);
        addLayoutOffset(offset, JSON.parse(`${result_1}`));
        return "unit";
      } else {
        // console.error(`layout.next failed for layout offset ${JSON.parse(`${result_1}`)}`);
        return null;
      }
    })();
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (function(){return previousLayoutOffset(offset);})();
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = ((offset < input.length && " \t".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_3 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \t".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_3 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_2} ${result_3})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_3 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_3 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_2} ${result_3})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \t".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_3 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_3 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_2} ${result_3})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     offset = keepOffset;
     return (result === null ? null : "unit");
  })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_3 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_3 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_2} ${result_3})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \t".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (function(){return currentLineOffset(offset);})();
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (function(){
          // console.error("layout.ws", "layout", JSON.parse(`${result_1}`), "line", JSON.parse(`${result_2}`), `start of input is <<${input.substr(offset, 15)}>>`);
          if (JSON.parse(`${result_2}`) > JSON.parse(`${result_1}`)) {
            // console.error(`layout.ws successful for layout offset ${JSON.parse(`${result_1}`)}`);
            return "unit";
          } else {
            return null;
          }
        })();
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_3 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_3 = ((offset < input.length && " \t".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_3 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_4 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \t".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_4 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_3} ${result_4})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_3 = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_3 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_4 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_4 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_3} ${result_4})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \t".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_3 = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_3 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_4 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_4 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_3} ${result_4})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     offset = keepOffset;
     return (result === null ? null : "unit");
  })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_3 = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_3 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_4 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_4 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_3} ${result_4})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \t".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_3 = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (function(){return currentLineOffset(offset);})();
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result_3 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (function(){
          // console.error("layout.ws", "layout", JSON.parse(`${result_1}`), "line", JSON.parse(`${result_3}`), `start of input is <<${input.substr(offset, 15)}>>`);
          if (JSON.parse(`${result_3}`) > JSON.parse(`${result_1}`)) {
            // console.error(`layout.ws successful for layout offset ${JSON.parse(`${result_1}`)}`);
            return "unit";
          } else {
            return null;
          }
        })();
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_3 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_2} ${result_3})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(some ${result_1})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = `none`;
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = yield { parser: "layout_grammar_tests.label", args: {  } };
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (function(){return previousLayoutOffset(offset);})();
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_3 = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_3 = ((offset < input.length && " \t".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_3 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_4 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \t".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_4 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_3} ${result_4})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_3 = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_3 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_4 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_4 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_3} ${result_4})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \t".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_3 = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_3 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_4 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_4 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_3} ${result_4})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     offset = keepOffset;
     return (result === null ? null : "unit");
  })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_3 = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_3 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_4 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_4 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_3} ${result_4})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \t".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_3 = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (function(){return currentLineOffset(offset);})();
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result_3 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (function(){
          // console.error("layout.ws", "layout", JSON.parse(`${result_2}`), "line", JSON.parse(`${result_3}`), `start of input is <<${input.substr(offset, 15)}>>`);
          if (JSON.parse(`${result_3}`) > JSON.parse(`${result_2}`)) {
            // console.error(`layout.ws successful for layout offset ${JSON.parse(`${result_2}`)}`);
            return "unit";
          } else {
            return null;
          }
        })();
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result_3 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_4 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_4 = ((offset < input.length && " \t".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_4 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_5 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \t".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_5 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_4} ${result_5})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_4 = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_4 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_5 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_5 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_4} ${result_5})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \t".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_4 = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_4 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_5 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_5 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_4} ${result_5})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     offset = keepOffset;
     return (result === null ? null : "unit");
  })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_4 = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_4 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_5 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_5 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_4} ${result_5})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \t".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_4 = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (function(){return currentLineOffset(offset);})();
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result_4 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (function(){
          // console.error("layout.ws", "layout", JSON.parse(`${result_2}`), "line", JSON.parse(`${result_4}`), `start of input is <<${input.substr(offset, 15)}>>`);
          if (JSON.parse(`${result_4}`) > JSON.parse(`${result_2}`)) {
            // console.error(`layout.ws successful for layout offset ${JSON.parse(`${result_2}`)}`);
            return "unit";
          } else {
            return null;
          }
        })();
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_4 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_3} ${result_4})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(some ${result_2})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = `none`;
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `${result_1}`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (function(){return previousLayoutOffset(offset);})();
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_3 = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_3 = ((offset < input.length && " \t".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_3 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_4 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \t".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_4 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_3} ${result_4})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_3 = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_3 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_4 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_4 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_3} ${result_4})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \t".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_3 = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_3 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_4 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_4 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_3} ${result_4})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     offset = keepOffset;
     return (result === null ? null : "unit");
  })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_3 = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_3 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_4 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_4 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_3} ${result_4})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \t".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_3 = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (function(){return currentLineOffset(offset);})();
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result_3 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (function(){
          // console.error("layout.ws", "layout", JSON.parse(`${result_2}`), "line", JSON.parse(`${result_3}`), `start of input is <<${input.substr(offset, 15)}>>`);
          if (JSON.parse(`${result_3}`) > JSON.parse(`${result_2}`)) {
            // console.error(`layout.ws successful for layout offset ${JSON.parse(`${result_2}`)}`);
            return "unit";
          } else {
            return null;
          }
        })();
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result_3 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_4 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_4 = ((offset < input.length && " \t".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_4 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_5 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \t".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_5 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_4} ${result_5})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_4 = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_4 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_5 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_5 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_4} ${result_5})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \t".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_4 = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_4 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_5 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_5 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_4} ${result_5})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     offset = keepOffset;
     return (result === null ? null : "unit");
  })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_4 = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_4 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_5 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_5 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_4} ${result_5})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \t".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_4 = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (function(){return currentLineOffset(offset);})();
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result_4 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (function(){
          // console.error("layout.ws", "layout", JSON.parse(`${result_2}`), "line", JSON.parse(`${result_4}`), `start of input is <<${input.substr(offset, 15)}>>`);
          if (JSON.parse(`${result_4}`) > JSON.parse(`${result_2}`)) {
            // console.error(`layout.ws successful for layout offset ${JSON.parse(`${result_2}`)}`);
            return "unit";
          } else {
            return null;
          }
        })();
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_4 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_3} ${result_4})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(some ${result_2})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = `none`;
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = (input.startsWith("=", offset)
    ? (offset += "=".length, JSON.stringify("="))
    : null);
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_3 = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     const result_3 = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (function(){return previousLayoutOffset(offset);})();
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result_3 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_4 = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_4 = ((offset < input.length && " \t".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_4 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_5 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \t".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_5 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_4} ${result_5})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_4 = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_4 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_5 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_5 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_4} ${result_5})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \t".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_4 = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_4 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_5 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_5 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_4} ${result_5})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     offset = keepOffset;
     return (result === null ? null : "unit");
  })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_4 = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_4 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_5 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_5 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_4} ${result_5})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \t".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_4 = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (function(){return currentLineOffset(offset);})();
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result_4 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (function(){
          // console.error("layout.ws", "layout", JSON.parse(`${result_3}`), "line", JSON.parse(`${result_4}`), `start of input is <<${input.substr(offset, 15)}>>`);
          if (JSON.parse(`${result_4}`) > JSON.parse(`${result_3}`)) {
            // console.error(`layout.ws successful for layout offset ${JSON.parse(`${result_3}`)}`);
            return "unit";
          } else {
            return null;
          }
        })();
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result_4 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_5 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_5 = ((offset < input.length && " \t".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_5 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_6 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \t".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_6 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_5} ${result_6})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_5 = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_5 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_6 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_6 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_5} ${result_6})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \t".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_5 = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_5 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_6 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_6 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_5} ${result_6})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     offset = keepOffset;
     return (result === null ? null : "unit");
  })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_5 = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_5 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_6 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_6 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_5} ${result_6})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \t".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_5 = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (function(){return currentLineOffset(offset);})();
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result_5 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (function(){
          // console.error("layout.ws", "layout", JSON.parse(`${result_3}`), "line", JSON.parse(`${result_5}`), `start of input is <<${input.substr(offset, 15)}>>`);
          if (JSON.parse(`${result_5}`) > JSON.parse(`${result_3}`)) {
            // console.error(`layout.ws successful for layout offset ${JSON.parse(`${result_3}`)}`);
            return "unit";
          } else {
            return null;
          }
        })();
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_5 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_4} ${result_5})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result_3 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(some ${result_3})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = `none`;
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `${result_2}`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = yield { parser: "layout_grammar_tests.pterm", args: {  } };
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(tuple ${result_1} ${result_2})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = `${result_0}`;
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_3 = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (function(){return currentLineOffset(offset);})();
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result_3 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (function(){
      // console.error("layout.end", "layout", JSON.parse(`${result_2}`), "line", JSON.parse(`${result_3}`), `start of input is <<${input.substr(offset, 15)}>>`);
    })();
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_4 = `${result_0}`;
     if (result_4 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_5 = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (function(){return currentLineOffset(offset);})();
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result_5 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (offset < input.length
     ? (JSON.stringify(input[offset++]))
     : null);
     offset = keepOffset;
     return (result === null ? "unit" : null);
  })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     offset = keepOffset;
     return (result === null ? "unit" : null);
  })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (function(){
      // console.error("layout.next", "layout", JSON.parse(`${result_4}`), "line", JSON.parse(`${result_5}`), `start of input is <<${input.substr(offset, 15)}>>`);
      if (JSON.parse(`${result_4}`) == JSON.parse(`${result_5}`)) {
        // console.error(`layout.next successful for layout offset ${JSON.parse(`${result_4}`)}`);
        addLayoutOffset(offset, JSON.parse(`${result_4}`));
        return "unit";
      } else {
        // console.error(`layout.next failed for layout offset ${JSON.parse(`${result_4}`)}`);
        return null;
      }
    })();
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     offset = keepOffset;
     return (result === null ? "unit" : null);
  })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (function(){
        // console.error(`layout.end successful for layout offset ${JSON.parse(`${result_2}`)}`);
        popLayoutOffset(offset, JSON.parse(`${result_2}`));
        return "unit";
    })();
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `${result_1}`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
        if (result === null) offset = keepOffset;
        if (!(memoEntry in memoize)) memoize[memoEntry] = {};
        memoize[memoEntry][keepOffset] = { result, newOffset: offset };
        history = historyCopy;
        return result;
      }
     }),
   "layout_grammar_tests.pterm": (function*(args) {
      const {  } = args;
      const memoEntry = `layout_grammar_tests.pterm`;
      const historyEntry = `layout_grammar_tests.pterm:${offset}`;
      const keepOffset = offset;
      if (history.includes(historyEntry)) {
        throw new Error(`left recursion found: adding ${historyEntry} to ${history}`);
      }
      if (memoEntry in memoize && memoize[memoEntry][keepOffset] !== undefined) {
        const { result, newOffset } = memoize[memoEntry][keepOffset];
        offset = newOffset;
        return result;
      } else {
        let historyCopy = history.slice();
        history.push(historyEntry);
        const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_0 = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     const result_0 = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (function(){return previousLayoutOffset(offset);})();
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result_0 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = ((offset < input.length && " \t".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \t".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_1} ${result_2})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_1} ${result_2})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \t".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_1} ${result_2})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     offset = keepOffset;
     return (result === null ? null : "unit");
  })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_1} ${result_2})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \t".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (function(){return currentLineOffset(offset);})();
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (function(){
          // console.error("layout.ws", "layout", JSON.parse(`${result_0}`), "line", JSON.parse(`${result_1}`), `start of input is <<${input.substr(offset, 15)}>>`);
          if (JSON.parse(`${result_1}`) > JSON.parse(`${result_0}`)) {
            // console.error(`layout.ws successful for layout offset ${JSON.parse(`${result_0}`)}`);
            return "unit";
          } else {
            return null;
          }
        })();
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = ((offset < input.length && " \t".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_3 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \t".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_3 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_2} ${result_3})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_3 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_3 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_2} ${result_3})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \t".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_3 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_3 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_2} ${result_3})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     offset = keepOffset;
     return (result === null ? null : "unit");
  })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_3 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_3 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_2} ${result_3})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \t".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (function(){return currentLineOffset(offset);})();
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (function(){
          // console.error("layout.ws", "layout", JSON.parse(`${result_0}`), "line", JSON.parse(`${result_2}`), `start of input is <<${input.substr(offset, 15)}>>`);
          if (JSON.parse(`${result_2}`) > JSON.parse(`${result_0}`)) {
            // console.error(`layout.ws successful for layout offset ${JSON.parse(`${result_0}`)}`);
            return "unit";
          } else {
            return null;
          }
        })();
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_1} ${result_2})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result_0 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(some ${result_0})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = `none`;
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_0 = (input.startsWith("'let", offset)
    ? (offset += "'let".length, JSON.stringify("'let"))
    : null);
     if (result_0 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (function(){return previousLayoutOffset(offset);})();
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = ((offset < input.length && " \t".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_3 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \t".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_3 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_2} ${result_3})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_3 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_3 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_2} ${result_3})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \t".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_3 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_3 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_2} ${result_3})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     offset = keepOffset;
     return (result === null ? null : "unit");
  })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_3 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_3 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_2} ${result_3})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \t".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (function(){return currentLineOffset(offset);})();
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (function(){
          // console.error("layout.ws", "layout", JSON.parse(`${result_1}`), "line", JSON.parse(`${result_2}`), `start of input is <<${input.substr(offset, 15)}>>`);
          if (JSON.parse(`${result_2}`) > JSON.parse(`${result_1}`)) {
            // console.error(`layout.ws successful for layout offset ${JSON.parse(`${result_1}`)}`);
            return "unit";
          } else {
            return null;
          }
        })();
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_3 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_3 = ((offset < input.length && " \t".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_3 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_4 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \t".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_4 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_3} ${result_4})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_3 = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_3 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_4 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_4 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_3} ${result_4})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \t".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_3 = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_3 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_4 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_4 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_3} ${result_4})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     offset = keepOffset;
     return (result === null ? null : "unit");
  })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_3 = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_3 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_4 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_4 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_3} ${result_4})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \t".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_3 = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (function(){return currentLineOffset(offset);})();
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result_3 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (function(){
          // console.error("layout.ws", "layout", JSON.parse(`${result_1}`), "line", JSON.parse(`${result_3}`), `start of input is <<${input.substr(offset, 15)}>>`);
          if (JSON.parse(`${result_3}`) > JSON.parse(`${result_1}`)) {
            // console.error(`layout.ws successful for layout offset ${JSON.parse(`${result_1}`)}`);
            return "unit";
          } else {
            return null;
          }
        })();
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_3 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_2} ${result_3})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(some ${result_1})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = `none`;
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `${result_0}`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_0 = yield { parser: "(peg.layout.block (fun (x_0: peg.peg unit) => (peg.many (peg.apply (fun (x_1: string) => (fun (x_2: layout_grammar_tests.term) => (tuple x_1 x_2))) (peg.cons x_0 (peg.cons (peg.captured (layout_grammar_tests.token layout_grammar_tests.label)) (peg.cons (layout_grammar_tests.token \"=\") (peg.cons (peg.captured layout_grammar_tests.pterm) peg.nil))))))))", args: {  } };
     if (result_0 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (function(){return previousLayoutOffset(offset);})();
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = ((offset < input.length && " \t".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_3 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \t".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_3 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_2} ${result_3})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_3 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_3 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_2} ${result_3})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \t".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_3 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_3 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_2} ${result_3})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     offset = keepOffset;
     return (result === null ? null : "unit");
  })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_3 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_3 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_2} ${result_3})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \t".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (function(){return currentLineOffset(offset);})();
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (function(){
          // console.error("layout.ws", "layout", JSON.parse(`${result_1}`), "line", JSON.parse(`${result_2}`), `start of input is <<${input.substr(offset, 15)}>>`);
          if (JSON.parse(`${result_2}`) > JSON.parse(`${result_1}`)) {
            // console.error(`layout.ws successful for layout offset ${JSON.parse(`${result_1}`)}`);
            return "unit";
          } else {
            return null;
          }
        })();
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_3 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_3 = ((offset < input.length && " \t".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_3 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_4 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \t".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_4 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_3} ${result_4})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_3 = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_3 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_4 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_4 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_3} ${result_4})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \t".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_3 = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_3 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_4 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_4 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_3} ${result_4})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     offset = keepOffset;
     return (result === null ? null : "unit");
  })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_3 = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_3 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_4 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_4 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_3} ${result_4})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \t".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_3 = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (function(){return currentLineOffset(offset);})();
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result_3 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (function(){
          // console.error("layout.ws", "layout", JSON.parse(`${result_1}`), "line", JSON.parse(`${result_3}`), `start of input is <<${input.substr(offset, 15)}>>`);
          if (JSON.parse(`${result_3}`) > JSON.parse(`${result_1}`)) {
            // console.error(`layout.ws successful for layout offset ${JSON.parse(`${result_1}`)}`);
            return "unit";
          } else {
            return null;
          }
        })();
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_3 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_2} ${result_3})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(some ${result_1})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = `none`;
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = (input.startsWith("'in", offset)
    ? (offset += "'in".length, JSON.stringify("'in"))
    : null);
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (function(){return previousLayoutOffset(offset);})();
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_3 = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_3 = ((offset < input.length && " \t".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_3 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_4 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \t".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_4 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_3} ${result_4})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_3 = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_3 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_4 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_4 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_3} ${result_4})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \t".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_3 = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_3 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_4 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_4 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_3} ${result_4})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     offset = keepOffset;
     return (result === null ? null : "unit");
  })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_3 = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_3 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_4 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_4 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_3} ${result_4})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \t".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_3 = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (function(){return currentLineOffset(offset);})();
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result_3 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (function(){
          // console.error("layout.ws", "layout", JSON.parse(`${result_2}`), "line", JSON.parse(`${result_3}`), `start of input is <<${input.substr(offset, 15)}>>`);
          if (JSON.parse(`${result_3}`) > JSON.parse(`${result_2}`)) {
            // console.error(`layout.ws successful for layout offset ${JSON.parse(`${result_2}`)}`);
            return "unit";
          } else {
            return null;
          }
        })();
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result_3 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_4 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_4 = ((offset < input.length && " \t".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_4 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_5 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \t".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_5 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_4} ${result_5})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_4 = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_4 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_5 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_5 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_4} ${result_5})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \t".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_4 = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_4 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_5 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_5 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_4} ${result_5})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     offset = keepOffset;
     return (result === null ? null : "unit");
  })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_4 = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_4 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_5 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_5 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_4} ${result_5})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \t".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_4 = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (function(){return currentLineOffset(offset);})();
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result_4 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (function(){
          // console.error("layout.ws", "layout", JSON.parse(`${result_2}`), "line", JSON.parse(`${result_4}`), `start of input is <<${input.substr(offset, 15)}>>`);
          if (JSON.parse(`${result_4}`) > JSON.parse(`${result_2}`)) {
            // console.error(`layout.ws successful for layout offset ${JSON.parse(`${result_2}`)}`);
            return "unit";
          } else {
            return null;
          }
        })();
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_4 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_3} ${result_4})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(some ${result_2})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = `none`;
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `${result_1}`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = yield { parser: "(peg.layout.block (fun (x_0: peg.peg unit) => layout_grammar_tests.pterm))", args: {  } };
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(layout_grammar_tests.letin ${result_0} ${result_1})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_0 = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_0 = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     const result_0 = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (function(){return previousLayoutOffset(offset);})();
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result_0 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = ((offset < input.length && " \t".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \t".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_1} ${result_2})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_1} ${result_2})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \t".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_1} ${result_2})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     offset = keepOffset;
     return (result === null ? null : "unit");
  })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_1} ${result_2})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \t".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (function(){return currentLineOffset(offset);})();
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (function(){
          // console.error("layout.ws", "layout", JSON.parse(`${result_0}`), "line", JSON.parse(`${result_1}`), `start of input is <<${input.substr(offset, 15)}>>`);
          if (JSON.parse(`${result_1}`) > JSON.parse(`${result_0}`)) {
            // console.error(`layout.ws successful for layout offset ${JSON.parse(`${result_0}`)}`);
            return "unit";
          } else {
            return null;
          }
        })();
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = ((offset < input.length && " \t".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_3 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \t".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_3 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_2} ${result_3})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_3 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_3 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_2} ${result_3})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \t".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_3 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_3 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_2} ${result_3})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     offset = keepOffset;
     return (result === null ? null : "unit");
  })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_3 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_3 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_2} ${result_3})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \t".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (function(){return currentLineOffset(offset);})();
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (function(){
          // console.error("layout.ws", "layout", JSON.parse(`${result_0}`), "line", JSON.parse(`${result_2}`), `start of input is <<${input.substr(offset, 15)}>>`);
          if (JSON.parse(`${result_2}`) > JSON.parse(`${result_0}`)) {
            // console.error(`layout.ws successful for layout offset ${JSON.parse(`${result_0}`)}`);
            return "unit";
          } else {
            return null;
          }
        })();
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_1} ${result_2})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result_0 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(some ${result_0})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = `none`;
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_0 = yield { parser: "layout_grammar_tests.label", args: {  } };
     if (result_0 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (function(){return previousLayoutOffset(offset);})();
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = ((offset < input.length && " \t".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_3 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \t".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_3 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_2} ${result_3})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_3 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_3 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_2} ${result_3})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \t".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_3 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_3 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_2} ${result_3})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     offset = keepOffset;
     return (result === null ? null : "unit");
  })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_3 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_3 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_2} ${result_3})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \t".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (function(){return currentLineOffset(offset);})();
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (function(){
          // console.error("layout.ws", "layout", JSON.parse(`${result_1}`), "line", JSON.parse(`${result_2}`), `start of input is <<${input.substr(offset, 15)}>>`);
          if (JSON.parse(`${result_2}`) > JSON.parse(`${result_1}`)) {
            // console.error(`layout.ws successful for layout offset ${JSON.parse(`${result_1}`)}`);
            return "unit";
          } else {
            return null;
          }
        })();
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_3 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_3 = ((offset < input.length && " \t".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_3 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_4 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \t".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_4 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_3} ${result_4})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_3 = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_3 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_4 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_4 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_3} ${result_4})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \t".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_3 = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_3 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_4 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_4 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_3} ${result_4})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     offset = keepOffset;
     return (result === null ? null : "unit");
  })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_3 = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_3 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_4 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && "\r\n".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_4 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_3} ${result_4})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \t".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_3 = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (function(){return currentLineOffset(offset);})();
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result_3 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (function(){
          // console.error("layout.ws", "layout", JSON.parse(`${result_1}`), "line", JSON.parse(`${result_3}`), `start of input is <<${input.substr(offset, 15)}>>`);
          if (JSON.parse(`${result_3}`) > JSON.parse(`${result_1}`)) {
            // console.error(`layout.ws successful for layout offset ${JSON.parse(`${result_1}`)}`);
            return "unit";
          } else {
            return null;
          }
        })();
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_3 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_2} ${result_3})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(some ${result_1})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = `none`;
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `${result_0}`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result_0 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(layout_grammar_tests.const ${result_0})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
        if (result === null) offset = keepOffset;
        if (!(memoEntry in memoize)) memoize[memoEntry] = {};
        memoize[memoEntry][keepOffset] = { result, newOffset: offset };
        history = historyCopy;
        return result;
      }
     }),
   
  };
      const memoize = {};
      let history = [];
      const firstGen = (function*() { return yield { parser: "layout_grammar_tests.pterm", args: {  } }; })();
      const recurseOrResult = [ { gen: firstGen, val: firstGen.next() } ];
      let lastRes;
      while (recurseOrResult.length > 0) {
        const { gen: genTop, val: valTop } = recurseOrResult[recurseOrResult.length-1];
        if (valTop.done) {
          lastRes = valTop.value;
          recurseOrResult.pop();
          if (recurseOrResult.length > 0) {
            const { gen, val } = recurseOrResult[recurseOrResult.length - 1];
            recurseOrResult[recurseOrResult.length - 1] = { gen, val: gen.next(lastRes) };
          }
        } else {
          const nextGen = parsers[valTop.value.parser](valTop.value.args);
          recurseOrResult.push( {gen: nextGen, val: nextGen.next() } );
        }
      }
      if (lastRes === null) {
        return { result: null, newOffset: startOffset };
      } else {
        return { result: lastRes, newOffset: offset };
      }
   })(input, startOffset);
  })(input, offset); })(input, offset);
        if (data.result !== null) offset = data.newOffset;
        if (!(memoEntry in memoize)) memoize[memoEntry] = {};
        memoize[memoEntry][keepOffset] = {
          result: data.result,
          newOffset: data.result === null ? keepOffset : data.newOffset
         };
        history = historyCopy;
        return data.result;
      }
     }),
   "layout_grammar_tests.ptermtop": (function*(args) {
      const {  } = args;
      const memoEntry = `layout_grammar_tests.ptermtop`;
      const historyEntry = `layout_grammar_tests.ptermtop:${offset}`;
      const keepOffset = offset;
      if (history.includes(historyEntry)) {
        throw new Error(`left recursion found: adding ${historyEntry} to ${history}`);
      }
      if (memoEntry in memoize && memoize[memoEntry][keepOffset] !== undefined) {
        const { result, newOffset } = memoize[memoEntry][keepOffset];
        offset = newOffset;
        return result;
      } else {
        let historyCopy = history.slice();
        history.push(historyEntry);
        const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = yield { parser: "(peg.layout.enter layout_grammar_tests.pterm)", args: {  } };
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
        if (result === null) offset = keepOffset;
        if (!(memoEntry in memoize)) memoize[memoEntry] = {};
        memoize[memoEntry][keepOffset] = { result, newOffset: offset };
        history = historyCopy;
        return result;
      }
     }),
   
  };
      const memoize = {};
      let history = [];
      const firstGen = (function*() { return yield { parser: "layout_grammar_tests.ptermtop", args: {  } }; })();
      const recurseOrResult = [ { gen: firstGen, val: firstGen.next() } ];
      let lastRes;
      while (recurseOrResult.length > 0) {
        const { gen: genTop, val: valTop } = recurseOrResult[recurseOrResult.length-1];
        if (valTop.done) {
          lastRes = valTop.value;
          recurseOrResult.pop();
          if (recurseOrResult.length > 0) {
            const { gen, val } = recurseOrResult[recurseOrResult.length - 1];
            recurseOrResult[recurseOrResult.length - 1] = { gen, val: gen.next(lastRes) };
          }
        } else {
          const nextGen = parsers[valTop.value.parser](valTop.value.args);
          recurseOrResult.push( {gen: nextGen, val: nextGen.next() } );
        }
      }
      if (lastRes === null) {
        return { result: null, newOffset: startOffset };
      } else {
        return { result: lastRes, newOffset: offset };
      }
   })