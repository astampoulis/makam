(function (input, startOffset) {
      let offset = startOffset;
      const parsers = {
    "(peg.peg_grammar.symbol (peg.exact \":\"))": (function*(args) {
      const {  } = args;
      const memoEntry = `(peg.peg_grammar.symbol (peg.exact ":"))`;
      const historyEntry = `(peg.peg_grammar.symbol (peg.exact ":")):${offset}`;
      const keepOffset = offset;
      if (history.includes(historyEntry)) {
        throw new Error(`left recursion found: adding ${historyEntry} to ${history}`);
      }
      if (memoEntry in memoize && memoize[memoEntry][keepOffset] !== undefined) {
        const { result, newOffset } = memoize[memoEntry][keepOffset];
        offset = newOffset;
        return result;
      } else {
        let historyCopy = history.slice();
        history.push(historyEntry);
        const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (input.startsWith(":", offset)
    ? (offset += ":".length, JSON.stringify(":"))
    : null);
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
        if (result === null) offset = keepOffset;
        if (!(memoEntry in memoize)) memoize[memoEntry] = {};
        memoize[memoEntry][keepOffset] = { result, newOffset: offset };
        history = historyCopy;
        return result;
      }
     }),
   "(peg.peg_grammar.symbol peg.peg_grammar.ident)": (function*(args) {
      const {  } = args;
      const memoEntry = `(peg.peg_grammar.symbol peg.peg_grammar.ident)`;
      const historyEntry = `(peg.peg_grammar.symbol peg.peg_grammar.ident):${offset}`;
      const keepOffset = offset;
      if (history.includes(historyEntry)) {
        throw new Error(`left recursion found: adding ${historyEntry} to ${history}`);
      }
      if (memoEntry in memoize && memoize[memoEntry][keepOffset] !== undefined) {
        const { result, newOffset } = memoize[memoEntry][keepOffset];
        offset = newOffset;
        return result;
      } else {
        let historyCopy = history.slice();
        history.push(historyEntry);
        const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = yield { parser: "peg.peg_grammar.ident", args: {  } };
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
        if (result === null) offset = keepOffset;
        if (!(memoEntry in memoize)) memoize[memoEntry] = {};
        memoize[memoEntry][keepOffset] = { result, newOffset: offset };
        history = historyCopy;
        return result;
      }
     }),
   "(peg.peg_grammar.symbol (peg.exact \"\\\"\"))": (function*(args) {
      const {  } = args;
      const memoEntry = `(peg.peg_grammar.symbol (peg.exact "\""))`;
      const historyEntry = `(peg.peg_grammar.symbol (peg.exact "\"")):${offset}`;
      const keepOffset = offset;
      if (history.includes(historyEntry)) {
        throw new Error(`left recursion found: adding ${historyEntry} to ${history}`);
      }
      if (memoEntry in memoize && memoize[memoEntry][keepOffset] !== undefined) {
        const { result, newOffset } = memoize[memoEntry][keepOffset];
        offset = newOffset;
        return result;
      } else {
        let historyCopy = history.slice();
        history.push(historyEntry);
        const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (input.startsWith("\"", offset)
    ? (offset += "\"".length, JSON.stringify("\""))
    : null);
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
        if (result === null) offset = keepOffset;
        if (!(memoEntry in memoize)) memoize[memoEntry] = {};
        memoize[memoEntry][keepOffset] = { result, newOffset: offset };
        history = historyCopy;
        return result;
      }
     }),
   "(peg.peg_grammar.symbol (peg.exact \".\"))": (function*(args) {
      const {  } = args;
      const memoEntry = `(peg.peg_grammar.symbol (peg.exact "."))`;
      const historyEntry = `(peg.peg_grammar.symbol (peg.exact ".")):${offset}`;
      const keepOffset = offset;
      if (history.includes(historyEntry)) {
        throw new Error(`left recursion found: adding ${historyEntry} to ${history}`);
      }
      if (memoEntry in memoize && memoize[memoEntry][keepOffset] !== undefined) {
        const { result, newOffset } = memoize[memoEntry][keepOffset];
        offset = newOffset;
        return result;
      } else {
        let historyCopy = history.slice();
        history.push(historyEntry);
        const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (input.startsWith(".", offset)
    ? (offset += ".".length, JSON.stringify("."))
    : null);
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
        if (result === null) offset = keepOffset;
        if (!(memoEntry in memoize)) memoize[memoEntry] = {};
        memoize[memoEntry][keepOffset] = { result, newOffset: offset };
        history = historyCopy;
        return result;
      }
     }),
   "peg.peg_grammar.ppegbase": (function*(args) {
      const {  } = args;
      const memoEntry = `peg.peg_grammar.ppegbase`;
      const historyEntry = `peg.peg_grammar.ppegbase:${offset}`;
      const keepOffset = offset;
      if (history.includes(historyEntry)) {
        throw new Error(`left recursion found: adding ${historyEntry} to ${history}`);
      }
      if (memoEntry in memoize && memoize[memoEntry][keepOffset] !== undefined) {
        const { result, newOffset } = memoize[memoEntry][keepOffset];
        offset = newOffset;
        return result;
      } else {
        let historyCopy = history.slice();
        history.push(historyEntry);
        const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = yield { parser: "(peg.peg_grammar.symbol (peg.exact \".\"))", args: {  } };
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `peg.anychar`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = yield { parser: "(peg.peg_grammar.symbol (peg.exact \"\\\"\"))", args: {  } };
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_0 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (input.startsWith("\"", offset)
    ? (offset += "\"".length, JSON.stringify("\""))
    : null);
     offset = keepOffset;
     return (result === null ? "unit" : null);
  })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (offset < input.length
     ? (JSON.stringify(input[offset++]))
     : null);
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_0 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (input.startsWith("\"", offset)
    ? (offset += "\"".length, JSON.stringify("\""))
    : null);
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(peg.exact (peg.peg_grammar.concat ${result_0}))`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
        if (result === null) offset = keepOffset;
        if (!(memoEntry in memoize)) memoize[memoEntry] = {};
        memoize[memoEntry][keepOffset] = { result, newOffset: offset };
        history = historyCopy;
        return result;
      }
     }),
   "(peg.peg_grammar.symbol (peg.exact \"}\"))": (function*(args) {
      const {  } = args;
      const memoEntry = `(peg.peg_grammar.symbol (peg.exact "}"))`;
      const historyEntry = `(peg.peg_grammar.symbol (peg.exact "}")):${offset}`;
      const keepOffset = offset;
      if (history.includes(historyEntry)) {
        throw new Error(`left recursion found: adding ${historyEntry} to ${history}`);
      }
      if (memoEntry in memoize && memoize[memoEntry][keepOffset] !== undefined) {
        const { result, newOffset } = memoize[memoEntry][keepOffset];
        offset = newOffset;
        return result;
      } else {
        let historyCopy = history.slice();
        history.push(historyEntry);
        const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (input.startsWith("}", offset)
    ? (offset += "}".length, JSON.stringify("}"))
    : null);
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
        if (result === null) offset = keepOffset;
        if (!(memoEntry in memoize)) memoize[memoEntry] = {};
        memoize[memoEntry][keepOffset] = { result, newOffset: offset };
        history = historyCopy;
        return result;
      }
     }),
   "peg.peg_grammar.identrest": (function*(args) {
      const {  } = args;
      const memoEntry = `peg.peg_grammar.identrest`;
      const historyEntry = `peg.peg_grammar.identrest:${offset}`;
      const keepOffset = offset;
      if (history.includes(historyEntry)) {
        throw new Error(`left recursion found: adding ${historyEntry} to ${history}`);
      }
      if (memoEntry in memoize && memoize[memoEntry][keepOffset] !== undefined) {
        const { result, newOffset } = memoize[memoEntry][keepOffset];
        offset = newOffset;
        return result;
      } else {
        let historyCopy = history.slice();
        history.push(historyEntry);
        const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = ((offset < input.length && "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZαβγδεζηθικλμνξοπρστυφχψωΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩάέήίύόώ_1234567890'".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
        if (result === null) offset = keepOffset;
        if (!(memoEntry in memoize)) memoize[memoEntry] = {};
        memoize[memoEntry][keepOffset] = { result, newOffset: offset };
        history = historyCopy;
        return result;
      }
     }),
   "peg.peg_grammar.identfirst": (function*(args) {
      const {  } = args;
      const memoEntry = `peg.peg_grammar.identfirst`;
      const historyEntry = `peg.peg_grammar.identfirst:${offset}`;
      const keepOffset = offset;
      if (history.includes(historyEntry)) {
        throw new Error(`left recursion found: adding ${historyEntry} to ${history}`);
      }
      if (memoEntry in memoize && memoize[memoEntry][keepOffset] !== undefined) {
        const { result, newOffset } = memoize[memoEntry][keepOffset];
        offset = newOffset;
        return result;
      } else {
        let historyCopy = history.slice();
        history.push(historyEntry);
        const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = ((offset < input.length && "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZαβγδεζηθικμνξοπρστυφχψωΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩάέήίύόώ_".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
        if (result === null) offset = keepOffset;
        if (!(memoEntry in memoize)) memoize[memoEntry] = {};
        memoize[memoEntry][keepOffset] = { result, newOffset: offset };
        history = historyCopy;
        return result;
      }
     }),
   "peg.peg_grammar.ident": (function*(args) {
      const {  } = args;
      const memoEntry = `peg.peg_grammar.ident`;
      const historyEntry = `peg.peg_grammar.ident:${offset}`;
      const keepOffset = offset;
      if (history.includes(historyEntry)) {
        throw new Error(`left recursion found: adding ${historyEntry} to ${history}`);
      }
      if (memoEntry in memoize && memoize[memoEntry][keepOffset] !== undefined) {
        const { result, newOffset } = memoize[memoEntry][keepOffset];
        offset = newOffset;
        return result;
      } else {
        let historyCopy = history.slice();
        history.push(historyEntry);
        const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_0 = yield { parser: "peg.peg_grammar.identfirst", args: {  } };
     if (result_0 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = yield { parser: "peg.peg_grammar.identrest", args: {  } };
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(peg.peg_grammar.concat (cons ${result_0} ${result_1}))`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
        if (result === null) offset = keepOffset;
        if (!(memoEntry in memoize)) memoize[memoEntry] = {};
        memoize[memoEntry][keepOffset] = { result, newOffset: offset };
        history = historyCopy;
        return result;
      }
     }),
   "(peg.peg_grammar.token peg.peg_grammar.ident)": (function*(args) {
      const {  } = args;
      const memoEntry = `(peg.peg_grammar.token peg.peg_grammar.ident)`;
      const historyEntry = `(peg.peg_grammar.token peg.peg_grammar.ident):${offset}`;
      const keepOffset = offset;
      if (history.includes(historyEntry)) {
        throw new Error(`left recursion found: adding ${historyEntry} to ${history}`);
      }
      if (memoEntry in memoize && memoize[memoEntry][keepOffset] !== undefined) {
        const { result, newOffset } = memoize[memoEntry][keepOffset];
        offset = newOffset;
        return result;
      } else {
        let historyCopy = history.slice();
        history.push(historyEntry);
        const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_0 = yield { parser: "peg.peg_grammar.ident", args: {  } };
     if (result_0 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_1} ${result_2})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `${result_0}`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
        if (result === null) offset = keepOffset;
        if (!(memoEntry in memoize)) memoize[memoEntry] = {};
        memoize[memoEntry][keepOffset] = { result, newOffset: offset };
        history = historyCopy;
        return result;
      }
     }),
   "peg.peg_grammar.ppegaction": (function*(args) {
      const {  } = args;
      const memoEntry = `peg.peg_grammar.ppegaction`;
      const historyEntry = `peg.peg_grammar.ppegaction:${offset}`;
      const keepOffset = offset;
      if (history.includes(historyEntry)) {
        throw new Error(`left recursion found: adding ${historyEntry} to ${history}`);
      }
      if (memoEntry in memoize && memoize[memoEntry][keepOffset] !== undefined) {
        const { result, newOffset } = memoize[memoEntry][keepOffset];
        offset = newOffset;
        return result;
      } else {
        let historyCopy = history.slice();
        history.push(historyEntry);
        const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_0 = yield { parser: "(peg.peg_grammar.token peg.peg_grammar.ident)", args: {  } };
     if (result_0 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(fun (x_0: peg.peg string) => (newmeta (fun (x_1: string) => (and (peg.peg_grammar.get_res ${result_0} x_1) (eq x_0 (peg.action x_1))))))`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
        if (result === null) offset = keepOffset;
        if (!(memoEntry in memoize)) memoize[memoEntry] = {};
        memoize[memoEntry][keepOffset] = { result, newOffset: offset };
        history = historyCopy;
        return result;
      }
     }),
   "(peg.peg_grammar.symbol (peg.exact \"{\"))": (function*(args) {
      const {  } = args;
      const memoEntry = `(peg.peg_grammar.symbol (peg.exact "{"))`;
      const historyEntry = `(peg.peg_grammar.symbol (peg.exact "{")):${offset}`;
      const keepOffset = offset;
      if (history.includes(historyEntry)) {
        throw new Error(`left recursion found: adding ${historyEntry} to ${history}`);
      }
      if (memoEntry in memoize && memoize[memoEntry][keepOffset] !== undefined) {
        const { result, newOffset } = memoize[memoEntry][keepOffset];
        offset = newOffset;
        return result;
      } else {
        let historyCopy = history.slice();
        history.push(historyEntry);
        const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (input.startsWith("{", offset)
    ? (offset += "{".length, JSON.stringify("{"))
    : null);
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
        if (result === null) offset = keepOffset;
        if (!(memoEntry in memoize)) memoize[memoEntry] = {};
        memoize[memoEntry][keepOffset] = { result, newOffset: offset };
        history = historyCopy;
        return result;
      }
     }),
   "peg.peg_grammar.ppegrule": (function*(args) {
      const {  } = args;
      const memoEntry = `peg.peg_grammar.ppegrule`;
      const historyEntry = `peg.peg_grammar.ppegrule:${offset}`;
      const keepOffset = offset;
      if (history.includes(historyEntry)) {
        throw new Error(`left recursion found: adding ${historyEntry} to ${history}`);
      }
      if (memoEntry in memoize && memoize[memoEntry][keepOffset] !== undefined) {
        const { result, newOffset } = memoize[memoEntry][keepOffset];
        offset = newOffset;
        return result;
      } else {
        let historyCopy = history.slice();
        history.push(historyEntry);
        const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = yield { parser: "(peg.peg_grammar.symbol (peg.exact \"{\"))", args: {  } };
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_0 = yield { parser: "peg.peg_grammar.ppegaction", args: {  } };
     if (result_0 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = yield { parser: "(peg.peg_grammar.symbol (peg.exact \"}\"))", args: {  } };
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `${result_0}`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_0 = yield { parser: "peg.peg_grammar.ppegbase", args: {  } };
     if (result_0 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_1} ${result_2})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = yield { parser: "peg.peg_grammar.ppegrule", args: {  } };
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(fun (x_0: peg.peg string) => (newmeta (fun (x_1: peg.peg string) => (and (${result_1} x_1) (eq x_0 (peg.seq ${result_0} x_1))))))`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_0 = yield { parser: "(peg.peg_grammar.symbol peg.peg_grammar.ident)", args: {  } };
     if (result_0 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = yield { parser: "(peg.peg_grammar.symbol (peg.exact \":\"))", args: {  } };
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = yield { parser: "peg.peg_grammar.ppegbase", args: {  } };
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_3 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_3 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_2} ${result_3})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = yield { parser: "peg.peg_grammar.ppegrule", args: {  } };
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(fun (x_0: peg.peg string) => (newmeta (fun x_1 => (and (newvar (fun x_2 => (assume (clause (peg.peg_grammar.get_res ${result_0} x_2) success) (${result_2} (x_1 x_2))))) (eq x_0 (peg.bind ${result_1} x_1))))))`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
        if (result === null) offset = keepOffset;
        if (!(memoEntry in memoize)) memoize[memoEntry] = {};
        memoize[memoEntry][keepOffset] = { result, newOffset: offset };
        history = historyCopy;
        return result;
      }
     }),
   "(peg.peg_grammar.symbol (peg.exact \"/\"))": (function*(args) {
      const {  } = args;
      const memoEntry = `(peg.peg_grammar.symbol (peg.exact "/"))`;
      const historyEntry = `(peg.peg_grammar.symbol (peg.exact "/")):${offset}`;
      const keepOffset = offset;
      if (history.includes(historyEntry)) {
        throw new Error(`left recursion found: adding ${historyEntry} to ${history}`);
      }
      if (memoEntry in memoize && memoize[memoEntry][keepOffset] !== undefined) {
        const { result, newOffset } = memoize[memoEntry][keepOffset];
        offset = newOffset;
        return result;
      } else {
        let historyCopy = history.slice();
        history.push(historyEntry);
        const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (input.startsWith("/", offset)
    ? (offset += "/".length, JSON.stringify("/"))
    : null);
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
        if (result === null) offset = keepOffset;
        if (!(memoEntry in memoize)) memoize[memoEntry] = {};
        memoize[memoEntry][keepOffset] = { result, newOffset: offset };
        history = historyCopy;
        return result;
      }
     }),
   "peg.peg_grammar.ppeg": (function*(args) {
      const {  } = args;
      const memoEntry = `peg.peg_grammar.ppeg`;
      const historyEntry = `peg.peg_grammar.ppeg:${offset}`;
      const keepOffset = offset;
      if (history.includes(historyEntry)) {
        throw new Error(`left recursion found: adding ${historyEntry} to ${history}`);
      }
      if (memoEntry in memoize && memoize[memoEntry][keepOffset] !== undefined) {
        const { result, newOffset } = memoize[memoEntry][keepOffset];
        offset = newOffset;
        return result;
      } else {
        let historyCopy = history.slice();
        history.push(historyEntry);
        const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_0 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = (yield* (function*() {
     const keepOffset = offset;
     const result = yield { parser: "(peg.peg_grammar.symbol (peg.exact \"/\"))", args: {  } };
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = yield { parser: "peg.peg_grammar.ppegrule", args: {  } };
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_0 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(fun (x_0: peg.peg string) => (newmeta (fun (x_1: list (peg.peg string)) => (and (map (fun (x_2: peg.peg string -> prop) => x_2) ${result_0} x_1) (peg.peg_grammar.convert (peg.choices x_1) x_0)))))`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
        if (result === null) offset = keepOffset;
        if (!(memoEntry in memoize)) memoize[memoEntry] = {};
        memoize[memoEntry][keepOffset] = { result, newOffset: offset };
        history = historyCopy;
        return result;
      }
     }),
   
  };
      const memoize = {};
      let history = [];
      const firstGen = (function*() { return yield { parser: "peg.peg_grammar.ppeg", args: {  } }; })();
      const recurseOrResult = [ { gen: firstGen, val: firstGen.next() } ];
      let lastRes;
      while (recurseOrResult.length > 0) {
        const { gen: genTop, val: valTop } = recurseOrResult[recurseOrResult.length-1];
        if (valTop.done) {
          lastRes = valTop.value;
          recurseOrResult.pop();
          if (recurseOrResult.length > 0) {
            const { gen, val } = recurseOrResult[recurseOrResult.length - 1];
            recurseOrResult[recurseOrResult.length - 1] = { gen, val: gen.next(lastRes) };
          }
        } else {
          const nextGen = parsers[valTop.value.parser](valTop.value.args);
          recurseOrResult.push( {gen: nextGen, val: nextGen.next() } );
        }
      }
      if (lastRes === null) {
        return { result: null, newOffset: startOffset };
      } else {
        return { result: lastRes, newOffset: offset };
      }
   })