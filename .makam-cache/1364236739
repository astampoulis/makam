(function (input, startOffset) {
      let offset = startOffset;
      const parsers = {
    "(peg.syntax (syntax.choices (cons (syntax.group (syntax.cons (syntax.exact \" \") (syntax.cons (syntax.captured (syntax.term 2)) syntax.nil))) nil)))": (function*(args) {
      const {  } = args;
      const memoEntry = `(peg.syntax (syntax.choices (cons (syntax.group (syntax.cons (syntax.exact " ") (syntax.cons (syntax.captured (syntax.term 2)) syntax.nil))) nil)))`;
      const historyEntry = `(peg.syntax (syntax.choices (cons (syntax.group (syntax.cons (syntax.exact " ") (syntax.cons (syntax.captured (syntax.term 2)) syntax.nil))) nil))):${offset}`;
      const keepOffset = offset;
      if (history.includes(historyEntry)) {
        throw new Error(`left recursion found: adding ${historyEntry} to ${history}`);
      }
      if (memoEntry in memoize && memoize[memoEntry][keepOffset] !== undefined) {
        const { result, newOffset } = memoize[memoEntry][keepOffset];
        offset = newOffset;
        return result;
      } else {
        let historyCopy = history.slice();
        history.push(historyEntry);
        const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (input.startsWith(" ", offset)
    ? (offset += " ".length, JSON.stringify(" "))
    : null);
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = yield { parser: "(peg.syntax (syntax.choices (cons (syntax.apply (fun (x_0: string) => (syntax.var x_0)) (syntax.cons (syntax.captured syntax.ident) syntax.nil)) (cons (syntax.group (syntax.cons (syntax.exact \"(\") (syntax.cons (syntax.captured (syntax.term 0)) (syntax.cons (syntax.exact \")\") syntax.nil)))) nil))))", args: {  } };
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `${result_1}`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
        if (result === null) offset = keepOffset;
        if (!(memoEntry in memoize)) memoize[memoEntry] = {};
        memoize[memoEntry][keepOffset] = { result, newOffset: offset };
        history = historyCopy;
        return result;
      }
     }),
   "(peg.syntax (syntax.choices (cons (syntax.apply (fun (x_0: string) => (syntax.var x_0)) (syntax.cons (syntax.captured syntax.ident) syntax.nil)) (cons (syntax.group (syntax.cons (syntax.exact \"(\") (syntax.cons (syntax.captured (syntax.term 0)) (syntax.cons (syntax.exact \")\") syntax.nil)))) nil))))": (function*(args) {
      const {  } = args;
      const memoEntry = `(peg.syntax (syntax.choices (cons (syntax.apply (fun (x_0: string) => (syntax.var x_0)) (syntax.cons (syntax.captured syntax.ident) syntax.nil)) (cons (syntax.group (syntax.cons (syntax.exact "(") (syntax.cons (syntax.captured (syntax.term 0)) (syntax.cons (syntax.exact ")") syntax.nil)))) nil))))`;
      const historyEntry = `(peg.syntax (syntax.choices (cons (syntax.apply (fun (x_0: string) => (syntax.var x_0)) (syntax.cons (syntax.captured syntax.ident) syntax.nil)) (cons (syntax.group (syntax.cons (syntax.exact "(") (syntax.cons (syntax.captured (syntax.term 0)) (syntax.cons (syntax.exact ")") syntax.nil)))) nil)))):${offset}`;
      const keepOffset = offset;
      if (history.includes(historyEntry)) {
        throw new Error(`left recursion found: adding ${historyEntry} to ${history}`);
      }
      if (memoEntry in memoize && memoize[memoEntry][keepOffset] !== undefined) {
        const { result, newOffset } = memoize[memoEntry][keepOffset];
        offset = newOffset;
        return result;
      } else {
        let historyCopy = history.slice();
        history.push(historyEntry);
        const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_0 = yield { parser: "(peg.syntax (syntax.choices (cons (syntax.charclass \"abcdefghijklmnopqrstuvwxyz\") nil)))", args: {  } };
     if (result_0 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(syntax.var ${result_0})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (input.startsWith("(", offset)
    ? (offset += "(".length, JSON.stringify("("))
    : null);
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_0 = yield { parser: "(peg.syntax (syntax.choices (cons (syntax.apply (fun (x_0: string) => (fun (x_1: syntax.term) => (syntax.lam x_0 x_1))) (syntax.cons (syntax.exact \"Î»\") (syntax.cons (syntax.captured syntax.ident) (syntax.cons (syntax.exact \".\") (syntax.cons (syntax.captured (syntax.term 0)) syntax.nil))))) (cons (syntax.term 1) nil))))", args: {  } };
     if (result_0 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (input.startsWith(")", offset)
    ? (offset += ")".length, JSON.stringify(")"))
    : null);
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `${result_0}`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
        if (result === null) offset = keepOffset;
        if (!(memoEntry in memoize)) memoize[memoEntry] = {};
        memoize[memoEntry][keepOffset] = { result, newOffset: offset };
        history = historyCopy;
        return result;
      }
     }),
   "(peg.syntax (syntax.choices (cons (syntax.apply (fun (x_0: syntax.term) => (fun (x_1: list syntax.term) => (syntax.app x_0 x_1))) (syntax.cons (syntax.captured (syntax.term 2)) (syntax.cons (syntax.captured (syntax.many syntax.app_arg)) syntax.nil))) (cons (syntax.term 2) nil))))": (function*(args) {
      const {  } = args;
      const memoEntry = `(peg.syntax (syntax.choices (cons (syntax.apply (fun (x_0: syntax.term) => (fun (x_1: list syntax.term) => (syntax.app x_0 x_1))) (syntax.cons (syntax.captured (syntax.term 2)) (syntax.cons (syntax.captured (syntax.many syntax.app_arg)) syntax.nil))) (cons (syntax.term 2) nil))))`;
      const historyEntry = `(peg.syntax (syntax.choices (cons (syntax.apply (fun (x_0: syntax.term) => (fun (x_1: list syntax.term) => (syntax.app x_0 x_1))) (syntax.cons (syntax.captured (syntax.term 2)) (syntax.cons (syntax.captured (syntax.many syntax.app_arg)) syntax.nil))) (cons (syntax.term 2) nil)))):${offset}`;
      const keepOffset = offset;
      if (history.includes(historyEntry)) {
        throw new Error(`left recursion found: adding ${historyEntry} to ${history}`);
      }
      if (memoEntry in memoize && memoize[memoEntry][keepOffset] !== undefined) {
        const { result, newOffset } = memoize[memoEntry][keepOffset];
        offset = newOffset;
        return result;
      } else {
        let historyCopy = history.slice();
        history.push(historyEntry);
        const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_0 = yield { parser: "(peg.syntax (syntax.choices (cons (syntax.apply (fun (x_0: string) => (syntax.var x_0)) (syntax.cons (syntax.captured syntax.ident) syntax.nil)) (cons (syntax.group (syntax.cons (syntax.exact \"(\") (syntax.cons (syntax.captured (syntax.term 0)) (syntax.cons (syntax.exact \")\") syntax.nil)))) nil))))", args: {  } };
     if (result_0 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = yield { parser: "(peg.syntax (syntax.choices (cons (syntax.group (syntax.cons (syntax.exact \" \") (syntax.cons (syntax.captured (syntax.term 2)) syntax.nil))) nil)))", args: {  } };
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(syntax.app ${result_0} ${result_1})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = yield { parser: "(peg.syntax (syntax.choices (cons (syntax.apply (fun (x_0: string) => (syntax.var x_0)) (syntax.cons (syntax.captured syntax.ident) syntax.nil)) (cons (syntax.group (syntax.cons (syntax.exact \"(\") (syntax.cons (syntax.captured (syntax.term 0)) (syntax.cons (syntax.exact \")\") syntax.nil)))) nil))))", args: {  } };
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
        if (result === null) offset = keepOffset;
        if (!(memoEntry in memoize)) memoize[memoEntry] = {};
        memoize[memoEntry][keepOffset] = { result, newOffset: offset };
        history = historyCopy;
        return result;
      }
     }),
   "(peg.syntax (syntax.choices (cons (syntax.charclass \"abcdefghijklmnopqrstuvwxyz\") nil)))": (function*(args) {
      const {  } = args;
      const memoEntry = `(peg.syntax (syntax.choices (cons (syntax.charclass "abcdefghijklmnopqrstuvwxyz") nil)))`;
      const historyEntry = `(peg.syntax (syntax.choices (cons (syntax.charclass "abcdefghijklmnopqrstuvwxyz") nil))):${offset}`;
      const keepOffset = offset;
      if (history.includes(historyEntry)) {
        throw new Error(`left recursion found: adding ${historyEntry} to ${history}`);
      }
      if (memoEntry in memoize && memoize[memoEntry][keepOffset] !== undefined) {
        const { result, newOffset } = memoize[memoEntry][keepOffset];
        offset = newOffset;
        return result;
      } else {
        let historyCopy = history.slice();
        history.push(historyEntry);
        const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = ((offset < input.length && "abcdefghijklmnopqrstuvwxyz".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
        if (result === null) offset = keepOffset;
        if (!(memoEntry in memoize)) memoize[memoEntry] = {};
        memoize[memoEntry][keepOffset] = { result, newOffset: offset };
        history = historyCopy;
        return result;
      }
     }),
   "(peg.syntax (syntax.choices (cons (syntax.apply (fun (x_0: string) => (fun (x_1: syntax.term) => (syntax.lam x_0 x_1))) (syntax.cons (syntax.exact \"Î»\") (syntax.cons (syntax.captured syntax.ident) (syntax.cons (syntax.exact \".\") (syntax.cons (syntax.captured (syntax.term 0)) syntax.nil))))) (cons (syntax.term 1) nil))))": (function*(args) {
      const {  } = args;
      const memoEntry = `(peg.syntax (syntax.choices (cons (syntax.apply (fun (x_0: string) => (fun (x_1: syntax.term) => (syntax.lam x_0 x_1))) (syntax.cons (syntax.exact "Î»") (syntax.cons (syntax.captured syntax.ident) (syntax.cons (syntax.exact ".") (syntax.cons (syntax.captured (syntax.term 0)) syntax.nil))))) (cons (syntax.term 1) nil))))`;
      const historyEntry = `(peg.syntax (syntax.choices (cons (syntax.apply (fun (x_0: string) => (fun (x_1: syntax.term) => (syntax.lam x_0 x_1))) (syntax.cons (syntax.exact "Î»") (syntax.cons (syntax.captured syntax.ident) (syntax.cons (syntax.exact ".") (syntax.cons (syntax.captured (syntax.term 0)) syntax.nil))))) (cons (syntax.term 1) nil)))):${offset}`;
      const keepOffset = offset;
      if (history.includes(historyEntry)) {
        throw new Error(`left recursion found: adding ${historyEntry} to ${history}`);
      }
      if (memoEntry in memoize && memoize[memoEntry][keepOffset] !== undefined) {
        const { result, newOffset } = memoize[memoEntry][keepOffset];
        offset = newOffset;
        return result;
      } else {
        let historyCopy = history.slice();
        history.push(historyEntry);
        const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (input.startsWith("Î»", offset)
    ? (offset += "Î»".length, JSON.stringify("Î»"))
    : null);
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_0 = yield { parser: "(peg.syntax (syntax.choices (cons (syntax.charclass \"abcdefghijklmnopqrstuvwxyz\") nil)))", args: {  } };
     if (result_0 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (input.startsWith(".", offset)
    ? (offset += ".".length, JSON.stringify("."))
    : null);
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = yield { parser: "(peg.syntax (syntax.choices (cons (syntax.apply (fun (x_0: string) => (fun (x_1: syntax.term) => (syntax.lam x_0 x_1))) (syntax.cons (syntax.exact \"Î»\") (syntax.cons (syntax.captured syntax.ident) (syntax.cons (syntax.exact \".\") (syntax.cons (syntax.captured (syntax.term 0)) syntax.nil))))) (cons (syntax.term 1) nil))))", args: {  } };
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(syntax.lam ${result_0} ${result_1})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = yield { parser: "(peg.syntax (syntax.choices (cons (syntax.apply (fun (x_0: syntax.term) => (fun (x_1: list syntax.term) => (syntax.app x_0 x_1))) (syntax.cons (syntax.captured (syntax.term 2)) (syntax.cons (syntax.captured (syntax.many syntax.app_arg)) syntax.nil))) (cons (syntax.term 2) nil))))", args: {  } };
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
        if (result === null) offset = keepOffset;
        if (!(memoEntry in memoize)) memoize[memoEntry] = {};
        memoize[memoEntry][keepOffset] = { result, newOffset: offset };
        history = historyCopy;
        return result;
      }
     }),
   "(peg.syntax (syntax.term 0))": (function*(args) {
      const {  } = args;
      const memoEntry = `(peg.syntax (syntax.term 0))`;
      const historyEntry = `(peg.syntax (syntax.term 0)):${offset}`;
      const keepOffset = offset;
      if (history.includes(historyEntry)) {
        throw new Error(`left recursion found: adding ${historyEntry} to ${history}`);
      }
      if (memoEntry in memoize && memoize[memoEntry][keepOffset] !== undefined) {
        const { result, newOffset } = memoize[memoEntry][keepOffset];
        offset = newOffset;
        return result;
      } else {
        let historyCopy = history.slice();
        history.push(historyEntry);
        const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = yield { parser: "(peg.syntax (syntax.choices (cons (syntax.apply (fun (x_0: string) => (fun (x_1: syntax.term) => (syntax.lam x_0 x_1))) (syntax.cons (syntax.exact \"Î»\") (syntax.cons (syntax.captured syntax.ident) (syntax.cons (syntax.exact \".\") (syntax.cons (syntax.captured (syntax.term 0)) syntax.nil))))) (cons (syntax.term 1) nil))))", args: {  } };
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
        if (result === null) offset = keepOffset;
        if (!(memoEntry in memoize)) memoize[memoEntry] = {};
        memoize[memoEntry][keepOffset] = { result, newOffset: offset };
        history = historyCopy;
        return result;
      }
     }),
   
  };
      const memoize = {};
      let history = [];
      const firstGen = (function*() { return yield { parser: "(peg.syntax (syntax.term 0))", args: {  } }; })();
      const recurseOrResult = [ { gen: firstGen, val: firstGen.next() } ];
      let lastRes;
      while (recurseOrResult.length > 0) {
        const { gen: genTop, val: valTop } = recurseOrResult[recurseOrResult.length-1];
        if (valTop.done) {
          lastRes = valTop.value;
          recurseOrResult.pop();
          if (recurseOrResult.length > 0) {
            const { gen, val } = recurseOrResult[recurseOrResult.length - 1];
            recurseOrResult[recurseOrResult.length - 1] = { gen, val: gen.next(lastRes) };
          }
        } else {
          const nextGen = parsers[valTop.value.parser](valTop.value.args);
          recurseOrResult.push( {gen: nextGen, val: nextGen.next() } );
        }
      }
      if (lastRes === null) {
        return { result: null, newOffset: startOffset };
      } else {
        return { result: lastRes, newOffset: offset };
      }
   })