(* The core of Makam is not tested at this point.
   This should eventually be the entrypoint for testing the
   internals of Makam, as opposed to builtins and the standard library. *)

makam_core : testsuite.

(* For the time being, we are only testing that the free-form quotes with
   matching enclosing brackets work as expected. These are very lenient
   for now, but once we find a convention that works well I will make them less so. *)

testcase makam_core :- eq { hello } " hello ".
testcase makam_core :- eq {hello} "hello".
testcase makam_core :- eq {{ hello }} " hello ".
testcase makam_core :- eq {{hello}} "hello".
testcase makam_core :- eq {(<[ hello ]>)} " hello ".
testcase makam_core :- eq {(<[hello]>)} "hello".
testcase makam_core :- eq 〚 hello 〛 " hello ".
testcase makam_core :- eq 〚hello〛 "hello".
testcase makam_core :- eq {js| hello |} " hello ".
testcase makam_core :- eq {js|hello|} "hello".
testcase makam_core :- eq <js|return 5;|> "return 5;".
testcase makam_core :- eq { test other markers > } " test other markers > ".
testcase makam_core :- eq { test other markers { } " test other markers { ".
testcase makam_core :- eq { test other markers >} " test other markers >".
testcase makam_core :- eq { test other markers {} " test other markers {".
testcase makam_core :- eq {{ test other markers } }} " test other markers } ".

(* Tests for pfun *)

testcase makam_core :- ((pfun (X, Y) => eq X 1) (1, 2)).
testcase makam_core :- eq X 2, ((pfun (X, Y) => eq X 1) (1, 3)).
testcase makam_core :- (x:string -> ((pfun (X, Y) => eq X Y) (x, x))).

(* Tests for guard *)

testcase makam_core :-
  guard X (eq Result 1), refl.isunif X, refl.isunif Result,
  eq X "foo", not(refl.isunif X), not(refl.isunif Result).

testcase makam_core :-
  removableguard Trigger X (pfun => eq Trigger unit, eq Result1 1),
  removableguard Trigger Y (pfun => eq Trigger unit, eq Result2 2),
  refl.isunif X, refl.isunif Y, refl.isunif Result1, refl.isunif Result2,

  eq X "foo",
  not(refl.isunif X), refl.isunif Y, not(refl.isunif Result1), refl.isunif Result2,

  eq Y "foo",
  not(refl.isunif X), not(refl.isunif Y), not(refl.isunif Result1), refl.isunif Result2.

testcase makam_core :-
  removableguard Trigger X (pfun => eq Trigger unit, eq Result1 1),
  removableguard Trigger Y (pfun => eq Trigger unit, eq Result2 2),
  refl.isunif X, refl.isunif Y, refl.isunif Result1, refl.isunif Result2,

  eq Y "foo",
  refl.isunif X, not(refl.isunif Y), refl.isunif Result1, not(refl.isunif Result2),

  eq X "foo",
  not(refl.isunif X), not(refl.isunif Y), refl.isunif Result1, not(refl.isunif Result2).

testcase makam_core :-
  guard A (eq Result1 1), guard B (eq Result2 2),
  refl.isunif A, refl.isunif B, refl.isunif Result1, refl.isunif Result2,

  eq A B,
  refl.isunif A, refl.isunif B, refl.isunif Result1, refl.isunif Result2,

  eq A "foo",
  not(refl.isunif A), not(refl.isunif B), not(refl.isunif Result1), not(refl.isunif Result2).

testcase makam_core :-
  guard A (eq Result1 1), guard B (eq Result2 2),
  refl.isunif A, refl.isunif B, refl.isunif Result1, refl.isunif Result2,

  eq A B,
  refl.isunif A, refl.isunif B, refl.isunif Result1, refl.isunif Result2,

  eq B "foo",
  not(refl.isunif A), not(refl.isunif B), not(refl.isunif Result1), not(refl.isunif Result2).

(* Tests for assumptions *)

%extend makam_core_tests.
a1, a2, b, c : int -> prop.
a1 X :- (b 3 -> c X).
a2 X :-
    (b 3 ->
        ((b 5 -> c X), lessthan 3 X true)).

c 2 :- b 3.
c 4 :- b 3.
c 6 :- b 3.
c X :- ((eq X 100, b 3); (eq X 101, b 3)).
c X :- if (eq X 200) then b 3 else (eq X 201, b 3).
%end.

testcase makam_core :- makam_core_tests.a1 X, not(refl.isunif X), eq X 2.
testcase makam_core :- makam_core_tests.a1 4.
testcase makam_core :- makam_core_tests.a1 X, eq X 4.
testcase makam_core :- makam_core_tests.a1 X, (eq X 5; eq X 4).
testcase makam_core :- makam_core_tests.a1 X, (if (makam_core_tests.b 3) then failure else eq X 4).
testcase makam_core :- makam_core_tests.a1 X, eq X 101.
testcase makam_core :- makam_core_tests.a1 201.
testcase makam_core :- makam_core_tests.a2 X, eq X 6.
