%use "syntax_syntax".

%open syntax.
%open peg.
%open pretty.
%open syntax_syntax.

%extend syntax_syntax_tests.

term : type.
term, baseterm : syntax term.

lam : string -> term -> term.
app : term -> list term -> term.
var : string -> term.

ident : syntax string.
syntax.rule ident (token (char_once_or_many (charclass "abcdefghijklmnopqrstuvwxyz"))).
syntax.inline ident.

all : testsuite. %testsuite all.

>> syntax.parse_opt string_literal "'hello\\'\\n'" X ?
>> Yes:
>> X := "hello'\n".

>> syntax.parse_opt choices "syntax_syntax_tests.lam { 'λ' <syntax_syntax_tests.ident> '.' <syntax_syntax_tests.term> }" X ?
>> Yes:
>> X := [syntax.apply lam [token "λ", syntax.captured ident, token ".", syntax.captured term]].

>> syntax.pretty choices [syntax.apply lam [token "λ", syntax.captured ident, token ".", syntax.captured term]] X ?
>> Yes:
>> X := "syntax_syntax_tests.lam { 'λ' < syntax_syntax_tests.ident > '.' < syntax_syntax_tests.term > } ".

>> pretty.pretty (makam_term 0) lam (some X) ?
>> Yes:
>> X := "syntax_syntax_tests.lam ".

>> pretty.pretty (makam_term 0) (fun (x: term) => x) (some X) ?
>> Yes:
>> X := "fun anon0 => anon0 ".

>> pretty.pretty (makam_term 0) (fun x y => lam y x) (some X) ?
>> Yes:
>> X := "fun anon0 => fun anon1 => syntax_syntax_tests.lam anon1 anon0 ".

`( syntax_rules {{

term ->
        lam { 'λ' <ident> '.' <term> }
      / app { <baseterm> <once_or_many baseterm> }
      / baseterm ;
baseterm ->
        var { <ident> }
      / ( '(' <term> ')' )

}}).

`( def_toplevel_js term ).

>> syntax.parse_opt term { λx.λy.y x x } X ?
>> Yes:
>> X := lam "x" (lam "y" (app (var "y") [var "x", var "x"])).

>> syntax.parse_opt term { λx.λy.(y x x) } X ?
>> Yes:
>> X := lam "x" (lam "y" (app (var "y") [var "x", var "x"])).

>> syntax.pretty term (lam "x" (lam "y" (app (var "y") [var "x", var "x"]))) X ?
>> Yes:
>> X := "λ x . λ y . y x x ".

>> (syntax.parse_opt term { λx.λy.((y x) x) } _Parsed, syntax.pretty term _Parsed Printed) ?
>> Yes:
>> Printed := "λ x . λ y . ( y x ) x ".

>> (syntax.parse_opt term { λx.(λy.((y x) x)) } _Parsed, syntax.pretty term _Parsed Printed) ?
>> Yes:
>> Printed := "λ x . λ y . ( y x ) x ".

%end.
