%open syntax.
%open peg.
%open pretty.
%open syntax_syntax.

%extend syntax_syntax_tests.

term : type.
term, baseterm : syntax term.

lam : string -> term -> term.
app : term -> list term -> term.
var : string -> term.

ident : syntax string.
syntax.rule ident (token (char_once_or_many (charclass "abcdefghijklmnopqrstuvwxyz"))).
syntax.inline ident.

all : testsuite. %testsuite all.

>> isocast {{ syntax_syntax_tests.lam { "λ" <syntax_syntax_tests.ident> "." <syntax_syntax_tests.term> } }} (X: syntax A) ?
>> Yes:
>> X := syntax.choices [syntax.apply lam (syntax.consignored (token "λ") (syntax.conscaptured ident (syntax.consignored (token ".") (syntax.conscaptured term syntax.nil))))].

>> isocast (syntax.choices [syntax.apply lam (syntax.consignored (token "λ") (syntax.conscaptured ident (syntax.consignored (token ".") (syntax.conscaptured term syntax.nil))))]) (X: string) ?
>> Yes:
>> X := {{syntax_syntax_tests.lam { "λ"  < syntax_syntax_tests.ident > "."  < syntax_syntax_tests.term > } }}.

`( syntax_rules {{

term ->
        lam { "λ" <ident> "." <term> }
      / app { <baseterm> <once_or_many baseterm> }
      / baseterm ;

baseterm ->
        var { <ident> }
      / { "(" <term> ")" }

}}).

`( def_toplevel_js term ).

>> syntax.parse_opt term { λx.λy.y x x } X ?
>> Yes:
>> X := lam "x" (lam "y" (app (var "y") [var "x", var "x"])).

>> syntax.parse_opt term { λx.λy.(y x x) } X ?
>> Yes:
>> X := lam "x" (lam "y" (app (var "y") [var "x", var "x"])).

>> syntax.pretty term (lam "x" (lam "y" (app (var "y") [var "x", var "x"]))) X ?
>> Yes:
>> X := "λ x . λ y . y x x ".

>> (syntax.parse_opt term { λx.λy.((y x) x) } _Parsed, syntax.pretty term _Parsed Printed) ?
>> Yes:
>> Printed := "λ x . λ y . ( y x ) x ".

>> (syntax.parse_opt term { λx.(λy.((y x) x)) } _Parsed, syntax.pretty term _Parsed Printed) ?
>> Yes:
>> Printed := "λ x . λ y . ( y x ) x ".

%end.
