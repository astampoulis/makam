%extend syntax.

group : syntax_args (A -> A) A -> syntax A.
inline (group _).
rule (group PS) (apply (fun x => x) PS).

once_or_many : syntax A -> syntax (list A).
inline (once_or_many _).
rule (once_or_many P) (apply cons [ captured P, captured (many P) ]).

option : syntax A -> syntax (option A).
inline (option _).
rule (option P) (apply some [captured P]).
rule (option P) (apply none []).

optunit : syntax unit -> syntax unit.
inline (optunit _).
rule (optunit P) (apply unit [choices [P, empty]]).

list_sep : syntax unit -> syntax A -> syntax (list A).
list_sep_plus : syntax unit -> syntax A -> syntax (list A).

rule (list_sep_plus Sep P) (apply cons [captured P, Sep, captured (list_sep_plus Sep P)]).
rule (list_sep_plus Sep P) (apply cons [captured P, captured (apply nil [])]).
rule (list_sep Sep P) (list_sep_plus Sep P).
rule (list_sep Sep P) (apply nil []).

charcons : syntax string -> syntax string -> syntax string.
inline (charcons _ _).
rule (charcons HD TL) (transform string.append
                             "(a, b) => JSON.stringify(JSON.parse(a) + JSON.parse(b))"
                             (pfun hd tl str => string.headtail str hd tl)
                             [ captured HD, captured TL ]).

charsnoc : syntax string -> syntax string -> syntax string.
inline (charsnoc _ _).
rule (charsnoc Init Last) (transform string.append
                             "(a, b) => JSON.stringify(JSON.parse(a) + JSON.parse(b))"
                             (pfun init last str => string.initlast str init last)
                             [ captured Init, captured Last ]).

charmany : syntax string -> syntax string.
rule (charmany P) (charcons P (charmany P)).
rule (charmany P) (apply "" []).

char_once_or_many : syntax string -> syntax string.
inline (char_once_or_many _).
rule (char_once_or_many P)
     (charcons P (charmany P)).

string_join : syntax string -> string -> syntax string -> syntax string.
inline (string_join _ _ _).
rule (string_join P1 Sep P2) (transform (pfun a b c => string.concat [a, b, c])
                         "(a, b, c) => JSON.stringify(JSON.parse(a) + JSON.parse(b) + JSON.parse(c))"
                         (pfun before sep after str => eq sep Sep, string.split_at_first Sep str before after)
                         [ syntax.captured P1, syntax.captured (charclass Sep), syntax.captured P2 ]).

(* whitespace is not completely isomorphic between parsing and pretty-printing.
   when parsing, we just ignore whitespace.
   for printing, we need to specify what kind of whitespace to add. this will
   be done with actual pretty-printing in the future, but for now, we just
   specify whether we print nothing, a single space, or a newline by default.
*)
ws_empty : syntax unit. inline (ws_empty).
ws_space : syntax unit. inline (ws_space).
ws_newline : syntax unit. inline (ws_newline).

rule ws_empty (iso peg.ws pretty.empty).
rule ws_space (iso peg.ws (pretty.const " ")).
rule ws_newline (iso peg.ws (pretty.const "\n")).

(* simple tokens. these just parse out any whitespace. *)

token : string -> syntax unit.
syntax.rule (token S) (group [ optunit ws_empty, syntax.captured (exact S), optunit ws_space ]).
syntax.inline (token S).

token : syntax P -> syntax P.
syntax.rule (token P) (group [ optunit ws_empty, syntax.captured P, optunit ws_space ]).
syntax.inline (token P).

(* if the string used with the token is an identifier, we should try to parse an identifier from the input string;
   if that works, then we make sure that the identifier is the token exactly.
   that way, if we have a token "foo" and an identifier "foobar", we won't parse the prefix of "foobar" into an independent
   token "foo" and an identifier "bar".
   if we can't parse the token as an identifier, it's a symbol, so we just use `exact`. *)

token_id : syntax string -> string -> syntax unit.
syntax.inline (token_id _ _).

syntax.rule (token_id Ident S)
            (iso
              (peg.ignore (peg.transform (pfun ident res => eq ident S, eq res ident) JS_Code
                (peg.cons (peg.syntax (optunit ws_empty))
                (peg.cons (peg.captured (peg.syntax Ident))
                (peg.cons (peg.syntax (optunit ws_space)) peg.nil)))))
              (pretty.unapply unit
                (pretty.cons (pretty.syntax (optunit ws_empty))
                (pretty.cons (pretty.const S)
                (pretty.cons (pretty.syntax (optunit ws_space)) pretty.nil))))) :-
  peg.quote_string_js S S_Quoted,
  expansion.str `function(ident) { if (JSON.parse(ident) === ${S_Quoted}) return ident; else return null; }` JS_Code.

%end.
