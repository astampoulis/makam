%extend syntax.

group : syntax_args (A -> A) A -> syntax A.
inline (group _).
rule (group PS) (apply (fun x => x) PS).

once_or_many : syntax A -> syntax (list A).
inline (once_or_many _).
rule (once_or_many P) (apply cons [ captured P, captured (many P) ]).

option : syntax A -> syntax (option A).
inline (option _).
rule (option P) (apply some [captured P]).
rule (option P) (apply none []).

optunit : syntax unit -> syntax unit.
inline (optunit _).
rule (optunit P) (apply unit [choices [P, empty]]).

list_sep : syntax unit -> syntax A -> syntax (list A).
list_sep_plus : syntax unit -> syntax A -> syntax (list A).

rule (list_sep_plus Sep P) (apply cons [captured P, Sep, captured (list_sep_plus Sep P)]).
rule (list_sep_plus Sep P) (apply cons [captured P, captured (apply nil [])]).
rule (list_sep Sep P) (list_sep_plus Sep P).
rule (list_sep Sep P) (apply nil []).

charcons : syntax string -> syntax string -> syntax string.
inline (charcons _ _).
rule (charcons HD TL) (transform string.append
                             "(a, b) => JSON.stringify(JSON.parse(a) + JSON.parse(b))"
                             (pfun hd tl str => string.headtail str hd tl)
                             [ captured HD, captured TL ]).

charmany : syntax string -> syntax string.
rule (charmany P) (charcons P (charmany P)).
rule (charmany P) (apply "" []).

char_once_or_many : syntax string -> syntax string.
inline (char_once_or_many _).
rule (char_once_or_many P)
     (charcons P (charmany P)).

(* whitespace is not completely isomorphic between parsing and pretty-printing.
   when parsing, we just ignore whitespace.
   for printing, we need to specify what kind of whitespace to add. this will
   be done with actual pretty-printing in the future, but for now, we just
   specify whether we print nothing, a single space, or a newline by default.
*)
ws_empty : syntax unit. inline (ws_empty).
ws_space : syntax unit. inline (ws_space).
ws_newline : syntax unit. inline (ws_newline).

rule ws_empty (iso peg.ws pretty.empty).
rule ws_space (iso peg.ws (pretty.const " ")).
rule ws_newline (iso peg.ws (pretty.const "\n")).
%end.
