%extend syntax.

group : syntax_args (A -> A) A -> syntax A.
inline (group _).
rule (group PS) (apply (fun x => x) PS).

once_or_many : syntax A -> syntax (list A).
inline (once_or_many _).
rule (once_or_many P) (apply cons [ captured P, captured (many P) ]).

option : syntax A -> syntax (option A).
inline (option _).
rule (option P) (apply some [captured P]).
rule (option P) (apply none []).

optunit : syntax unit -> syntax unit.
inline (optunit _).
rule (optunit P) (apply unit [choices [P, empty]]).

list_sep : syntax unit -> syntax A -> syntax (list A).
list_sep_plus : syntax unit -> syntax A -> syntax (list A).

rule (list_sep_plus Sep P) (apply cons [captured P, Sep, captured (list_sep_plus Sep P)]).
rule (list_sep_plus Sep P) (apply cons [captured P, captured (apply nil [])]).
rule (list_sep Sep P) (list_sep_plus Sep P).
rule (list_sep Sep P) (apply nil []).

charmany : syntax string -> syntax string.
rule (charmany P) (transform (pfun hd_tl res => [HD TL] eq hd_tl [HD, TL], string.append HD TL res)
                             "(a, b) => JSON.stringify(JSON.parse(a) + JSON.parse(b))"
                             (pfun str res => [HD TL] string.headtail str HD TL,
                                                      eq res [HD, TL])
                             [ captured P, captured (charmany P) ]).
rule (charmany P) (apply "" []).

char_once_or_many : syntax string -> syntax string.
inline (char_once_or_many _).
rule (char_once_or_many P)
     (transform (pfun hd_tl res => [HD TL] eq hd_tl [HD, TL], string.append HD TL res)
                "(a, b) => JSON.stringify(JSON.parse(a) + JSON.parse(b))"
                (pfun str res => [HD TL] string.headtail str HD TL,
                                 eq res [HD, TL])
                [ captured P, captured (charmany P) ]).

(* whitespace is not completely isomorphic between parsing and pretty-printing.
   when parsing, we just ignore whitespace.
   for printing, we need to specify what kind of whitespace to add. this will
   be done with actual pretty-printing in the future, but for now, we just
   specify whether we print nothing, a single space, or a newline by default.
*)
ws_empty : syntax unit. inline (ws_empty).
ws_space : syntax unit. inline (ws_space).
ws_newline : syntax unit. inline (ws_newline).

rule_iso ws_empty peg.ws pretty.empty.
rule_iso ws_space peg.ws (pretty.const " ").
rule_iso ws_newline peg.ws (pretty.const "\n").
%end.

ident : syntax string.

%extend syntax.

rule ident (group [optunit ws_space, captured (char_once_or_many (charclass "abcdefghijklmnopqrstuvwxyz")), optunit ws_empty ]).

synt : syntax (syntax A).
syn : syntax string.
syn_args : syntax string.

token : string -> syntax unit.
rule (token S) (apply unit [ optunit ws_space, exact S, optunit ws_empty ]).

rule syn (transform (pfun id_args res => [ID ARGS] eq id_args [ID, ARGS], expansion.str `.syntax.apply ${ID} ${ARGS}` res) ""
                    (pfun a c => success)
         [ captured ident, token "{", captured syn_args, token "}" ]).
rule syn_args
     (transform (pfun hd_tl res => [HD TL] eq hd_tl [HD, TL], expansion.str `(.syntax.cons (.syntax.captured ${HD}) ${TL})` res) ""
                (pfun a c => success)
            [ token "[",
              captured ident,
              token "]",
              captured syn_args ]).
rule syn_args
     (transform (pfun hd_tl res => [HD TL] eq hd_tl [HD, TL], expansion.str `(.syntax.cons ${HD} ${TL})` res) ""
                (pfun a c => success)
            [ captured ident,
              captured syn_args ]).
rule syn_args
     (transform (pfun non res => eq res "(.syntax.nil)") "" (pfun a c => success) []).

%end.

tata : type.
lam : string -> string -> tata.

(eq syntax.syn Expr,
 eq "lam { [ident] [ident] }" Input,
 once(syntax.parse Expr Input ParseResult),
 fromstring ParseResult TataSyntax,
 syntax.parse TataSyntax "lala baba" Q
 ) ?
