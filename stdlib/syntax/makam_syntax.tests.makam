%open syntax.
%open peg.
%open pretty.

%extend makam_syntax_tests.

all : testsuite. %testsuite all.

>> syntax.parse_opt makam.string_literal {"hello\"\n"} X ?
>> Yes:
>> X := {hello"
}.

>> syntax.pretty makam.string_literal {hello"
} X ?
>> Yes:
>> X := {"hello\"\n" }.

>> syntax.parse_opt makam.int_literal "123" X ?
>> Yes:
>> X := 123.

>> syntax.pretty makam.int_literal 123 X ?
>> Yes:
>> X := "123 ".

term : type.
lam : string -> term -> term.

>> (concretereif.reify lam _Term, syntax.pretty makam.term _Term X) ?
>> Yes:
>> X := "makam_syntax_tests.lam ".

>> (concretereif.reify (fun (x: term) => x) _Term, syntax.pretty makam.term _Term X) ?
>> Yes:
>> X := "fun reif_var_0 => reif_var_0 ".

>> (concretereif.reify (fun x y => lam y x) _Term, syntax.pretty makam.term _Term X) ?
>> Yes:
>> X := "fun reif_var_0 => fun reif_var_1 => makam_syntax_tests.lam reif_var_1 reif_var_0 ".

>> (concretereif.reify (fun x => lam "hello" x) _Term, syntax.pretty makam.term _Term X) ?
>> Yes:
>> X := "fun reif_var_0 => makam_syntax_tests.lam \"hello\" reif_var_0 ".

>> syntax.parse_opt makam.term {makam_syntax_tests.lam "hello\""} Y ?
>> Yes:
>> Y := concretereif.term "makam_syntax_tests.lam" (cons (concretereif.const "hello\"") nil).

%end.
