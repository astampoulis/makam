%open syntax.
%open peg.
%open pretty.

%extend makam.

baseident, ident_, ident, ident_first, ident_rest : syntax string.
syntax.inline ident. syntax.inline baseident. syntax.inline ident_first. syntax.inline ident_rest.

(* identifiers *)
(* TODO: make this even more precise *)

syntax.rule ident_first (charclass "abcdefghijklmnopqrstuvwxyz_").
syntax.rule ident_rest (charclass "abcdefghijklmnopqrstuvwxyz_0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ").
syntax.rule baseident (charcons ident_first (charmany ident_rest)).
syntax.rule ident_ (string_join baseident "." ident_).
syntax.rule ident_ baseident.
`( syntax.def_js ident (token ident_) ).

unifident_first, unifident_rest, unifident, unifident_ : syntax string.
syntax.inline unifident. syntax.inline unifident_. syntax.inline unifident_first. syntax.inline unifident_rest.

syntax.rule unifident_first (charclass "ABCDEFGHIJKLMNOPQRSTUVWXYZ_").
syntax.rule unifident_rest (charclass "abcdefghijklmnopqrstuvwxyz_0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ").
syntax.rule unifident_ (charcons unifident_first (charmany unifident_rest)).
`( syntax.def_js unifident (token unifident_) ).

(* string literals *)

string_literal_char : syntax string.
syntax.inline string_literal_char.
syntax.rule string_literal_char (apply "\"" [ exact "\\\"" ]).
syntax.rule string_literal_char (apply "\n" [ exact "\\n" ]).
syntax.rule string_literal_char (apply "\r" [ exact "\\r" ]).
syntax.rule string_literal_char
  (iso (seq (neg (charclass "\"\n\r")) anychar)
       (untransform
         (pfun res x => not(string.contains "\\\"\n\r" x), eq res x)
         [ pretty.captured anychar ])).

string_literal_, string_literal : syntax string.
rule string_literal_
     (group [
      exact "\"",
      syntax.captured (charmany string_literal_char),
      exact "\""]).
syntax.inline string_literal_.

`( syntax.def_js string_literal (token string_literal_) ).

string_literal_char_str : peg string.
peg.inline string_literal_char_str.
peg.rule string_literal_char_str (exact "\\\"").
peg.rule string_literal_char_str (exact "\\n").
peg.rule string_literal_char_str (exact "\\r").
peg.rule string_literal_char_str (seq (neg (exact "\"")) anychar).

string_literal_str : peg string.
rule string_literal_str (syntax (token (iso
     (string_transform (fun quoted => `"${quoted}"`)
      [ exact "\"",
        peg.captured (stringmany string_literal_char_str),
        exact "\""] ) void))).
peg.inline string_literal_str.

(* int literals *)
int_literal_char : syntax string.
syntax.inline int_literal_char.
syntax.rule int_literal_char (charclass "0123456789").

int_literal_, int_literal : syntax int.
(* TODO: this does not handle bigints beyond ints (this would require
   a reification/reflection procedure other than JSON.stringify/JSON.parse).
   Also does not handle negative numbers. *)
syntax.rule int_literal_
   (syntax.transform refl.fromstring
              "((x) => { if (x.length > 16) { console.error('bigints not supported in JavaScript yet; incorrect results expected'); return parseInt(JSON.parse(x).substring(0, 15)); }; return parseInt(JSON.parse(x)); })"
              (pfun res i => tostring i res)
              [ syntax.captured (char_once_or_many int_literal_char) ]).

`(syntax.def_js int_literal (syntax.token int_literal_)).


(* makam terms *)

term : int -> syntax concretereif.
term_args : syntax (list concretereif).

syntax.rule (term 0)
            (syntax.apply concretereif.lambda
            [ token_id ident "fun", syntax.captured ident, token "=>", syntax.captured (term 0) ]).
syntax.rule (term 0) (term 1).
syntax.rule (term 1)
            (syntax.apply concretereif.term
            [ syntax.captured ident, syntax.captured term_args ]).
syntax.rule (term 1) (term 2).
syntax.rule (term 2) (syntax.apply (fun id => concretereif.term id []) [ syntax.captured ident ]).
syntax.rule (term 2) (syntax.apply concretereif.const [ syntax.captured string_literal ]).
syntax.rule (term 2) (syntax.apply concretereif.const [ syntax.captured int_literal ]).
syntax.rule (term 2) (syntax.apply (fun x => x) [ token "(", syntax.captured (term 0), token ")" ]).

syntax.rule term_args (syntax.apply cons [ syntax.captured (term 2), syntax.captured term_args ]).
syntax.rule term_args (syntax.apply nil []).


(* optimized versions of the above. Unfortunately requires code duplication. *)
term, term_0, term_1, term_1_aux, term_2, term_2_aux : syntax concretereif.
term_args_aux : syntax (list concretereif).

`( syntax.def_js term_0 (term 0) ).
`( syntax.def_js term (term_0) ).

syntax.rule (term_2_aux) (syntax.apply (fun id => concretereif.term id []) [ syntax.captured ident ]).
syntax.rule (term_2_aux) (syntax.apply concretereif.const [ syntax.captured string_literal ]).
syntax.rule (term_2_aux) (syntax.apply concretereif.const [ syntax.captured int_literal ]).
syntax.rule (term_2_aux) (syntax.apply (fun x => x) [ token "(", syntax.captured (term_0), token ")" ]).

`( syntax.def_js term_2 (term_2_aux) ).

syntax.rule (term_1_aux)
            (syntax.apply concretereif.term
            [ syntax.captured ident, syntax.captured term_args_aux ]).
syntax.rule (term_1_aux) (term_2).
syntax.rule term_args_aux (syntax.apply cons [ syntax.captured (term_2), syntax.captured term_args_aux ]).
syntax.rule term_args_aux (syntax.apply nil []).

`( syntax.def_js term_1 (term_1_aux) ).

(* makam types *)

typ_reified : type.

tarrow : typ_reified -> typ_reified -> typ_reified.
tbase : string -> list typ_reified -> typ_reified.
tunif : string -> typ_reified.

typ_reified, apptyp_reified, basetyp_reified : syntax typ_reified.

syntax.rule typ_reified (apply tarrow [ syntax.captured apptyp_reified, token "->", syntax.captured typ_reified ]).
syntax.rule typ_reified apptyp_reified.
syntax.rule apptyp_reified (apply tbase [ syntax.captured ident, syntax.captured (many basetyp_reified) ]).
syntax.rule apptyp_reified basetyp_reified.
syntax.rule basetyp_reified (apply (fun x => tbase x []) [ syntax.captured ident ]).
syntax.rule basetyp_reified (apply tunif [ syntax.captured unifident ]).
syntax.rule basetyp_reified (group [ token "(", syntax.captured typ_reified, token ")" ]).

`( syntax.def_toplevel_js typ_reified ).

%end.
