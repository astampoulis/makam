(* This implements a syntax for syntax combinators --
   basically a `iso (syntax A) string` procedure,
   which we can use to define syntax for other types.

   Due to the typed nature of `syntax`, typeful parsing
   does not really work; so we parse syntax combinators
   into a concrete representation; we then convert this
   to an actual syntax through the use of `concrete_reify`.
*)

%open syntax.
%open peg.
%open pretty.

%extend syntax_syntax.

cst_syntax, cst_syntax_arg : type.

ignore : cst_syntax -> cst_syntax_arg.
captured : cst_syntax -> cst_syntax_arg.

cst_apply : concretereif -> list cst_syntax_arg -> cst_syntax.
cst_token : string -> cst_syntax.
cst_pure : concretereif -> cst_syntax.

appl, base : syntax cst_syntax.
args : syntax (list cst_syntax_arg).

(* actual syntax combinators *)

syntax.rule base
            (syntax.apply cst_token [ syntax.captured (token makam.string_literal) ]).
syntax.rule base
            (syntax.apply cst_pure [ syntax.captured (makam.term 2) ]).
syntax.rule base
            (syntax.group [ exact "{", syntax.captured appl, exact "}" ]).

(* syntax.apply and syntax rules *)

syntax.rule args
            (syntax.apply (fun hd tl => (captured hd) :: tl)
            [ token "<", syntax.captured appl, token ">", syntax.captured args ]).
syntax.rule args
            (syntax.apply (fun hd tl => (ignore hd) :: tl)
            [ syntax.captured base, syntax.captured args ]).
syntax.rule args
            (syntax.apply nil []).

syntax.rule appl
            (syntax.apply (cst_apply (concretereif.lambda "reif_var_0" (concretereif.term "reif_var_0" [])))
            [ token "{", syntax.captured args, token "}" ]).
syntax.rule appl
            (syntax.apply cst_apply
            [ syntax.captured (makam.term 0), token "{", syntax.captured args, token "}" ]).
syntax.rule appl
            (syntax.apply cst_pure [ syntax.captured (makam.term 1) ]).

cst_choices : type.
cst_choices : list cst_syntax -> cst_choices.
choices : syntax cst_choices.

`( syntax.def_js choices (syntax.apply cst_choices [ syntax.captured (list_sep_plus (token "/") appl) ]) ).

cst_syndef : type.
cst_syndef : concretereif -> cst_choices -> cst_syndef.
syndef : syntax cst_syndef.
`( syntax.def_js syndef
    (syntax.apply cst_syndef
      [ syntax.captured (makam.term 0), token "->", syntax.captured choices ]) ).

syndef_many : syntax (list cst_syndef).
`( syntax.def_js syndef_many (list_sep_plus (optunit (token ";")) syndef)).

syndef : type.
syndef : syntax A -> syntax A -> syndef.

syntax_rule_clause : syndef -> cmd -> prop.
syntax_rule_clause (syndef SyntaxConstr SyntaxDef) (cmd_newclause (clause (syntax.rule SyntaxConstr SyntaxDef) success)).


(* cst <-> reified conversion *)

cst_to_reified : cst_syntax -> concretereif -> prop.
cst_to_reified_args : list cst_syntax_arg -> concretereif -> prop.

cst_to_reified (cst_apply Constr Args) (concretereif.term "syntax.apply" [ Constr, LR ]) :-
  cst_to_reified_args Args LR.
cst_to_reified (cst_token S) (concretereif.term "syntax.token" [concretereif.const S]).
cst_to_reified (cst_pure R) R.

cst_to_reified_args [] (concretereif.term "syntax.nil" []).
cst_to_reified_args ((ignore HD) :: TL) (concretereif.term "syntax.consignored" [ HD', TL' ]) :-
  cst_to_reified HD HD', cst_to_reified_args TL TL'.
cst_to_reified_args ((captured HD) :: TL) (concretereif.term "syntax.conscaptured" [ HD', TL' ]) :-
  cst_to_reified HD HD', cst_to_reified_args TL TL'.

cst_to_reified : list concretereif -> concretereif -> prop.
cst_to_reified [] (concretereif.term "nil" []).
cst_to_reified (HD :: TL) (concretereif.term "cons" [ HD, TL' ]) :- cst_to_reified TL TL'.

cst_to_reified : cst_choices -> concretereif -> prop.
cst_to_reified (cst_choices CS) (concretereif.term "syntax.choices" [ LR ]) :-
  if (refl.isunif CS)
  then (cst_to_reified (LCSR: list concretereif) LR, map cst_to_reified CS LCSR)
  else (map cst_to_reified CS LCSR, cst_to_reified LCSR LR).

cst_to_reified : cst_syndef -> concretereif -> prop.
cst_to_reified (cst_syndef Constr Def) (concretereif.term "syntax_syntax.syndef" [ Constr, DefR ]) :-
  cst_to_reified Def DefR.

isocast_def (Iso: iso cst_choices (syntax A)) :-
  eq Iso (iso.compose [
    iso.bidi cst_to_reified,
    iso.iso concretereif.reflect concretereif.reify
  ]).

isocast_def (Iso: iso cst_syndef syndef) :-
  eq Iso (iso.compose [
    iso.bidi cst_to_reified,
    iso.iso concretereif.reflect concretereif.reify
  ]).

%end.

syntax_rules : string -> cmd -> prop.
syntax_rules RulesS (cmd_many Clauses) :-
  if (syntax.parse_opt syntax_syntax.syndef_many RulesS RulesR, map isocast RulesR Rules)
  then map syntax_syntax.syntax_rule_clause Rules Clauses
  else (log_error RulesS `parsing the syntax rules failed`, failure).
