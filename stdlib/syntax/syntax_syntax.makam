(* This implements a syntax for syntax combinators --
   basically a `syntax (syntax A)` syntax procedure,
   which we can use to define syntax for other types.

   Due to the typed nature of `syntax`, typeful parsing
   does not really work; so we parse syntax combinators
   into a string representing a makam term; when this
   string is parsed with `refl.fromstring` we'll get something
   of `syntax A` type. The pretty-printer does work normally,
   so the syntax of syntax is defined through `rule_iso`,
   handling parsing and pretty-printing differently.
*)

%open syntax.
%open peg.
%open pretty.

%extend syntax_syntax.

ident : syntax string.
makam_ident : syntax string.
string_literal : syntax string.

makam_quote : syntax string -> syntax A.

top_str, base_str : peg string.
args_str : peg string.

top, base : pretty (syntax A).
args : pretty (syntax_args A B).

top : syntax (syntax A).
args : syntax (syntax_args A B).


(* TODO: `ident` should be more precise than that *)
syntax.rule ident (char_once_or_many (charclass "abcdefghijklmnopqrstuvwxyz")).
syntax.inline ident.

(* TODO: we should allow makam terms other than `ident` below *)
syntax.rule makam_ident (char_once_or_many (charclass "abcdefghijklmnopqrstuvwxyz._")).
syntax.inline ident.

rule (makam_quote P)
     (transform refl.fromstring "JSON.parse" (pfun str x => tostring_qualified x str)
       [ syntax.captured P ]).
syntax.inline (makam_quote P).

(* TODO: string literals should be more general than this too *)
rule string_literal
     (group [
      exact "'",
      syntax.captured (char_once_or_many (charclass "abcdefghijklmnopqrstuvwxyzαβγδεζηθικλμνξοπρστυφχψω!@#$%^&*()-=+_;:<>[]{}.\/?")),
      exact "'"]).
syntax.inline string_literal.

token : string -> syntax unit.
parsed_token, parsed_token_cached : string -> peg string.
syntax.inline (token _).
peg.inline (parsed_token _).

(* we try to parse a token as an identifier; if that works, then we make sure that the identifier is the token exactly.
   that way, if we have a token "foo" and an identifier "foobar", we won't parse the prefix of "foobar" into an independent
   token "foo" and an identifier "bar".
   if we can't parse as an identifier, it's a symbol, so we just use `exact`. *)

syntax.rule_iso (token S) (bind (parsed_token_cached S) (fun _ => action unit))
                          (unapply unit [ syntax (optunit ws_empty), const S, syntax (optunit ws_space) ]).
syntax.inline (token S).

peg.rule (parsed_token S) (transform (pfun ident res => eq ident S, eq res ident)
                              JS_Code
                              [ syntax (optunit ws_empty), peg.captured (syntax makam_ident), syntax (optunit ws_space) ]) :-
  quote_string_js S S_Quoted,
  expansion.str `function(ident) { if (JSON.parse(ident) === ${S_Quoted}) return ident; else return null; }` JS_Code.
peg.rule (parsed_token S) (apply (fun x => x) [ syntax (optunit ws_empty), neg (syntax makam_ident), peg.captured (exact S), syntax (optunit ws_space) ]).
peg.inline (parsed_token S).

`( pfun cmd =>
   gen_toplevel_parser_js (parsed_token "~~argument~~") JS_Code0, quote_string_js JS_Code0 QuotedCode,
   expansion.str `${QuotedCode}.replace(/"~~argument~~"/g, 'inputString');` FunctionCodeString,
   js.eval FunctionCodeString FunctionCode,
   eq cmd (cmd_stage (pfun cmd' =>
     eq cmd' (cmd_newclause (clause (peg.extern_def (parsed_token_cached S) JS_Code) {prop| quote_string_js S Quoted,
              expansion.str `(function() { const inputString = ${Quoted}; return ${FunctionCode}; })()` JS_Code |}))))).

token : syntax P -> syntax P.
syntax.rule (token P) (group [ optunit ws_empty, syntax.captured P, optunit ws_space ]).
syntax.inline (token P).

simple_token : string -> syntax unit.
syntax.rule (simple_token S) (group [ optunit ws_empty, syntax.captured (exact S), optunit ws_space ]).
syntax.inline (simple_token S).

peg.rule base_str
         (syntax (token makam_ident)).
pretty.rule base
         (syntax (token (makam_quote makam_ident))).

peg.rule base_str
         (string_transform (fun s => expansion.str `(syntax_syntax.simple_token "${s}")`)
                [ peg.captured (syntax (token string_literal)) ]).
pretty.rule base
         (unapply (fun (s: string) => (simple_token s: syntax unit))
                [ pretty.captured (syntax (token string_literal)) ]).

peg.rule args_str
     (string_transform (fun hd tl => expansion.str `(syntax.cons (syntax.captured ${hd}) ${tl})`)
            [ syntax (token "<"),
              peg.captured base_str,
              syntax (token ">"),
              peg.captured args_str ]).
pretty.rule args
     (unapply (fun hd tl => syntax.cons (syntax.captured hd) tl)
       [ syntax (token "<"),
         pretty.captured base,
         syntax (token ">"),
         pretty.captured args ]).

peg.rule args_str
     (string_transform (fun hd tl => expansion.str `(syntax.cons (${hd}: syntax unit) ${tl})`)
            [ peg.captured base_str,
              peg.captured args_str ]).
pretty.rule args
     (unapply (syntax.cons : syntax unit -> syntax.syntax_args B C -> syntax.syntax_args B C)
       [ pretty.captured base,
         pretty.captured args ]).

peg.rule args_str
     (apply "syntax.nil" []).
pretty.rule args
     (unapply syntax.nil []).

args_str_cached : peg string.
`( peg.def_parser_js args_str_cached args_str ).

peg.rule top_str
          (string_transform (fun id args => expansion.str `(syntax.apply ${id} ${args})`)
          [ peg.captured (syntax (token makam_ident)), syntax (token "{"), peg.captured args_str_cached, syntax (token "}") ]).
pretty.rule top
     (unapply syntax.apply
      [ pretty.captured (syntax (token (makam_quote makam_ident))), syntax (token "{"), pretty.captured args, syntax (token "}") ]).

syntax.rule_iso top
         (peg.transform refl.fromstring "JSON.parse" [ peg.captured top_str ])
         (top).

syntax.rule_iso args
         (peg.transform refl.fromstring "JSON.parse" [ peg.captured args_str_cached ])
         (args).

new_rule : [A B] syntax A -> B -> string -> cmd -> prop.
new_rule Syntax Constructor Args_S
         (cmd_newclause (clause
           (syntax.rule Syntax (syntax.apply Constructor Args))
           success)) :-
  if (syntax.parse_opt args Args_S Args_Untyped)
  then
    (if (dyn.eq Args_Untyped Args)
     then success
     else (if (refl.typstring Args_Untyped TypArgsS')
           then expansion.str `(${TypArgsS'}) ` TypArgsS
           else eq TypArgsS "",
           if (refl.typstring Args TypConstrS')
           then expansion.str `(${TypConstrS'}) ` TypConstrS
           else eq TypConstrS "",
           log_error Args_S `type of syntax arguments ${TypArgsS}does not match type of constructor${TypConstrS}`, failure))
  else (log_error Args_S `parsing the syntax rule failed`, failure).

%end.

%open syntax_syntax.

%extend syntax_syntax_tests.

term : type.
term : syntax term.

lam : string -> term -> term.
app : term -> term -> term.
var : string -> term.

ident : syntax string.
syntax.rule ident (token syntax_syntax.ident).

all : testsuite. %testsuite all.

>> syntax.parse_opt top "syntax_syntax_tests.lam { 'λ' <syntax_syntax_tests.ident> '.' <syntax_syntax_tests.term> }" X ?
>> Yes:
>> X := (syntax.apply lam [simple_token "λ", syntax.captured ident, simple_token ".", syntax.captured term]).

>> syntax.pretty top (syntax.apply lam [simple_token "λ", syntax.captured ident, simple_token ".", syntax.captured term]) X ?
>> Yes:
>> X := "syntax_syntax_tests.lam { 'λ' < syntax_syntax_tests.ident > '.' < syntax_syntax_tests.term > } ".

`( new_rule term lam "'λ' <ident> '.' <term>" ).
`( new_rule term var "<ident>" ).
`( new_rule term app "'(' <term> <term> ')'" ).

`( def_toplevel_js term ).

>> syntax.parse_opt term "λx.λy.((y x) x)" X ?
>> Yes:
>> X := lam "x" (lam "y" (app (app (var "y") (var "x")) (var "x"))).

>> syntax.pretty term (lam "x" (lam "y" (app (app (var "y") (var "x")) (var "x")))) X ?
>> Yes:
>> X := "λ x . λ y . ( ( y x ) x ) ".

%end.
