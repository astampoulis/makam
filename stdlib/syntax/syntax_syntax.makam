(* This implements a syntax for syntax combinators --
   basically a `syntax (syntax A)` syntax procedure,
   which we can use to define syntax for other types.

   Due to the typed nature of `syntax`, typeful parsing
   does not really work; so we parse syntax combinators
   into a string representing a makam term; when this
   string is parsed with `makam.antiquote` we'll get something
   of `syntax A` type. The pretty-printer does work normally,
   so the syntax of syntax is defined through `iso`,
   handling parsing and pretty-printing differently.
*)

%open syntax.
%open peg.
%open pretty.

%extend syntax_syntax.

appl_str, base_str : peg string.
args_str : peg string.

appl, base : pretty (syntax A).
args : pretty (syntax_args A B).

appl : syntax (syntax A).
args : syntax (syntax_args A B).

(* actual syntax combinators *)

peg.rule base_str
         (string_transform (fun s => `(syntax.token "${s}")`)
                [ peg.captured (syntax (token makam.string_literal)) ]).
pretty.rule base
         (unapply (fun (s: string) => (token s: syntax unit))
                [ pretty.captured (syntax (token makam.string_literal)) ]).

peg.rule base_str
         (makam.term_str 2).
pretty.rule base
         (makam.term 2).

peg.rule base_str
         (string_transform (fun s => `(${s})`)
                [ exact "{", peg.captured appl_str, exact "}" ]).
pretty.rule base
         (unapply (fun x => x)
                [ const "{", pretty.captured appl, const "}" ]).

(* syntax.apply and syntax rules *)

peg.rule args_str
     (string_transform (fun hd tl => `(syntax.cons (syntax.captured ${hd}) ${tl})`)
            [ syntax (token "<"),
              peg.captured appl_str,
              syntax (token ">"),
              peg.captured args_str ]).
pretty.rule args
     (unapply (fun hd tl => syntax.cons (syntax.captured hd) tl)
       [ syntax (token "<"),
         pretty.captured appl,
         syntax (token ">"),
         pretty.captured args ]).

peg.rule args_str
     (string_transform (fun hd tl => `(syntax.cons (${hd}: syntax unit) ${tl})`)
            [ peg.captured base_str,
              peg.captured args_str ]).
pretty.rule args
     (unapply (syntax.cons : syntax unit -> syntax.syntax_args B C -> syntax.syntax_args B C)
       [ pretty.captured base,
         pretty.captured args ]).

peg.rule args_str
     (apply "syntax.nil" []).
pretty.rule args
     (unapply syntax.nil []).

peg.rule appl_str
          (string_transform (fun args => `(syntax.apply (fun x => x) ${args})`)
          [ syntax (token "{"), peg.captured args_str, syntax (token "}") ]).
pretty.rule appl
     (unapply (syntax.apply (fun (x: A) => x))
      [ syntax (token "{"), pretty.captured (args: pretty (syntax_args (A -> A) A)), syntax (token "}") ]).

peg.rule appl_str
          (string_transform (fun id args => `(syntax.apply ${id} ${args})`)
          [ peg.captured (makam.term_str 0), syntax (token "{"), peg.captured args_str, syntax (token "}") ]).
pretty.rule appl
     (unapply syntax.apply
      [ pretty.captured (makam.term 0), syntax (token "{"), pretty.captured args, syntax (token "}") ]).

peg.rule appl_str (makam.term_str 1).
pretty.rule appl (makam.term 1).

syntax.rule appl
         (iso (makam.antiquote appl_str)
              (appl)).

syntax.rule args
         (iso (makam.antiquote args_str)
              (args)).

choices_str : peg string.
choices : pretty (list (syntax A)).

peg.rule choices_str
          (string_transform (fun c cs => `(cons ${c} ${cs})`)
          [ peg.captured appl_str, syntax (token "/"), peg.captured choices_str ]).
pretty.rule choices
     (unapply cons
      [ pretty.captured appl, syntax (token "/"), pretty.captured choices ]).

peg.rule choices_str
          (string_transform (fun c => `(cons ${c} nil)`)
          [ peg.captured appl_str ]).
pretty.rule choices
     (unapply (fun hd => cons hd nil)
      [ pretty.captured appl ]).

choices_str_cached : peg string.
`( peg.def_parser_js choices_str_cached choices_str ).

choices : syntax (list (syntax A)).
syntax.rule choices (iso (makam.antiquote choices_str_cached) choices).

syndef : type.
syndef : syntax A -> syntax A -> syndef.

syndef_str, syndef_str_cached : peg string.
syndef : pretty syndef.

peg.rule syndef_str
       (string_transform (fun constr def => `(syntax_syntax.syndef ${constr} (syntax.choices ${def}))`)
        [ peg.captured (makam.term_str 0), syntax (token "->"), peg.captured choices_str_cached ]).
pretty.rule syndef
       (unapply (fun constr def => syndef constr (choices def))
        [ pretty.captured (makam.term 0), syntax (token "->"), pretty.captured choices, const "\n" ]).

`( peg.def_parser_js syndef_str_cached syndef_str ).

syndef : syntax syndef.
syntax.rule syndef (iso (makam.antiquote syndef_str_cached) syndef).

syndef_many : syntax (list syndef).
syntax.rule syndef_many (list_sep_plus (optunit (token ";")) syndef).
`( syntax.def_toplevel_js syndef_many ).

syntax_rule_clause : syndef -> cmd -> prop.
syntax_rule_clause (syndef SyntaxConstr SyntaxDef) (cmd_newclause (clause (syntax.rule SyntaxConstr SyntaxDef) success)).

%end.

syntax_rules : string -> cmd -> prop.
syntax_rules RulesS (cmd_many Clauses) :-
  if (syntax.parse_opt syntax_syntax.syndef_many RulesS Rules)
  then map syntax_syntax.syntax_rule_clause Rules Clauses
  else (log_error RulesS `parsing the syntax rules failed`, failure).
