%use "layout_syntax".

%open syntax.
%open peg.
%open pretty.

%extend layout_syntax_tests.
all : testsuite. %testsuite all.

(* Unit tests *)

>> peg.parse (bracket.enter (ignore (exact "{")) (ignore (exact ";")) (ignore (exact "}")) (bracket.block (fun sep => many (bind anychar (fun res => seq sep (action res)))))) "{l;a;l;a;}" X ?
>> Yes:
>> X := (["l","a","l","a"], "").

>> peg.parse_opt (bracket.enter (ignore (exact "{")) (ignore (exact ";")) (ignore (exact "}")) (bracket.block (fun sep => many (bind anychar (fun res => seq sep (action res)))))) "{l;a;l;a;}" X ?
>> Yes:
>> X := (["l","a","l","a"], "").


(* Full tests: syntax for rose-trees, both layout-sensitive and bracket-based. *)

rosetree : type.
rosetree : string -> list rosetree -> rosetree.

label : syntax string.
syntax.rule label (char_once_or_many (charclass "abcdefghijklmnopqrstuvwxyz")).


(* Tests for bracket *)

bracket_rosetree_aux, bracket_rosetree : syntax rosetree.
bracket_token : syntax A -> syntax A.
bracket_token : string -> syntax unit.

syntax.rule (bracket_token (S: string)) (group [ optunit bracket.ws_empty, syntax.captured (exact S), optunit bracket.ws_space ]).
syntax.inline (bracket_token (S: string)).

syntax.rule (bracket_token (S: syntax A)) (group [ optunit bracket.ws_empty, syntax.captured S, optunit bracket.ws_space ]).
syntax.inline (bracket_token (S: syntax A)).

syntax.rule bracket_rosetree_aux (
  apply rosetree [
    syntax.captured (bracket_token label),
    syntax.captured (choices [
      bracket.block (fun sep => list_sep_plus sep bracket_rosetree_aux),
      bracket.block (fun _ => apply [] [])
    ])
  ]).

`( def_js bracket_rosetree (group [optunit ws_empty, syntax.captured (bracket.enter (bracket_token "{") (bracket_token ";") (bracket_token "}") bracket_rosetree_aux)])).

>> (syntax.parse_opt bracket_rosetree "foo { bar {}; baz {} }" X, syntax.pretty bracket_rosetree X Y) ?
>> Yes:
>> X := rosetree "foo" [rosetree "bar" [], rosetree "baz" []],
>> Y := "foo { bar { } ; baz { } } ".

(* Tests for layout *)

layout_rosetree_aux, layout_rosetree : syntax rosetree.
layout_token : syntax A -> syntax A.
layout_token : string -> syntax unit.

syntax.rule (layout_token (S: string)) (group [ optunit layout.ws_empty, syntax.captured (exact S), optunit layout.ws_empty ]).
syntax.inline (layout_token (S: string)).

syntax.rule (layout_token (S: syntax A)) (group [ optunit layout.ws_empty, syntax.captured S, optunit layout.ws_empty ]).
syntax.inline (layout_token (S: syntax A)).

syntax.rule layout_rosetree_aux (
  apply rosetree [
    syntax.captured label,
    syntax.captured (choices [
      layout.block (fun sep => list_sep_plus sep layout_rosetree_aux),
      apply [] []
    ])
  ]).

`( def_js layout_rosetree (group [optunit ws_empty, syntax.captured (layout.enter 2 layout_rosetree_aux)])).

>> (syntax.parse_opt layout_rosetree {
 foo bar
     baz
 } X, syntax.pretty layout_rosetree X Y) ?
>> Yes:
>> X := rosetree "foo" [rosetree "bar" [], rosetree "baz" []].
(*
>> Y := {
foo 
   bar 
   baz 
}.
*)

(* Conversions *)
>> (syntax.parse_opt layout_rosetree {
  foo bar
      baz
  } X, syntax.pretty bracket_rosetree X Y) ?
>> Yes:
>> X := rosetree "foo" [rosetree "bar" [], rosetree "baz" []],
>> Y := "foo { bar { } ; baz { } } ".

>> (syntax.parse_opt bracket_rosetree "foo { bar {}; baz {} }" X, syntax.pretty layout_rosetree X Y) ?
>> Yes:
>> X := rosetree "foo" [rosetree "bar" [], rosetree "baz" []].
>> Y := {
foo
   bar
   baz
}.

(* Haskell-like let-in *)

term : type.
letin : list (string * term) -> term -> term.
const : string -> term.

ptermtop : syntax term.
pterm : syntax term.

syntax.rule pterm (apply letin [
  layout_token "'let",
  syntax.captured (layout.block (fun sep => list_sep_plus sep (apply tuple [
    syntax.captured label,
    layout_token "=",
    syntax.captured pterm
  ]))),
  layout_token "'in",
  syntax.captured (layout.block (fun _ => pterm))
]).

syntax.rule pterm (apply const [ syntax.captured label ]).

`( def_js ptermtop (layout.enter 2 pterm) ).

>> (parse_opt ptermtop {{
'let x = foo
     y = bar 'in x
}} X, pretty ptermtop X Y) ?
>> Yes:
>> X := letin [("x", const "foo"), ("y", const "bar")] (const "x"),
>> Y := {{
'let
   x=foo
   y=bar
'in
   x
}}.


%end.
