%extend syntax.

(* Unit tests. *)

syntax_test : [A]syntax A -> string -> A -> prop.
syntax_test Syntax String Term :-
  parse_opt Syntax String T, unif_alpha_eqv T Term,
  parse Syntax String T_unopt, unif_alpha_eqv T_unopt Term,
  pretty Syntax Term S, eq S String,
  (* this is kind of a paranoid test, but just make sure that roundtrip works ok *)
  parse_opt Syntax String T', pretty Syntax T' String', eq String String',
  pretty Syntax Term S', parse_opt Syntax S' T'', unif_alpha_eqv T'' Term.

syntax_test_not : [A]syntax A -> string -> A -> prop.
syntax_test_not Syntax String Term :-
  not(parse_opt Syntax String T), not(parse_opt Syntax String T_unopt), not(pretty Syntax Term S).

syntax : testsuite. %testsuite syntax.

testcase syntax :- syntax_test (exact "s") "s" unit.
testcase syntax :- syntax_test (anychar) "s" "s".
testcase syntax :- syntax_test_not anychar "" "".
testcase syntax :- syntax_test (charclass "abc") "a" "a".
testcase syntax :- syntax_test empty "" unit.
testcase syntax :- syntax_test (many (charclass "abc")) "abba" ["a", "b", "b", "a"].
testcase syntax :- syntax_test (many (charclass "abc")) "" [].
testcase syntax :- syntax_test (choices [ charclass "!", charclass "abc" ]) "a" "a".
testcase syntax :- syntax_test (transform (pfun x_y res => ([X Y] eq x_y [X, Y], string.append Y X res))
                                          "(x, y) => JSON.stringify(JSON.parse(y) + JSON.parse(x))"
                                          (pfun s res => ([X Y] string.headtail s X Y, eq res [Y, X]))
                                          [captured (charclass "xa"), captured (charclass "xb")])
                                          "ab" "ba".
(* library testcases *)

testcase syntax :- syntax_test (group [exact "'", captured (charclass "abcdef"), exact "'"]) "'a'" "a".

`( def_js (once_or_many (charclass "abcdef")) ).
testcase syntax :- syntax_test (once_or_many (charclass "abcdef")) "dada" ["d","a","d","a"].
testcase syntax :- syntax_test (once_or_many (charclass "abcdef")) "d" ["d"].
testcase syntax :- syntax_test_not (once_or_many (charclass "abcdef")) "lala" ["l","a","l","a"].
testcase syntax :- syntax_test_not (once_or_many (charclass "abcdef")) "" [].

`( def_js (charmany (charclass "abcdef"))).
testcase syntax :- syntax_test (charmany (charclass "abcdef")) "dada" "dada".
testcase syntax :- syntax_test (charmany (charclass "abcdef")) "" "".
testcase syntax :- syntax_test_not (charmany (charclass "abcdef")) "lala" "lala".

`( def_js (char_once_or_many (charclass "abcdef"))).
testcase syntax :- syntax_test (char_once_or_many (charclass "abcdef")) "dada" "dada".
testcase syntax :- syntax_test (char_once_or_many (charclass "abcdef")) "d" "d".
testcase syntax :- syntax_test_not (char_once_or_many (charclass "abcdef")) "lala" "lala".
testcase syntax :- syntax_test_not (char_once_or_many (charclass "abcdef")) "" "".

testcase syntax :- parse_opt ws_empty "   \n " unit, pretty ws_empty unit "".
testcase syntax :- parse_opt ws_space "   \n " unit, pretty ws_space unit " ".
testcase syntax :- parse_opt ws_newline "   \n " unit, pretty ws_newline unit "\n".

unapply_test : type.
constr_a : string -> unapply_test.
constr_b : string -> unapply_test.

testcase syntax :- syntax_test (apply constr_a [ exact "a:", captured anychar ]) "a:x" (constr_a "x").

(* Full test. *)

term : type.
lam : string -> term -> term.
app : term -> list term -> term.
var : string -> term.

term : int -> syntax term.
ident : syntax string.

rule ident (charclass "abcdefghijklmnopqrstuvwxyz").

rule (term 0) (apply lam
                      [ exact "λ", captured ident, exact ".",
                        captured (term 0) ]).
rule (term 0) (term 1).

rule (term 1) (apply app
                      [ captured (term 2),
                        captured (many (group
                          [ exact " ", captured (term 2) ])) ]).
rule (term 1) (term 2).

rule (term 2) (apply var [ captured ident ]).
rule (term 2) (group [ exact "(", captured (term 0), exact ")" ]).

`( def_js (term 0) ).

>> parse (term 0) "λx.x (y z)" Z ?
>> Yes:
>> Z := lam "x" (app (var "x") (cons (app (var "y") (cons (var "z") nil)) nil)).

>> parse_opt (term 0) "λx.x (y z)" Z ?
>> Yes:
>> Z := lam "x" (app (var "x") (cons (app (var "y") (cons (var "z") nil)) nil)).

>> (pretty (term 0) (lam "x" (app (var "x") [lam "z" (var "z"), app (var "z") [lam "x" (var "x")]])) X, parse (term 0) X Y) ?
>> Yes:
>> X := "λx.x (λz.z) (z (λx.x))",
>> Y := lam "x" (app (var "x") (cons (lam "z" (app (var "z") nil)) (cons (app (var "z") (cons (lam "x" (app (var "x") nil)) nil)) nil))).

%end.
