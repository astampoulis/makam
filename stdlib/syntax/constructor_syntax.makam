constructor_definitions : string -> cmd -> prop.

%open syntax.
%open peg.
%open syntax_syntax.

%extend constructor_syntax.

constructor_def : type.
constructor_def : string -> list makam.typ_reified -> makam.typ_reified -> constructor_def.

typ_reified_arrows : list makam.typ_reified -> makam.typ_reified -> makam.typ_reified -> prop.
typ_reified_arrows [] Target Target when not(eq Target (makam.tarrow _ _)).
typ_reified_arrows (HD :: TL) Target (makam.tarrow HD T') :-
  typ_reified_arrows TL Target T'.

to_type : constructor_def -> Type -> prop.
to_type (constructor_def _ Args Target) Type :-
  typ_reified_arrows Args Target TypeReified,
  syntax.pretty makam.typ_reified TypeReified TypeString,
  expansion.str `(_: ${TypeString})` FullString,
  refl.fromstring FullString Type.

to_cmd : constructor_def -> cmd -> prop.
to_cmd Def (cmd_newterm Name Type) when eq Def (constructor_def Name _ _) :-
  to_type Def Type.

s_constructor_defs : syntax (list constructor_def).
s_constructor_def : syntax constructor_def.
constructor_arg : syntax makam.typ_reified.
param_name : syntax unit.

`( syntax_rules {{

s_constructor_def ->
  constructor_def { <makam.ident> <many constructor_arg> ":" <makam.typ_reified> "." }

constructor_arg -> { "(" param_name ":" <makam.typ_reified> ")" }

param_name -> { <iso (ignore (syntax makam.unifident)) (pretty.const "_")> }

}}).

`( syntax.def_js s_constructor_defs (once_or_many s_constructor_def) ).

constructor_definitions S (cmd_many Cmds) :-
  syntax.parse_opt s_constructor_defs S Defs, map to_cmd Defs Cmds.

hello : type.

`( constructor_definitions {{

kalimera (H: hello) (S: string) (Q : list Q) (E : list Q) : hello.

}}).

%type kalimera.

(syntax.parse_opt s_constructor_defs {{ kalimera (H: hello) (S: string) (Q : list Q) (E : list Q) : hello. }} X,
 syntax.pretty s_constructor_defs X Y) ?

(refl.typstring kalimera X, print X, syntax.parse_opt makam.typ_reified X Y, typ_reified_arrows Args Target Y, syntax.pretty s_constructor_def (constructor_def "kalimera" Args Target) ZZ ) ?

%end.

