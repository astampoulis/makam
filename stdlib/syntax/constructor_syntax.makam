%open syntax.
%open peg.
%open syntax_syntax.

%extend constructor_syntax.

constructor_def : type.
constructor_def : string -> args A B -> B -> constructor_def.

to_type : [ArgsTypes TargetType Type] 
          args ArgsTypes TargetType -> TargetType -> Type -> prop.
to_type [] TargetType TargetType.
to_type ((_: HDType) :: TL) TargetType (_: HDType -> Rest) :-
  to_type TL TargetType (_: Rest).

to_cmd : constructor_def -> cmd -> prop.

to_cmd (constructor_def S ArgsTypes TargetType)
       (cmd_newterm S Type) :-
  to_type ArgsTypes TargetType Type.

constructor_def : peg constructor_def.
constructor_def_str, constructor_arg_str : peg string.
many_str : peg string -> peg string.

peg.rule constructor_def (makam.antiquote constructor_def_str).
peg.rule constructor_def_str
         (string_transform (fun name argstypes targettype =>
           `constructor_syntax.constructor_def "${name}" ${argstypes} (_: ${targettype})`)
         [ peg.captured (syntax (token makam.ident)),
           peg.captured (many_str constructor_arg_str),
           syntax (token ":"),
           peg.captured makam.typ_str ]).

peg.rule constructor_arg_str
         (string_transform (fun var typ => `(${var}: ${typ})`)
         [ syntax (token "("),
           peg.captured (syntax (token makam.unifident)),
           syntax (token ":"),
           peg.captured makam.typ_str,
           syntax (token ")") ]).

peg.rule (many_str P)
         (string_transform (fun hd tl => `(cons ${hd} ${tl})`)
         [ peg.captured P,
           peg.captured (many_str P) ]).
peg.rule (many_str P)
         (apply "nil" []).

`( peg.def_toplevel_parser_js constructor_def ).

hello : type.

`( pfun res =>
   (peg.parse_opt constructor_def {{ kalimera (X: list (list hello)) (Y: string) : hello }}
       (Q, ""), to_cmd Q res) ).

%type kalimera.

%end.
