%use "../parsing/layout_grammar".

%open syntax.
%open peg.
%open pretty.

(* bracket syntax. useful for tests and for conversions between layout and bracket. *)

%extend peg. %extend bracket.

(* enter BlockBegin BlockNext BlockEnd P *)
enter : peg unit -> peg unit -> peg unit -> peg A -> peg A.
block : (peg unit -> peg A) -> peg A.

block_begin : peg unit -> prop.
block_next : peg unit -> prop.
block_end : peg unit -> prop.

%end. %end.

peg.rule (bracket.enter Begin Next End P)
         (peg.assume (clause (bracket.block_begin Begin) success)
         (peg.assume (clause (bracket.block_next Next) success)
         (peg.assume (clause (bracket.block_end End) success)
         P))).

peg.rule (bracket.block P)
         (peg.apply (fun x => x) [
           Begin,
           peg.captured (P Next),
           End
          ]) :-
  bracket.block_begin Begin,
  bracket.block_next Next,
  bracket.block_end End.

%extend pretty. %extend bracket.

enter : pretty unit -> pretty unit -> pretty unit -> pretty A -> pretty A.
block : (pretty unit -> pretty A) -> pretty A.

block_begin : pretty unit -> prop.
block_next : pretty unit -> prop.
block_end : pretty unit -> prop.

%end. %end.

pretty.builtin (bracket.enter _ _ _ _).
pretty.pretty (bracket.enter Begin Next End P) X S :-
  (bracket.block_begin Begin ->
   bracket.block_next Next ->
   bracket.block_end End ->
   (pretty.pretty P X S)).

pretty.rule (bracket.block F)
  (pretty.unapply (fun x => x) [
    Begin,
    pretty.captured (F Next),
    End
  ]) :-
  bracket.block_begin Begin,
  bracket.block_next Next,
  bracket.block_end End.

(* printing layout as (whitespace-sensitive) layout *)

%extend pretty. %extend layout.

enter : int -> pretty A -> pretty A.
block : (pretty unit -> pretty A) -> pretty A.
ws_newline : pretty unit.

indentation_spaces : int -> prop.
indentation_level : int -> prop.

pretty.builtin (layout.enter _ _).
pretty.pretty (layout.enter I P) X S :-
  (indentation_spaces I -> indentation_level 0 ->
  (pretty.pretty (unapply (fun x => x) [ const "\n", pretty.captured P ]) X S)).

pretty.builtin (layout.block _).
pretty.pretty (layout.block F) X MaybeS :-
  once(indentation_level CurLevel), indentation_spaces Indent,
  plus CurLevel Indent NextLevel,
  (indentation_level NextLevel ->
  (pretty.pretty
    (unapply (fun x => x) [
      layout.ws_newline,
      pretty.captured (F layout.ws_newline)
    ])
    X MaybeS')),
  if (eq MaybeS' (some S')) then (
    (* try to get rid of the last ws_newline, if it's the last thing we printed. *)
    string.repeat NextLevel " " Spaces, expansion.str `\n${Spaces}` Spaces',
    if (string.append S Spaces' S') then eq MaybeS (some S) else eq MaybeS MaybeS'
  ) else eq MaybeS none.

pretty.builtin (layout.ws_newline).
pretty.pretty (layout.ws_newline) X S :-
  once(indentation_level CurLevel), string.repeat CurLevel " " Spaces,
  (* extra space so that we don't make this a layout.next *)
  (pretty.pretty (unapply (fun x => x) [ const "\n ", pretty.captured (const Spaces) ]) X S).

%end. %end.

(* iso syntax layout_to_bracket parses whitespace layout and pretty prints as brackets *)

%extend syntax. %extend layout.

enter : int -> syntax A -> syntax A.
block : (syntax unit -> syntax A) -> syntax A.

ws_empty : syntax unit. ws_space : syntax unit. ws_newline : syntax unit.

%end. %end.

abort : peg A.
abort : pretty A.
peg.rule abort P' :- log_error P' `This should never get used, look at layout_syntax.`, failure.
pretty.rule abort P' :- log_error P' `This should never get used, look at layout_syntax.`, failure.

syntax.inline (layout.enter _ _).
syntax.rule (layout.enter I S) (iso
  (layout.enter (peg.syntax S))
  (layout.enter I (pretty.syntax S))).

syntax.inline (layout.block _).
syntax.rule (layout.block F) (iso
  (layout.block (fun sep => peg.syntax (F (iso sep abort))))
  (layout.block (fun sep => pretty.syntax (F (iso abort sep))))).

syntax.inline (layout.ws_empty).
syntax.rule (layout.ws_empty) (iso layout.ws (const "")).

syntax.inline (layout.ws_space).
syntax.rule (layout.ws_space) (iso layout.ws (const " ")).

syntax.inline (layout.ws_newline).
syntax.rule (layout.ws_newline) (iso layout.ws layout.ws_newline).

(* iso syntax layout parses whitespace layout and pretty prints as whitespace layout *)

%extend syntax. %extend bracket.

enter : syntax unit -> syntax unit -> syntax unit -> syntax A -> syntax A.
block : (syntax unit -> syntax A) -> syntax A.

ws_empty : syntax unit. ws_space : syntax unit. ws_newline : syntax unit.

%end. %end.

syntax.rule (bracket.enter Begin Next End S) (iso
  (bracket.enter (syntax Begin) (syntax Next) (syntax End) (syntax S))
  (bracket.enter (syntax Begin) (syntax Next) (syntax End) (syntax S))).

syntax.inline (bracket.block _).
syntax.rule (bracket.block F) (iso
  (bracket.block (fun sep => peg.syntax (F (iso sep abort))))
  (bracket.block (fun sep => pretty.syntax (F (iso abort sep))))).

syntax.inline (bracket.ws_empty).
syntax.rule (bracket.ws_empty) syntax.ws_empty.

syntax.inline (bracket.ws_space).
syntax.rule (bracket.ws_space) syntax.ws_space.

syntax.inline (bracket.ws_newline).
syntax.rule (bracket.ws_newline) syntax.ws_newline.


(* Layout-to-block and the other way around *)

%extend syntax. %extend layout_to_bracket.

enter : int -> syntax unit -> syntax unit -> syntax unit -> syntax A -> syntax A.
block : (syntax unit -> syntax A) -> syntax A.

ws_empty : syntax unit. ws_space : syntax unit. ws_newline : syntax unit.

%end. %end.

syntax.inline (layout_to_bracket.enter _ _ _ _ _).
syntax.rule (layout_to_bracket.enter I Begin Next End S)
            (iso (syntax (layout.enter I S))
                 (syntax (bracket.enter Begin Next End S))).

syntax.inline (layout_to_bracket.block F).
syntax.rule (layout_to_bracket.block F)
            (iso (syntax (layout.block F))
                 (syntax (bracket.block F))).

syntax.inline (layout_to_bracket.ws_empty).
syntax.rule (layout_to_bracket.ws_empty) (iso (syntax layout.ws_empty) (syntax bracket.ws_empty)).

syntax.inline (layout_to_bracket.ws_space).
syntax.rule (layout_to_bracket.ws_space) (iso (syntax layout.ws_space) (syntax bracket.ws_space)).

syntax.inline (layout_to_bracket.ws_newline).
syntax.rule (layout_to_bracket.ws_newline) (iso (syntax layout.ws_newline) (syntax bracket.ws_newline)).

(* The other way around. *)

%extend syntax. %extend bracket_to_layout.

enter : int -> syntax unit -> syntax unit -> syntax unit -> syntax A -> syntax A.
block : (syntax unit -> syntax A) -> syntax A.

ws_empty : syntax unit. ws_space : syntax unit. ws_newline : syntax unit.

%end. %end.

syntax.inline (bracket_to_layout.enter _ _ _ _ _).
syntax.rule (bracket_to_layout.enter I Begin Next End S)
            (iso (syntax (bracket.enter Begin Next End S))
                 (syntax (layout.enter I S))).

syntax.inline (bracket_to_layout.block F).
syntax.rule (bracket_to_layout.block F)
            (iso (syntax (bracket.block F))
                 (syntax (layout.block F))).

syntax.inline (bracket_to_layout.ws_empty).
syntax.rule (bracket_to_layout.ws_empty) (iso (syntax bracket.ws_empty) (syntax layout.ws_empty)).

syntax.inline (bracket_to_layout.ws_space).
syntax.rule (bracket_to_layout.ws_space) (iso (syntax bracket.ws_space) (syntax layout.ws_space)).

syntax.inline (bracket_to_layout.ws_newline).
syntax.rule (bracket_to_layout.ws_newline) (iso (syntax bracket.ws_newline) (syntax layout.ws_newline)).
