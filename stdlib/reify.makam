reified : type -> type.

reified_args : type -> type -> type.
nil : reified_args A A.
cons : reified A -> reified_args B C -> reified_args (A -> B) C.

%extend reified_args.
map : [A B C C' D]
      (reified A -> reified B -> prop) ->
      reified_args C D -> reified_args C' D -> prop.
map P [] [].
map P (HD :: TL) (HD' :: TL') :- dyn.call P HD HD', map P TL TL'.
%end.


%extend reified.

unifvar : int -> reified_args A B -> int -> B -> reified B.
term : A -> reified_args A B -> reified B.
const : A -> reified A.
bvar : A -> reified_args A B -> reified B.
nvar : A -> reified_args A B -> reified B.
lambda : (A -> reified B) -> reified (A -> B).

%end.

%extend refl.
isbvar : [A]A -> prop.
%end.

reify, reify1, reify2, reify3, reify4, reify5, reify6 : [A]A -> reified A -> prop.
reify_args : [A B]args A B -> reified_args A B -> prop.
reify_var : [A]A -> reified A -> prop.

reify X (reified.unifvar I SubstR Metalevel X) when refl.isunif(X) :-
  refl.unifmetalevel X Metalevel,
  refl.decomposeunif X I SubstDyn,
  dyn.to_args SubstDyn Subst,
  reify_args Subst SubstR.

reify X Y when not(refl.isunif X) :- reify1 X Y.

reify1 X R :-
  if (refl.isbvar X) then (reify_var X R)
  else reify2 X R.

reify2 X R :-
  if (refl.headargs X Head ArgsDyn, refl.isbvar Head) then
    (dyn.to_args ArgsDyn Args, reify_args Args ArgsR,
     eq R (reified.bvar Head ArgsR))
  else reify3 X R.

reify3 X R :-
  if (refl.headargs X Head ArgsDyn, refl.isnvar Head) then
    (dyn.to_args ArgsDyn Args, reify_args Args ArgsR,
     eq R (reified.nvar Head ArgsR))
  else (if refl.isnvar X then
    (eq R (reified.nvar X []))
  else reify4 X R).

reify4 X R :-
  if (refl.headargs X Head ArgsDyn, refl.isbaseterm X) then
    (dyn.to_args ArgsDyn Args, reify_args Args ArgsR,
     eq R (reified.term Head ArgsR))
  else reify5 X R.

reify5 X R :-
  if (refl.isconst X) then
    (eq R (reified.const X))
  else reify6 X R.

reify6 (X : A -> B) (reified.lambda X_R) :-
  (x:A -> refl.isbvar x -> reify_var x (reified.bvar x []) ->
    (reify (X x) (X_R x))).

reify_args X _ when refl.isunif X, locget X Loc, tostring Loc S,
       print_string `At ${S}, reify_args with uninstantiated variable.\n`, failure.

reify_args [] [].
reify_args (HD :: TL) (HD_R :: TL_R) :- reify HD HD_R, reify_args TL TL_R.

reflect : [A]reified A -> A -> prop.
reflect : [A B]reified_args A B -> args A B -> prop.

reflect X _
  when refl.isunif X, locget X Loc, tostring Loc S,
       print_string `At ${S}, reflect with uninstantiated variable.\n`, failure.

reflect (reified.unifvar I SubstR _ X) Z :-
  reflect SubstR Subst, dyn.from_args Subst SubstDyn, refl.recomposeunif X SubstDyn Z.

reflect (reified.term Head ArgsR) Z :-
  reflect ArgsR Args, dyn.from_args Args ArgsDyn, refl.headargs Z Head ArgsDyn.

reflect (reified.const Const) Const.

reflect (reified.nvar Head ArgsR) Z :-
  reflect ArgsR Args, args.apply Head Args Z.

reflect (reified.bvar Head ArgsR) Z :-
  reflect ArgsR Args, args.apply Head Args Z.

reflect (reified.lambda X_R) X :-
  (x:A -> reflect (reified.bvar x []) x -> reflect (X_R x) (X x)).

reflect [] [].
reflect (HD_R :: TL_R) (HD :: TL) :- reflect HD_R HD, reflect TL_R TL.


(* TODO: something (other than the bvar situation) is introducing multiple cases into reify, figure it out. *)
%extend full_reify.
reify : [A]A -> reified A -> prop.
reify X Y :- .reify X Y.
%end.

reify : [A]A -> reified A -> prop.
reify X Y :- once(full_reify.reify X Y).

eq_nounif : [A]A -> A -> prop.
eq_nounif A B :- reify A Areified, reify B Breified, eq Areified Breified.


eqv_aux : [A]reified A -> reified A -> (prop -> prop) -> (prop -> prop) -> prop.
eqv_args : [A B]reified_args A B -> reified_args A B -> (prop -> prop) -> (prop -> prop) -> prop.
eqv_assigned : int -> prop.
eqv_unifvars : int -> int -> prop.

eqv_aux (reified.unifvar I1 Args1 Metalevel _) (reified.unifvar I2 Args2 Metalevel _) Ctx Ctx'
    when Ctx(eqv_unifvars I1 I2) :-
  eqv_args Args1 Args2 Ctx Ctx'.

eqv_aux (reified.unifvar I1 Args1 Metalevel (_: A)) (reified.unifvar I2 Args2 Metalevel (_: A)) Ctx Ctx''
    when Ctx( {prop| not(eqv_assigned I1), not(eqv_assigned I2) |} ) :-
   eq Ctx' (pfun k =>
     (eqv_assigned I1 -> eqv_assigned I2 ->
      eqv_unifvars I1 I2 -> eqv_unifvars I2 I1 ->
      Ctx k)),
   eqv_args Args1 Args2 Ctx' Ctx''.

eqv_aux (reified.term Head Args) (reified.term Head Args') Ctx Ctx' :-
  eqv_args Args Args' Ctx Ctx'.

eqv_aux (reified.bvar Head Args) (reified.bvar Head Args') Ctx Ctx' :-
  eqv_args Args Args' Ctx Ctx'.

eqv_aux (reified.nvar Head Args) (reified.nvar Head Args') Ctx Ctx' :-
  eqv_args Args Args' Ctx Ctx'.

eqv_aux (reified.const Const) (reified.const Const) Ctx Ctx.

eqv_aux (reified.lambda F) (reified.lambda F') Ctx Ctx' :-
  (x:A -> eqv_aux (F x) (F' x) Ctx Ctx').

eqv_args [] [] Ctx Ctx.
eqv_args (HD :: TL) (HD' :: TL') Ctx Ctx'' :-
  eqv_aux HD HD' Ctx Ctx', eqv_args TL TL' Ctx' Ctx''.

(* without_eqv_refl (X : reified A). *)
(* This is not strictly necessary; if two reified representations are exactly equal,
   then they should be equivalent as well with the identity unification variable renaming.
   Leaving this out is also slightly faster, as equality is the same as unification in this
   case (the unification variables present in reify.unifvar are unifiable iff their reified
   versions are identical), and is thus natively implemented. *)

eqv (X: reified A) (Y: reified A) :-
  eqv_aux X Y (fun x => x) _.


unif_alpha_eqv : [A]A -> A -> prop.
unif_alpha_eqv X Y :- reify X XR, reify Y YR, eqv XR YR.




pattern_match : [A]A -> A -> prop.
pmatch_aux : [A]reified A -> reified A -> prop.

pattern_match A B :- reify A AR, reify B BR, pmatch_aux AR BR.


pmatch_aux (reified.unifvar _ _ _ L) R :- reflect R R', eq L R'.

pmatch_aux (reified.term Head Args) (reified.term Head Args') :-
  reified_args.map pmatch_aux Args Args'.

pmatch_aux (reified.bvar Head Args) (reified.bvar Head Args') :-
  reified_args.map pmatch_aux Args Args'.

pmatch_aux (reified.nvar Head Args) (reified.nvar Head Args') :-
  reified_args.map pmatch_aux Args Args'.

pmatch_aux (reified.const Const) (reified.const Const).

pmatch_aux (reified.lambda F) (reified.lambda F') :-
  (x:A -> pmatch_aux (F x) (F' x)).
