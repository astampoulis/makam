zero : type. succ : type -> type.

vector : type -> type -> type.
nil : vector A zero.
cons : A -> vector A N -> vector A (succ N).

%extend vector.

map : [N] (A -> B -> prop) -> vector A N -> vector B N -> prop.
map P [] [].
map P (HD :: TL) (HD' :: TL') :- P HD HD', map P TL TL'.

assumemany : [N] (A -> B -> prop) -> vector A N -> vector B N -> prop -> prop.
assumemany P [] [] Q :- Q.
assumemany P (HD :: TL) (HD' :: TL') Q :- (P HD HD' -> assumemany P TL TL' Q).

%end.