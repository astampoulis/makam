concrete : type -> type.
(* the `concrete` type constructor serves as an annotation that a term might contain
   concrete constructors. This is supposed to be used only at the toplevel and mostly
   as a way to drive `isocast` conversions. *)
concrete : A -> concrete A.

%extend concrete.

namespace : type -> type.
name : type -> type.

name : namespace A -> string -> name A.

lambda : name A -> B -> (A -> B).
var : name A -> A.
bindone : name A -> B -> bindone A B.
bindnext : name A -> bindmany A B -> bindmany A B.

resolve_name : [A] name A -> A -> prop.
handle_unresolved_name : [A] name A -> A -> prop.
pattern_mode : prop.

vars_in_context, vars_in_context_store : [A] namespace A -> list (A * string) -> prop.
vars_in_context_store Namespace [].
vars_in_context Namespace Vars :- once(vars_in_context_store Namespace Vars).

pick_name_prefix, pick_name_prefix_userdef : [A] namespace A -> string -> prop.
pick_name_prefix Namespace ID :-
  unless (pick_name_prefix_userdef Namespace ID)
         (eq ID "x").

pick_name, pick_name_userdef : [A] namespace A -> string -> prop.
pick_name Namespace ID when not(refl.isunif ID).
pick_name Namespace ID when refl.isunif ID :-
  unless (pick_name_userdef Namespace ID)
         {prop|
          vars_in_context Namespace Vars,
          length Vars L, tostring L L_S,
          pick_name_prefix Namespace Prefix,
          expansion.str `${Prefix}${L_S}` ID |}.

pick_namespace, pick_namespace_userdef : [Type] Type -> namespace Type -> prop.

pick_namespace _ Namespace when not(refl.isunif Namespace).
pick_namespace Var Namespace when refl.isunif Namespace :-
  pick_namespace_userdef Var Namespace.

resolve : [A] concrete A -> A -> prop.
resolve_, resolve_aux, resolve_conversion : [A]A -> A -> prop.

resolve (concrete X) Y :- resolve_ X Y.
isocast_def (iso.bidi concrete.resolve).

resolve_ X Y when refl.isunif X :-
  demand.case_otherwise (resolve_aux X' Y) (structural resolve_ X' Y),
  demand.case_otherwise (resolve_conversion X X') (eq X X').

resolve_ X Y when not(refl.isunif X) :-
  demand.case_otherwise (resolve_conversion X X') (eq X X'),
  demand.case_otherwise (resolve_aux X' Y) (structural resolve_ X' Y).

resolve_aux (lambda (name Namespace ID) Body) (F: A -> B) :-
  (x:A ->
   resolve_name (name Namespace ID) x ->
   (pick_namespace x Namespace,
    vars_in_context Namespace Vars,
    (vars_in_context_store Namespace ((x, ID) :: Vars) ->
      (pick_name Namespace ID,
       resolve_ Body (F x))))).

resolve_aux (var (name Namespace ID)) X
    when pick_namespace X Namespace, either (once(resolve_name (name Namespace ID) X)) (handle_unresolved_name (name Namespace ID) X) :-
  pick_namespace X Namespace,
  if (once(resolve_name (name Namespace ID) X))
  then success
  else handle_unresolved_name (name Namespace ID) X.

resolve_aux (bindone (name Namespace ID) Body) (bindone ID' Body') :-
  if (pattern_mode, refl.isunif ID') then success else eq ID ID',
  resolve_ (lambda (name Namespace ID) Body) Body'.

resolve_aux (bindnext (name Namespace ID) Body) (bindnext ID' Body') :-
  if (pattern_mode, refl.isunif ID') then success else eq ID ID',
  resolve_ (lambda (name Namespace ID) Body) Body'.

(* list of names and concrete.binders (standing for bind.binder and bind.body) *)

names : type -> type -> type.

nil : names Type unit.
cons : name Type -> names Type A -> names Type (Type * A).

binders : list (name Type) -> BodyType -> bind Type NamesType BodyType.

resolve_aux (binders ((name Namespace ID) :: Rest) Body) Result when refl.isunif Result :-
  eq Result (bind.binder ID' Body'),
  if (pattern_mode) then success else eq ID ID',
  resolve_ (lambda (name Namespace ID) (binders Rest Body)) Body'.

resolve_aux (binders [] Body) Result when refl.isunif Result :-
  eq Result (bind.body Body'),
  resolve_ Body Body'.

resolve_aux Result (Bind: bind VarType AllVars BodyType) when not(refl.isunif Bind) :-
  if (dyn.eq Bind (bind.binder ID' Rest))
  then (
    if (pattern_mode, refl.isunif ID') then success else eq ID ID',
    eq Name (name Namespace ID),
    resolve_ (lambda Name (binders Names Body)) Rest,
    eq Result (binders (Name :: Names) Body)
  )
  else (
    dyn.eq Bind (bind.body Body),
    resolve_ Body' Body,
    eq Result (binders [] Body')
  ).

%end.
