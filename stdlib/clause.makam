%extend clause.

applies : prop -> clause -> prop.
applies CurGoal (clause Goal Premise) <- eq CurGoal Goal.
applies CurGoal (whenclause Goal Guard Premise) <- eq CurGoal Goal, Guard.

premise : clause -> prop.
premise (clause Goal Premise) <- Premise.
premise (whenclause Goal Guard Premise) <- Premise.

demand : prop -> clause -> prop.
demand CurGoal Clause <-
  applies CurGoal Clause, premise Clause.

get_goal : clause -> prop -> prop.
get_goal (clause Goal _) Goal.
get_goal (whenclause Goal _ _) Goal.

get_guard : clause -> prop -> prop.
get_guard (clause _ _) success.
get_guard (whenclause _ Guard _) Guard.

demand_or : prop -> list clause -> prop.
demand_or Goal (HD :: TL) <- (demand Goal HD ; demand_or Goal TL).

demand_and : prop -> list clause -> prop.
demand_and Goal [].
demand_and Goal (HD :: TL) <-
  if applies Goal HD
  then (premise HD, demand_and Goal TL)
  else (demand_and Goal TL).

demand_case : prop -> list clause -> prop.
demand_case Goal (HD :: TL) <-
  if applies Goal HD
  then premise HD
  else demand_case Goal TL.

%end.
