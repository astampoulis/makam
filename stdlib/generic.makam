(* Structural recursion. 
   Useful for defining predicates that proceed by cases and use
   structural recursion as the default behavior when no other case
   matches.

   Example usage:

     term : type.

     namedvar : string -> term.
     lam : (term -> term) -> term.
     app : term -> term -> term.
     unit : term.
     
     Substitute namedvar for any term would be implemented as follows:
  
     subst, subst_ : string -> term -> A -> A -> prop.
  
     subst S T X Y <- demand.case_otherwise (subst_ S T X Y) (structural (subst_ S T) X Y).
  
     subst S T (namedvar S) T.
  
     subst "y" unit [lam (fun x => app x (namedvar "y"))), lam (fun x => namedvar "y")] X ?
     > X := [lam (fun x => app x unit), lam (fun x => unit)]

     (This will continue to work even after adding other constructors to term,
      or with any other type that term is incorporated into.)
*)


structural : [B] (A -> A -> prop) -> B -> B -> prop.

(* defer if both input and output are uninstantiated metavariables *)
structural Rec (X : A) (Y : A) when refl.isunif X, refl.isunif Y <-
  guardmany (X, Y) (dyn.call Rec X Y).

(* deal with built-in types *)
structural Rec X X when refl.isconst X.

(* deal with functions *)
structural Rec (X : A -> B) (Y: A -> B) <-
  (x:A -> dyn.call Rec (X x) (Y x)).

(* the essence: forward and backward destructuring *)
structural Rec X Y when refl.isbaseterm X <-
  refl.headargs X Hd Args,
  dyn.map Rec Args Args',
  refl.headargs Y Hd Args'.

structural Rec X Y when refl.isunif X, refl.isbaseterm Y <-
  refl.headargs Y Hd Args',
  dyn.map Rec Args Args',
  refl.headargs X Hd Args.


%extend generic.
fold : [A A'] (B -> A -> B -> prop) -> B -> A' -> B -> prop.

fold F Acc X Acc' when refl.isunif X <-
  guard X (dyn.call F Acc X Acc').

fold F Acc X Acc when refl.isconst X.

fold F Acc (X : A -> B) Acc' <-
  (x:A -> dyn.call F Acc (X x) Acc').

fold F Acc X Acc' when refl.isbaseterm X <-
  refl.headargs X HD Args,
  dyn.foldl F Acc Args Acc'.
%end.


eq_nounif : [A] A -> A -> prop.

eq_nounif (X : A) (Y : A)
  when refl.isunif X, refl.isunif Y, refl.decomposeunif X I XArgs, refl.decomposeunif Y I YArgs <-
  dyn.map eq_nounif XArgs YArgs.

eq_nounif X Y when refl.isconst X, refl.isconst Y <- eq X Y.

eq_nounif (X : A -> B) (Y : A -> B) <-
  (x:A -> dyn.call eq_nounif (X x) (Y x)).

eq_nounif X Y when refl.isbaseterm X, refl.isbaseterm Y <-
  refl.headargs X HD XArgs,
  refl.headargs Y HD YArgs,
  dyn.map eq_nounif XArgs YArgs.
