(* The equality typeclass *)
(* This shows one way to create a typeclass-like structure in Makam. *)

(* we will define the equivalent of: *)
(* class Eq A where
     eq : A -> A -> prop *)

(* create a type constructor 'eqT'; this is the equivalent the type part of the typeclass definition 'Eq A' *)
eqT : type -> type.

(* create a single constructor that packages together all the predicates that the typeclass defines *)
eqT : (A -> A -> prop) -> eqT A.

(* create a number of predicates for doing typeclass resolution and instantiation.
    eqT_lookup is used to look up an appropriate instance for a given type 
    eqT_instance is used to declare instances of the typeclass
    eqT_default is used to declare a fallback, default instance if no specialized instance is found. *)

eqT_lookup       : [A] eqT A -> prop.
eqT_instance     : [A] eqT A -> prop.
eqT_default      : [A] eqT A -> prop.

eqT_lookup Instance <-
  once (unless_many [
    not(refl.isunif Instance),
    eqT_instance Instance,
    eqT_default Instance
  ]).

(* The default case is to use the normal 'eq' predicate. *)
eqT_default (eqT eq).


(* Example of a function using the eqT typeclass:

   elem_aux : eqT A -> A -> list A -> prop.
   elem_aux (eqT EQ) X (HD :: TL) <- unless (EQ X HD) (elem_aux X TL).

   elem : eqT A -> A -> list A -> prop.
   elem EQ X L <- eqT_lookup EQ, elem_aux EQ X L.

    Note that the dependence on the type class is explicitly recorded in the type.
    If the argument is left unspecified, then we search for an instance of the type class automatically.
*)
