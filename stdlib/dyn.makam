(* Builtin definitions:

dyn : type.
dyn : A -> dyn.

*)

%extend dyn.

%extend private.
call_dyn : forall Z (A -> B -> prop) -> dyn -> dyn -> prop.
call_dyn P (dyn X) (dyn Y) <- forall.call P X Y.

call_dyn : forall Z (A -> B -> C -> prop) -> dyn -> dyn -> dyn -> prop.
call_dyn P (dyn X) (dyn Y) (dyn Z) <- forall.call P X Y Z.
%end.

map : forall Z (A -> B -> prop) -> list dyn -> list dyn -> prop.
map P L L' <- .map (private.call_dyn P) L L'.

foldl : forall Z (B -> A -> B -> prop) -> B -> list dyn -> B -> prop.
foldl P X L X' <- .foldl (private.call_dyn P) (dyn X) L (dyn X').

to_args : [A B] list dyn -> args A B -> prop.
to_args [] [].
to_args (dyn HD :: TL) (HD :: TL') :- to_args TL TL'.

from_args : [A B] args A B -> list dyn -> prop.
from_args [] [].
from_args (HD :: TL) (dyn HD :: TL') :- from_args TL TL'.
%end.
