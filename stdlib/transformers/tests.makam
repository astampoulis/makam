%use "init".

tests : testsuite.
%testsuite tests.

foo : string -> prop.

toplevel_command_transformer
  "foo-use-pattern-matching"
  (cmd_newclause Clause)
  (cmd_newclause Clause')
    when eq Clause (clause (foo X) Premise) :-
  eq Clause'
    (clause (foo Z)
                {prop| pattern_match X Z,
                       Premise |}).

(* The order of application of transformers is fixed:
   transformers defined first get applied first *)

toplevel_command_transformer
  "foo-second-transformer-applies-second"
    (cmd_newclause Clause)
    (cmd_newclause Clause')
      when eq Clause (clause (foo X) Premise) :-
    eq Clause' (clause (foo X) (ifte success Premise failure)).

foo "foo".

(* Make sure that clauses produced by staging are transformed. *)

`( eq (cmd_newclause (clause (foo "bar") success)) ).

>> foo X ?
>> Impossible.

>> foo "foo" ?
>> Yes.

>> foo "bar" ?
>> Yes.

>> refl.rules_get foo X ?
>> Yes:
>> X := [ clause (foo Z1) {prop| if success
                                 then (pattern_match "foo" Z1, success)
                                 else failure |},
          clause (foo Z2) {prop| if success
                                 then (pattern_match "bar" Z2, success)
                                 else failure |} ].
