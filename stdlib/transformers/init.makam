(* An experimental feature that gives the option of transforming
   top-level predicates and queries before issuing them to Makam.
   It works by turning all new clause and query commands to staged commands,
   which are transformed through `handle_toplevel_command`.

   This gives the ability to add new functionality to Makam
   by defining predicate transformers within Makam, which operate
   on all predicates and queries and transform them as needed.

   Potential examples of the functionality are mode definitions;
   a macro facility; and testing support (which currently has
   built-in support).

   An invariant that needs to hold for the transformers is that when
   doing "term transformations" (e.g. substitute one term for another,
   as part of a macro expansion transformer), these should happen identically
   between clauses and queries.

   To use this, one needs to register a new `toplevel_command_transformer`:

   ` toplevel_command_transformer Name Cmd Cmd' `

   For an example of use, look at tests.makam.

   In the future, this could be extended to handle all top-level
   commands rather than just new clauses and queries.

*)

toplevel_command_transformer : string -> cmd -> cmd -> prop.

do_transform : cmd -> clause -> cmd -> prop.

do_transform Cmd (clause (toplevel_command_transformer Name Cmd Cmd') Prem) Cmd' :-
  if (Prem)
  then success
  else (log_error_and_fail Cmd `failed to apply definition transformer ${Name}`).

do_transform Cmd (whenclause (toplevel_command_transformer Name Cmd Cmd') When Prem) Cmd' :-
  if (if When then Prem else failure)
  then success
  else (log_error_and_fail Cmd `failed to apply definition transformer ${Name}`).


%extend handle_toplevel_command.

needs_transform : cmd -> prop.
asis : cmd -> prop.
aux : cmd -> cmd -> prop.

needs_transform (cmd_newclause _).
needs_transform (cmd_query _).

asis (cmd_newterm _ _).
asis (cmd_none).

aux CmdInput CmdOutput :-
  refl.rules_get_applicable (toplevel_command_transformer Name CmdInput _) Rules,
  foldl do_transform CmdInput Rules CmdOutput.

%end.

handle_toplevel_command : cmd -> cmd -> prop.

handle_toplevel_command Cmd Cmd'
  when not(refl.isunif Cmd),
       handle_toplevel_command.needs_transform Cmd :-
    handle_toplevel_command.aux Cmd Cmd'.

handle_toplevel_command Cmd Cmd
  when not(refl.isunif Cmd),
       handle_toplevel_command.asis Cmd.

handle_toplevel_command Cmd _
  when refl.isunif Cmd :-
    log_error_and_fail Cmd `Staging code produced a command that is not concrete.`.

handle_toplevel_command Cmd Cmd'
  when not(refl.isunif Cmd),
       eq Cmd (cmd_stage Compute) :-
  eq Cmd' (cmd_stage (pfun result => ([Cmd0] Compute Cmd0, handle_toplevel_command Cmd0 result))).

handle_toplevel_command Cmd Cmd'
  when not(refl.isunif Cmd),
       eq Cmd (cmd_many Cmds) :-
  eq Cmd' (cmd_many Cmds'),
  map handle_toplevel_command Cmds Cmds'.

%command_handler handle_toplevel_command.
