%use "init".

tests : testsuite.
%testsuite tests.

(* Transformers apply to queries too.
   Since queries are not possible to observe programmatically,
   we use a snapshot test for making sure the transformation
   works as expected. *)

toplevel_command_transformer
  "print_when_querying"
    (cmd_query P)
    (cmd_query {prop| tostring P _S, log_info_do P "Query result follows" `Query: ${_S}`, P |}).

foo : string -> prop.

foo "foo".

foo X ?
foo "bar" ?

(* make sure that metavariables are generated hygienically,
   by using a metavariable which shares a name with one introduced
   by the transformation *)

(foo X, eq _S "foo\n", print_string _S) ?


(* make sure that a structural visit does not change unification variables in queries *)

structural_id, structural_id_cases : [A] A -> A -> prop.
structural_id X Y :-
  demand.case_otherwise (structural_id_cases X Y)
    (structural @structural_id X Y).

structural_id_cases X X when refl.isunif X.

toplevel_command_transformer
  "structural_visit"
    (cmd_query P)
    (cmd_query P') :- structural_id P P'.

foo S ?


(* make sure that queries produced by staging are also transformed *)

`( eq (cmd_query (foo S)) ).
