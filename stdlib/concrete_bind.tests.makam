%open concrete.
%extend stdlib_tests.

concrete_bind : testsuite. %testsuite concrete_bind.

term : type.
typ : type.
stringconst : string -> term.
function : (term -> term) -> term.
tfunction : (typ -> term) -> term.
letin : term -> bindone term term -> term.
globalvar : string -> term.

termvars, typvars : namespace.
namespace_for_variable (_: term) termvars.
namespace_for_variable (_: typ) typvars.

pick_var_prefix_userdef typvars "α".

handle_unresolved_var termvars ID (globalvar ID).

>> resolve (apply stringconst [ apply "foo" [] ]) X ?
>> Yes:
>> X := stringconst "foo".

>> resolve X (stringconst "foo") ?
>> Yes:
>> X := apply stringconst [apply "foo" [] ].

>> resolve (apply function [ lambda termvars "x" (var termvars "x") ]) X ?
>> Yes:
>> X := function (fun x => x).

>> resolve X (function (fun x => x)) ?
>> Yes:
>> X := apply function [lambda termvars "x1" (var termvars "x1")].

>> (pick_var_prefix_userdef termvars "z" ->
     resolve X (function (fun x => x))) ?
>> Yes:
>> X := apply function [lambda termvars "z1" (var termvars "z1")].

>> (pick_var_name_userdef termvars "z" ->
      resolve X (function (fun x => x))) ?
>> Yes:
>> X := apply function [lambda termvars "z" (var termvars "z")].

>> resolve X (function (fun x => (function (fun y => x)))) ?
>> Yes:
>> X := apply function [lambda termvars "x1" (apply function [lambda termvars "x2" (var termvars "x1")])].

>> resolve X (function (fun x => tfunction (fun a => x))) ?
>> Yes:
>> X := apply function [lambda termvars "x1" (apply tfunction [lambda typvars "α1" (var termvars "x1")])].

>> resolve (apply letin [apply stringconst [ apply "foo" [] ], bindone termvars "x" (var termvars "x")]) X ?
>> Yes:
>> X := letin (stringconst "foo") (bindone "x" (fun x => x)).

>> resolve X (letin (stringconst "foo") (bindone _ (fun x => letin (stringconst "bar") (bindone _ (fun y => y))))) ?
>> Yes:
>> X := apply letin [apply stringconst [apply "foo" []], bindone termvars "x1" (apply letin [apply stringconst [apply "bar" []], bindone termvars "x2" (var termvars "x2")])].

>> resolve (var termvars "some_global_var") X ?
>> Yes:
>> X := globalvar "some_global_var".

>> resolve X (globalvar "some_global_var") ?
>> Yes:
>> X := var termvars "some_global_var".

%end.
