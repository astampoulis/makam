nameofvar : A -> string -> prop.
infoofvar : V -> T -> prop.

(* Bind one variable of type A into a term of type B *)
(* Includes a string that represents the concrete name of the variable *)

bindone : type -> type -> type.
bind : string -> (A -> B) -> bindone A B.

%extend bindone.

varname : bindone A B -> string -> prop.

open : bindone A B -> (A -> B -> prop) -> prop.
apply : bindone A B -> A -> B -> prop.
pair : bindone A B -> bindone A C -> bindone A (B * C) -> prop.

open (bind Name (F : A -> B)) (P : A -> B -> prop) <-
  (x:A -> nameofvar x Name -> P x (F x)).

apply (bind _ F) X (F X).

varname (bind S _) S.

pair (bind Name F) (bind Name F') (bind Name F'') :-
  (x:A -> eq (F'' x) (F x, F' x)).

%end.


(* Bindmany: bind a number of A's into a B *)

bindmany : type -> type -> type.
bind : string -> (A -> bindmany A B) -> bindmany A B.
body : B -> bindmany A B.

%extend bindmany.

varnames : bindmany A B -> list string -> prop.

open : bindmany A B -> (list A -> B -> prop) -> prop.
apply : bindmany A B -> list A -> B -> prop.
applysome : bindmany A B -> list A -> bindmany A B -> prop.
pair : bindmany A B -> bindmany A C -> bindmany A (B * C) -> prop.

open (body Body) P :- P [] Body.
open (bind Name (F : A -> bindmany A B)) (P : list A -> B -> prop) <-
  (x:A -> nameofvar x Name -> open (F x) (pfun l => P (x :: l))).

apply (body Body) [] Body.
apply (bind _ F) (HD :: TL) Result :- apply (F HD) TL Result.

applysome (bind _ F) (HD :: TL) Result :- applysome (F HD) TL Result.
applysome X [] X.

varnames XS_Body Names :-
  open XS_Body (pfun XS Body => map nameofvar XS Names).

pair (body Body) (body Body') (body (Body, Body')).
pair (bind Name F) (bind Name F') (bind Name F'') :-
  (x:A -> pair (F x) (F' x) (F'' x)).

%end.


(* VBindmany: GADT version of bindmany, analogous to list vs. vector *)

vbindmany : type -> type -> type -> type.

%extend vbindmany.

body : BodyType -> vbindmany VarType zero BodyType.
bind : string -> (VarType -> vbindmany VarType N BodyType) -> vbindmany VarType (succ N) BodyType.

varnames : [N] vbindmany VarType N BodyType -> vector string N -> prop.
open : [N] vbindmany VarType N BodyType -> (vector VarType N -> BodyType -> prop) -> prop.
apply : [N] vbindmany VarType N BodyType -> vector VarType N -> BodyType -> prop.
pair : [N] vbindmany VarType N BodyType -> vbindmany VarType N BodyType' -> vbindmany VarType N (BodyType * BodyType') -> prop.

open (bind ID (F: VarType -> A)) P :-
  (x:VarType -> nameofvar x ID -> open (F x) (pfun vars body => P (x :: vars) body)).
open (body Body) P :- P [] Body.

apply (bind _ F) (HD :: TL) Result :- apply (F HD) TL Result.
apply (body Body) [] Body.

varnames XS_Body Names :-
  open XS_Body (pfun XS Body => vector.map nameofvar XS Names).

pair (bind ID (F : VarType -> A)) (bind ID F') (bind ID F'') :-
  (x:VarType -> pair (F x) (F' x) (F'' x)).
pair (body Body1) (body Body2) (body (Body1, Body2)).

%end.
