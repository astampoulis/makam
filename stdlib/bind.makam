nameofvar : A -> string -> prop.
infoofvar : V -> T -> prop.

(* Bind one variable of type A into a term of type B *)
(* Includes a string that represents the concrete name of the variable *)

bindone : type -> type -> type.
bind : string -> (A -> B) -> bindone A B.

%extend bindone.
(* list for multiple bindone's *)
hlist : type -> type -> type.
%end.

nil : bindone.hlist A t_nil.
cons : bindone A B -> bindone.hlist A C -> bindone.hlist A (t_cons B C).

%extend bindone.

newvar : bindone A B -> (A -> prop) -> prop.
varname : bindone A B -> string -> prop.
apply : bindone A B -> A -> B -> prop.
openmany : [B] bindone.hlist A B -> (A -> .hlist B -> prop) -> prop.

newvar (bind Name (F : A -> B)) (P : A -> prop) <-
  (x:A -> nameofvar x Name -> P x).

apply (bind _ F) X (F X).

varname (bind S _) S.

openmany_aux : [B] bindone.hlist A B -> A -> string -> (A -> .hlist B -> prop) -> prop.
openmany_aux [] X _ P :- P X [].
openmany_aux (bind S X_Body :: Rest) X S P :-
  eq (X_Body X) Body,
  openmany_aux Rest X S (pfun x t => (nameofvar x S -> P x (Body :: t))).

openmany (Binds: bindone.hlist A B) P when eq Binds (HD :: TL) :-
  newvar HD (pfun X => openmany_aux Binds X S P).

open : bindone A B -> (A -> B -> prop) -> prop.
open F P <- openmany [F] (pfun X [Body] => P X Body).

%end.


(* Bindmany: bind a number of A's into a B *)

bindmany : type -> type -> type.
bind : string -> (A -> bindmany A B) -> bindmany A B.
body : B -> bindmany A B.

%extend bindmany.
(* list for multiple bindmany's *)
hlist : type -> type -> type.
%end.

nil : bindmany.hlist A t_nil.
cons : bindmany A B -> bindmany.hlist A C -> bindmany.hlist A (t_cons B C).

%extend bindmany.

newvars : bindmany A B -> (list A -> prop) -> prop.
varnames : bindmany A B -> list string -> prop.
apply : bindmany A B -> list A -> B -> prop.
applysome : bindmany A B -> list A -> bindmany A B -> prop.
openmany : [B] bindmany.hlist A B -> (list A -> .hlist B -> prop) -> prop.

newvars (body _) P :- P [].
newvars (bind Name (F : A -> B)) (P : list A -> prop) <-
  (x:A -> nameofvar x Name -> newvars (F x) (pfun l => P (x :: l))).

apply (body Body) [] Body.
apply (bind _ F) (HD :: TL) Result :- apply (F HD) TL Result.

applysome (bind _ F) (HD :: TL) Result :- applysome (F HD) TL Result.
applysome X [] X.

varnames XS_Body Names :-
  newvars XS_Body (pfun XS => map nameofvar XS Names).

openmany_aux : [B] bindmany.hlist A B -> list A -> list string -> (list A -> .hlist B -> prop) -> prop.
openmany_aux [] XS _ P :- P XS [].
openmany_aux (XS_HD :: TL) XS Names P :-
  varnames XS_HD Names,
  apply XS_HD XS HD,
  openmany_aux TL XS Names (pfun xs TL_open => P xs (HD :: TL_open)).

openmany (Binds: bindmany.hlist A B) P when eq Binds (HD :: TL) :-
  newvars HD (pfun XS => openmany_aux Binds XS Names P).

open : bindmany A B -> (list A -> B -> prop) -> prop.
open F P <- openmany [F] (pfun XS [Body] => P XS Body).

%end.
