%extend pretty.

pretty: testsuite. %testsuite pretty.

(* Unit tests. *)

>> pretty (const "s") unit X ?
>> Yes:
>> X := some "s".

>> pretty (anychar) "." X ?
>> Yes:
>> X := some ".".

>> pretty (anychar) "" X ?
>> Yes:
>> X := none.

>> pretty (anychar) "ab" X ?
>> Yes:
>> X := none.

>> pretty (charclass "abc") "a" X ?
>> Yes:
>> X := some "a".

>> pretty (charclass "abc") "d" X ?
>> Yes:
>> X := none.

>> pretty empty unit X ?
>> Yes:
>> X := some "".

>> pretty void _ X ?
>> Yes:
>> X := none.

>> pretty (many (charclass "abc")) [ "a", "c", "b", "a" ] X ?
>> Yes:
>> X := some "acba".

>> pretty (many (charclass "abc")) [] X ?
>> Yes:
>> X := some "".

>> pretty (choices [ charclass "!", charclass "abc" ]) "a" X ?
>> Yes:
>> X := some "a".

unapply_test : type.
constr_a : string -> unapply_test.
constr_b : string -> unapply_test.

>> pretty (unapply constr_a [ captured anychar ]) (constr_a "a") X ?
>> Yes:
>> X := some "a".

>> pretty (unapply constr_a [ captured anychar ]) (constr_b "b") X ?
>> Yes:
>> X := none.

>> pretty (unapply constr_a [ const "<", captured anychar, const ">" ]) (constr_a "a") X ?
>> Yes:
>> X := some "<a>".

(* Integration test. *)

term : type.
lam : string -> term -> term.
app : term -> term -> term.
var : string -> term.

term : int -> pretty term.
ident : pretty string.

rule ident (charclass "abcdefghijklmnopqrstuvwxyz").

rule (term 0) (unapply lam [ const "λ", captured ident, const ".", captured (term 0) ]).
rule (term 0) (term 1).

rule (term 1) (unapply app [ captured (term 2), const " ", captured (term 2) ]).
rule (term 1) (term 2).

rule (term 2) (unapply var [ captured ident ]).
rule (term 2) (unapply (fun x => x) [ const "(", captured (term 0), const ")" ]).

>> pretty (term 0) (lam "x" (app (var "x") (app (var "z") (lam "x" (var "x"))))) X ?
>> Yes:
>> X := some "λx.x (z (λx.x))".

%end.
