%extend pretty.

pretty: testsuite. %testsuite pretty.

term : type.
lam : string -> term -> term.
app : term -> term -> term.
var : string -> term.

term : int -> pretty term.
ident : pretty string.

rule ident (charclass "abcdefghijklmnopqrstuvwxyz").

rule (term 0) (unapply lam [ const "λ", captured ident, const ".", captured (term 0) ]).
rule (term 0) (term 1).

rule (term 1) (unapply app [ captured (term 2), const " ", captured (term 2) ]).
rule (term 1) (term 2).

rule (term 2) (unapply var [ captured ident ]).
rule (term 2) (unapply (fun x => x) [ const "(", captured (term 0), const ")" ]).

>> pretty (term 0) (lam "x" (app (var "x") (app (var "z") (lam "x" (var "x"))))) X ?
>> Yes:
>> X := some "λx.x (z (λx.x))".

%end.
