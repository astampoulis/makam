pretty : type -> type.

const : string -> pretty unit.
anychar : pretty string.
charclass : string -> pretty string.
empty : pretty unit.
void : pretty A.
many : pretty A -> pretty (list A).
choices : list (pretty A) -> pretty A.

pretty_args : type -> type -> type.
pretty_captured : type -> type.
captured : pretty A -> pretty_captured A.

nil : pretty_args A A.
cons : pretty unit -> pretty_args A B -> pretty_args A B.
cons : pretty_captured A -> pretty_args B C -> pretty_args (A -> B) C.

unapply : A -> pretty_args A B -> pretty B.

(* untransform is a little weird:
   A is a type of the form Arg1 -> Arg2 -> ... -> B -> prop.
   (as evidenced by the range of `pretty_args`)
   however, `B` is the input parameter, and the `Arg`s are the output parameters. *)
untransform : A -> pretty_args A (B -> prop) -> pretty B.

pretty : [A] pretty A -> A -> option string -> prop.

builtin : [A] pretty A -> prop.
rule : [A] pretty A -> pretty A -> prop.

builtin (const _).
builtin (anychar).
builtin (charclass _).
builtin (empty).
builtin (void).
builtin (many _).
builtin (unapply _ _).
builtin (choices _).
builtin (untransform _ _).

pretty (const S) unit (some S).

pretty (anychar) X Res :-
  if (string.headtail X HD "")
  then eq Res (some X)
  else eq Res none.

pretty (charclass S) X Res :-
  if string.contains S X then
    eq Res (some X)
  else eq Res none.

pretty empty unit (some "").

pretty void _ none.

pretty (many P) [] (some "").
pretty (many P) (HD :: TL) Res :-
  if (pretty P HD (some S_HD))
  then (if pretty (many P) TL (some S_TL)
  then (string.append S_HD S_TL S, eq Res (some S))
  else eq Res none)
  else eq Res none.

pretty_args : [A B] pretty_args A B -> args A B -> option string -> prop.
pretty_args [] [] (some "").
pretty_args ((HD : pretty A) :: TL) Args Res :-
  if (pretty HD unit (some S_HD))
  then (if (pretty_args TL Args (some S_TL))
  then (string.append S_HD S_TL S, eq Res (some S))
  else eq Res none)
  else eq Res none.
pretty_args ((captured HD) :: TL) (HD' :: TL') Res :-
  if (pretty HD HD' (some S_HD))
  then (if (pretty_args TL TL' (some S_TL))
  then (string.append S_HD S_TL S, eq Res (some S))
  else eq Res none)
  else eq Res none.

fresh_args : [A B] pretty_args A B -> args A B -> prop.
fresh_args [] [].
fresh_args ((HD : pretty A) :: TL) Args :- fresh_args TL Args.
fresh_args ((captured HD) :: TL) (HD' :: TL') :- fresh_args TL TL'.

pretty (unapply F PrettyArgs) Term Res :-
  fresh_args PrettyArgs Args,
  if (args.apply F Args Term)
  then (pretty_args PrettyArgs Args Res)
  else (eq Res none).

pretty (untransform F PrettyArgs) B Res :-
  fresh_args PrettyArgs Args,
  args.apply F Args F_Args,
  if (F_Args B)
  then (pretty_args PrettyArgs Args Res)
  else eq Res none.

pretty (choices []) _ none.

pretty (choices (HD :: TL)) Term Res :-
  if (pretty HD Term (some S))
  then (eq Res (some S))
  else (pretty (choices TL) Term Res).

get_pretty_definition : pretty A -> pretty A -> prop.

get_pretty_definition P Res when not(builtin P) :-
  refl.assume_get_applicable (rule P P') Rules0,
  refl.rules_get_applicable (rule P P') Rules1,
  append Rules0 Rules1 Rules,
  map (pfun def res => [Def Loc LocS Guard]
    (clause.get_goal def (rule P Def),
     clause.get_guard def Guard,
     Guard, clause.premise def,
     eq res Def))
  Rules Defs,
  eq Res (choices Defs).

pretty P Term Res :-
  get_pretty_definition P P',
  pretty P' Term Res.
