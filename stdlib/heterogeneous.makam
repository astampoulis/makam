bind : type -> type -> type -> type.

%extend bind.

body : BodyType -> bind VarType t_nil BodyType.
binder : string -> (VarType -> bind VarType AllVars BodyType) -> bind VarType (t_cons VarType AllVars) BodyType.

open : [AllVars] bind VarType AllVars BodyType -> (hlist AllVars -> BodyType -> prop) -> prop.
apply : [AllVars] bind VarType AllVars BodyType -> hlist AllVars -> BodyType -> prop.
pair : [AllVars] bind VarType AllVars BodyType -> bind VarType AllVars BodyType' -> bind VarType AllVars (BodyType * BodyType') -> prop.

open (binder ID (F: VarType -> A)) P :-
  (x:VarType -> nameofvar x ID -> open (F x) (pfun vars body => P (x :: vars) body)).

open (body Body) P :- P [] Body.

apply (binder _ F) (HD :: TL) Result :- apply (F HD) TL Result.
apply (body Body) [] Body.

pair (binder ID (F : VarType -> A)) (binder ID F') (binder ID F'') :-
  (x:VarType -> pair (F x) (F' x) (F'' x)).

pair (body Body1) (body Body2) (body (Body1, Body2)).

%end.
