args : type -> type -> type.
nil : args A A.
cons : A -> args B C -> args (A -> B) C.

%extend args.
apply : [A] A -> args A B -> B -> prop.
apply X [] X.
apply X (HD :: TL) X' :- apply (X HD) TL X'.
%end.

%extend dyn.
to_args : [A B] list dyn -> args A B -> prop.
to_args [] [].
to_args (dyn HD :: TL) (HD :: TL') :- to_args TL TL'.

from_args : [A B] args A B -> list dyn -> prop.
from_args [] [].
from_args (HD :: TL) (dyn HD :: TL') :- from_args TL TL'.
%end.

hlist : type -> type.
nil : hlist unit.
cons : A -> hlist B -> hlist (A * B).

bind : type -> type -> type -> type.

%extend bind.

body : BodyType -> bind VarType unit BodyType.
binder : string -> (VarType -> bind VarType AllVars BodyType) -> bind VarType (VarType * AllVars) BodyType.

open : [AllVars] bind VarType AllVars BodyType -> (hlist AllVars -> BodyType -> prop) -> prop.
apply : [AllVars] bind VarType AllVars BodyType -> hlist AllVars -> BodyType -> prop.
pair : [AllVars] bind VarType AllVars BodyType -> bind VarType AllVars BodyType' -> bind VarType AllVars (BodyType * BodyType') -> prop.

open (binder ID (F: VarType -> A)) P :-
  (x:VarType -> nameofvar x ID -> open (F x) (pfun vars body => P (x :: vars) body)).

open (body Body) P :- P [] Body.

apply (binder _ F) (HD :: TL) Result :- apply (F HD) TL Result.
apply (body Body) [] Body.

pair (binder ID (F : VarType -> A)) (binder ID F') (binder ID F'') :-
  (x:VarType -> pair (F x) (F' x) (F'' x)).

pair (body Body1) (body Body2) (body (Body1, Body2)).

%end.
