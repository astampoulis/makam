%extend stdlib_tests.

(* ------------------- builtins *)

builtins : testsuite.

testcase builtins :- not(refl.open_constraints X).
testcase builtins :- guard X success, refl.open_constraints X.
testcase builtins :- guard X success, not(refl.open_constraints Y).
testcase builtins :- guard X success, eq X "foo", not(refl.open_constraints X).

(* ------------------- eqv *)

icase : type.
icase : string -> icase.
eqv (icase S1) (icase S2) :- string.uppercase S1 S1', string.uppercase S2 S2', eq S1' S2'.


(* ------------------- list *)


list : testsuite.

testcase list :- (contains 1 [1,2,3]).
testcase list :- (contains 2 [1,2,3]).
testcase list :- (not(contains 4 [1,2,3])).
testcase list :- contains (icase "LaLa") [icase "lala"].


(* ------------------- set *)


set : testsuite.

testcase set :- (set.remove [1,2,3,4] 1 R, eq R [2,3,4]).
testcase set :- (set.remove [2,3,4,1] 1 R, eq R [2,3,4]).
testcase set :- (set.remove [1,2,3,4,1] 1 R, eq R [2,3,4]).
testcase set :- (not(set.remove [2,3,4] 1 R)).
testcase set :- (not(set.remove [] X R)).

testcase set :- (set.member [1,2,3,4] 1 _).
testcase set :- (set.member [2,3,4,1] 1 _).
testcase set :- (not(set.member [2,3,4] 1 _)).
testcase set :- (set.member [1,2,3,4,1] 1 X, not(set.member X 1 _)).
testcase set :- (set.member [1,2,3,4,1] 1 X, set.member X 2 _).

testcase set :- (set.ccons 1 [1,2,3,4] X, eq X [1,2,3,4]).
testcase set :- (set.ccons 1 [1,2,3,4,1] X, eq X [1,2,3,4,1]).
testcase set :- (set.ccons 1 [2,3,4,1] X, eq X [2,3,4,1]).
testcase set :- (set.ccons 1 [2,3,4,2] X, eq X [1,2,3,4,2]).

testcase set :- (eqv 1 1).
testcase set :- (eqv A A).
testcase set :- (eqv ([1,2,3,4,1]: set A) [4,3,1,2]).
testcase set :- not(eqv ([1,2,3,4,1]: set A) [1]).
testcase set :- (eqv ([1,1]: set A) [1,1,1,1,1,1,1,1]).
testcase set :- (not(eqv ([1,1]: set A) [2,3,4])).
testcase set :- (eqv ([[1,1], [1,2,3], [3,2,1]]: set (set A)) [[1],[1,2,3]]).

testcase set :- (set.merge [] [1,2,3,4] X, eqv X [1,2,3,4]).
testcase set :- (set.merge [1,2] [3,4] X, eqv X [1,2,3,4]).
testcase set :- (set.merge [1,2,3] [2,3,4] X, eqv X [1,2,3,4]).
testcase set :- (set.merge [1,2,3,4] [1,2,3,4] X, eqv X [1,2,3,4]).
testcase set :- (set.merge [([1,2,3] : set int), [1,1]] [[1,2],[1,1]] X, eqv X [[1], [1,2], [1,2,3]]).

testcase set :- (set.diff [] [1] X, eqv X []).
testcase set :- (set.diff [1,1] [1] X, eqv X []).
testcase set :- (set.diff [2,1] [1] X, eqv X [2]).
testcase set :- (set.diff [1,2,3,4,2,3,4] [2,3] X, eqv X [1,4]).

testcase set :- (set.to_list [1,2,3,4,1] X, eq X [1,2,3,4]).
testcase set :- (set.to_list [1,1,1,1,1] X, eq X [1]).

(* ------------------- map *)


map : testsuite.

testcase map :- (map.remove [("hello", 1)] "hello" R1 R2, eq R1 1, eq R2 []).
testcase map :- (map.remove [("hello", 1), ("foo", 2)] "hello" R1 R2, eq R1 1, eq R2 [("foo", 2)]).
testcase map :- (not(map.remove [("hello", 1)] "foo" R1 R2)).

testcase map :- (map.remove_if_member [("hello", 1)] "hello" R, eq R []).
testcase map :- (map.remove_if_member [("hello", 1), ("foo", 2)] "hello" R, eq R [("foo", 2)]).
testcase map :- (map.remove_if_member [("hello", 1)] "foo" [("hello", 1)]).

testcase map :- (eqv ([("hello", 1), ("foo", 2)] : map A B) [("foo", 2), ("hello", 1)]).
testcase map :- (not(eqv ([("hello", 1), ("foo", 2)] : map A B) [("hello", 2), ("foo", 2)])).
testcase map :- (eqv ([(icase "hello", 1), (icase "foo", 2)] : map A B) [(icase "Foo", 2), (icase "HELLO", 1)]).
testcase map :- (eqv ([(icase "hello", icase "a"), (icase "foo", icase "b")] : map A B) [(icase "Foo", icase "B"), (icase "HELLO", icase "A")]).

testcase map :- (map.add_new [("hello", 1)] ("foo", 2) R, eqv R [("hello", 1), ("foo", 2)]).
testcase map :- (not(map.add_new [("hello", 1)] ("hello", 2) R)).

testcase map :- (map.add_or_update [("hello", 1)] ("foo", 2) R, eqv R [("hello", 1), ("foo", 2)]).
testcase map :- (map.add_or_update [("hello", 1)] ("hello", 2) R, eqv R [("hello", 2)]).


(* ------------------- reify *)


reify : testsuite.

term : type.
unit : term.
app : term -> term -> term.
lam : (term -> term) -> term.
freevar : string -> term.

testcase reify :- reify "lala" X, eq X (reified.const "lala").
testcase reify :- reify unit X, eq X (reified.term unit []).
testcase reify :- reify (app unit unit) X, eq X (reified.term app [reified.term unit [], reified.term unit []]).
testcase reify :- reify (fun (x: term) => "a") X, eq X (reified.lambda (fun x => reified.const "a")).
testcase reify :- reify (fun (x: term) => x) X, eq X (reified.lambda (fun x => reified.bvar x [])).
testcase reify :- (z:term -> (reify z (X z), eq (X z) (reified.nvar z []))).
testcase reify :- (z:(term->term) -> (reify z (X z), eq (X z) (reified.nvar z []))).
testcase reify :- (x:(string->string->string) -> y:string -> (reify (x y) (X x y), eq (X x y) (reified.lambda (fun z => reified.nvar x [reified.nvar y [], reified.bvar z []])))).
testcase reify :- reify app X, eq X (reified.lambda (fun a => reified.lambda (fun b => reified.term app [reified.bvar a [], reified.bvar b []]))).
testcase reify :- reify X R, eq R (reified.unifvar I [] 0 X).
testcase reify :- (x:term -> ([X R] reify X R, eq R (reified.unifvar I [] 1 X))).
testcase reify :- reify (X, X) R, eq R (reified.term tuple [reified.unifvar I1 [] 0 X, reified.unifvar I2 [] 0 X]), eq I1 I2.
testcase reify :- reify (X, Y) R, eq R (reified.term tuple [reified.unifvar I1 [] 0 X, reified.unifvar I2 [] 0 Y]), not(eq I1 I2).
testcase reify :- reify (fun (x:term->term) => x) R, eq R (reified.lambda (fun b => reified.bvar b [])).
testcase reify :- reify (fun (x:term) => E x) R, eq R (reified.lambda (fun x => reified.unifvar I [reified.bvar x []] 0 (E x))).

(* TODO: testcases for reflect *)
(* TODO: testcases for reflect . reify *)

testcase reify :- reify lam X, reflect X Q, eq Q lam.

(* double reify and reflect *)
testcase reify :- eq X0 lam, reify X0 X1, reify X1 X2, reflect X2 X3, reflect X3 X4, eq X4 lam.
testcase reify :- (z:term -> ([X0 X1 X2 X3 X4](eq X0 (fun (w:term->term) => z), reify X0 X1, reify X1 X2, reflect X2 X3, reflect X3 X4, eq X4 X0))).
testcase reify :- (z:term -> ([X0 X1 X2 X3 X4](eq X0 (fun (w:term->term) => w), reify X0 X1, reify X1 X2, reflect X2 X3, reflect X3 X4, eq X4 X0))).
testcase reify :- (z:term -> ([X0 X1 X2 X3 X4](eq X0 (fun (w:term->term) => w z), reify X0 X1, reify X1 X2, reflect X2 X3, reflect X3 X4, eq X4 X0))).
testcase reify :- (z:(term -> term) -> ([X0 X1 X2 X3 X4](eq X0 (fun (w:(term->term)->term) => w z), reify X0 X1, reify X1 X2, reflect X2 X3, reflect X3 X4, eq X4 X0))).


testcase reify :-
  eq Term (fun z => app (lam (fun x => app E1 (E2 x))) (app z (freevar "test"))),
  eq Reified (fun z =>
             (reified.term app [
              reified.term lam [
                reified.lambda (fun x =>
                  reified.term app [
                    reified.unifvar Index1 [] 0 E1,
                    reified.unifvar Index2 [reified.bvar x []] 0 (E2 x)
                  ]
                )
              ],
              reified.term app [
                reified.nvar z [],
                reified.term freevar [reified.const "test"]
              ]
            ])),
  (z:term -> (reify (Term z) (R z),
              eq (R z) (Reified z),
              not(eq Index1 Index2),
              reflect (R z) (Term' z),
              eq_nounif (Term z) (Term' z),
              reify (Term' z) (R' z),
              eq_nounif (R z) (R' z))).

testcase reify :-
  eq Term (fun z => app (lam (fun x => app E1 (E2 x))) (app z (freevar "test"))),
  eq Reified (fun z =>
             (reified.term app [
              reified.term lam [
                reified.lambda (fun x =>
                  reified.term app [
                    reified.unifvar _ [] 0 E1,
                    reified.unifvar _ [reified.bvar x []] 0 (E2 x)
                  ]
                )
              ],
              reified.term app [
                reified.nvar z [],
                reified.term freevar [reified.const "test"]
              ]
            ])),
  (z:term -> (reflect (Reified z) (T z),
              eq_nounif (T z) (Term z),
              reify (T z) (Reified' z),
              eq (Reified' z) (Reified z))).


(* ------------------- unif_alpha_eqv *)


testcase reify :- unif_alpha_eqv (X: string) (Y: string).
testcase reify :- not(unif_alpha_eqv (dyn (X: string)) (dyn (Y: int))).
testcase reify :- unif_alpha_eqv (lam X) (lam Y).
testcase reify :- not(unif_alpha_eqv (app X Y) (app W W)).
testcase reify :- not({prop|(x:term -> ([With_x] unif_alpha_eqv (With_x: term) (Without_x: term))) |}).


(* ------------------- pattern_match *)

pattern_match : testsuite. %testsuite pattern_match.

>> pattern_match (app E1 E2) (app (freevar "a") (freevar "b")) ?
>> Yes:
>> E1 := freevar "a",
>> E2 := freevar "b".

>> pattern_match (app E1 E2) (app A B) ?
>> Yes:
>> A := A,
>> B := B,
>> E1 := A,
>> E2 := B.

>> pattern_match (app E1 E2) A ?
>> Impossible.

>> pattern_match (app E E) (app X1 X2) ?
>> Yes:
>> E := E,
>> X1 := E,
>> X2 := E.

>> pattern_match (app (lam F) E) (app X1 X2) ?
>> Impossible.

>> pattern_match (app (lam F) E) (app (lam G) X2) ?
>> Yes:
>> F := F,
>> E := E,
>> G := F,
>> X2 := E.

let_in : term -> (term -> term) -> term.

>> pattern_match (let_in A B) (let_in (app (freevar "a") (freevar "b"))
                                   (fun x => app x unit)) ?
>> Yes:
>> A := app (freevar "a") (freevar "b"),
>> B := fun x => app x unit.


(* ------------------- string *)

>> string.concat [ "foo", "bar" ] X ?
>> Yes:
>> X := "foobar".

>> string.concat [] X ?
>> Yes:
>> X := "".

>> string.concat [ "foo", X ] "foobar" ?
>> Yes:
>> X := "bar".

>> string.concat [ X, "bar" ] "foobar" ?
>> Yes:
>> X := "foo".

>> string.concat [ X, "bar" ] "foobaz" ?
>> Impossible.

>> string.concat [ "fo", X, "ar" ] "foobar" ?
>> Yes:
>> X := "ob".

>> string.concat [ F, "o", O, "b", A, "r", Z ] "foobar" ?
>> Yes:
>> F := "f",
>> O := "o",
>> A := "a",
>> Z := "".

>> eqv `hello${X}world!` `hello world!` ?
>> Yes:
>> X := " ".

>> eqv `hello world!` `hello${X}world!` ?
>> Yes:
>> X := " ".

>> eqv `hello ${"world"}!` `hello world!` ?
>> Yes.

>> ((pfun x => eqv `hello ${x}!` `hello world!`) X) ?
>> Yes:
>> X := "world".

(* ------------------- dependent bind *)

bind : testsuite. %testsuite bind.

>> dyn.eq (bind.binder "x" (fun (x: string) => bind.binder "y" (fun (y: string) => bind.body x))) (_: bind string (string * string * unit) string) ?
>> Yes.

>> bind.open (bind.binder "x" (fun (x: string) => bind.binder "y" (fun (y: string) => bind.body `${x}${y}`))) (pfun x_y body => ([A B] eq x_y [A, B], eq body `${A}${B}`)) ?

>> bind.apply (bind.binder "x" (fun (x: string) => bind.binder "y" (fun (y: string) => bind.body `${x}${y}`))) ["a","b"] X ?
>> Yes:
>> X := `${"a"}${"b"}`.

>> bind.pair (bind.binder "x" (fun (x: string) => bind.binder YName (fun (y: string) => bind.body 1))) (bind.binder XName (fun (x: string) => bind.binder "y" (fun (y: string) => bind.body "foo"))) X ?
>> Yes:
>> X := bind.binder "x" (fun (x: string) => bind.binder "y" (fun (y: string) => bind.body (1, "foo"))),
>> XName := "x",
>> YName := "y".

(* ------------------- structural *)

structural : testsuite. %testsuite structural.

change, change_ : [A] A -> A -> prop.
change_ : [A] A -> A -> prop.

change X Y <-
  demand.case_otherwise (change_ X Y)
                        (structural change X Y).

change_ "a" "b".
change_ X Y <- plus X 1 Y.

>> change ("a", 15, (fun (x : string) => x), (fun (x : string) => 12)) Y ?
>> Yes:
>> Y := ("b", 16, (fun (x : string) => x), (fun (x : string) => 13)).

%end.
