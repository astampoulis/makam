%extend peg.

parsing : testsuite. %testsuite parsing.

>> parse_opt (bind anychar (fun a => seq (charclass " \n\t") (action a))) "a " Res ?
>> Yes:
>> Res := ("a", "").

>> parse_opt (bind anychar (fun a => seq (charclass " \n\t") (action a))) "a !" Res ?
>> Yes:
>> Res := ("a", "!").

rep : peg A -> peg (list A).

rule (rep P) (bind P (fun hd => bind (rep P) (fun tl => action (hd :: tl)))).
rule (rep P) (action []).

>> parse_opt (rep (exact "hi")) "hihi" Res ?
>> Yes:
>> Res := ([ "hi", "hi" ], "").

repplus : peg A -> peg (list A).

rule (repplus P) (bind P (fun hd => bind (fastrep P) (fun tl => action (hd :: tl)))).

whitespace : peg unit.
rule whitespace (seq (repplus (charclass " \n\t")) (action unit)).

>> parse_opt (seq whitespace (action unit)) "   return " Res ?
>> Yes:
>> Res := (unit, "return ").

option : peg A -> peg (option A).
rule (option P) (bind P (fun res => action (some res))).
rule (option P) (action none).

token : peg A -> peg A.
rule (token P) (seq (option whitespace) P).

>> parse_opt (seq (token (exact "return")) (token (exact "true"))) " return true " Res ?
>> Yes:
>> Res := ("true", " ").

ident : type.
ident : list string -> ident.

ident : peg ident.
identfirst, identrest : peg string.

rule identfirst (charclass "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZαβγδεζηθικμνξοπρστυφχψωΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩάέήίύόώ_").
rule identrest (charclass "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZαβγδεζηθικλμνξοπρστυφχψωΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩάέήίύόώ_1234567890'").

rule ident (bind identfirst (fun hd => bind (fastrep identrest) (fun tl => action (ident (hd :: tl))))).

cterm : type.
clam : ident -> cterm -> cterm.
cvar : ident -> cterm.
capp : cterm -> list cterm -> cterm.

cterm, cterm0, cterm1, cterm2 : peg cterm.

rule cterm cterm0.

rule cterm0 (seq (token (exact "λ")) (bind (token ident) (fun var => seq (token (exact "."))
                 (bind cterm0 (fun body => action (clam var body)))))).

rule cterm0 cterm1.

rule cterm1 (bind cterm2 (fun hd => bind (repplus (seq whitespace cterm2)) (fun tl => action (capp hd tl)))).

rule cterm1 cterm2.

rule cterm2 (bind (token ident) (fun var => action (cvar var))).

rule cterm2 (seq (token (exact "(")) (bind cterm0 (fun t => seq (token (exact ")")) (action t)))).

`( def_parser_js cterm ).

>> parse_opt cterm "λ x.x" Res ?
>> Yes:
>> Res := (clam (ident ["x"]) (cvar (ident ["x"])), "").

>> parse_opt cterm "λf.λg.λx.f (g x)" Res ?
>> Yes:
>> Res := ((clam (ident (cons "f" nil)) (clam (ident (cons "g" nil)) (clam (ident (cons "x" nil)) (capp (cvar (ident (cons "f" nil))) (cons (capp (cvar (ident (cons "g" nil))) (cons (cvar (ident (cons "x" nil))) nil)) nil))))), "").

>> parse_opt ident "kalimera" Res ?
>> Yes:
>> Res := (ident ["k", "a", "l", "i", "m", "e", "r", "a"], "").

>> parse_opt cterm "λ καλημέρα. κόσμε" Res ?
>> Yes:
>> Res := (clam (ident ["κ", "α", "λ", "η", "μ", "έ", "ρ", "α"]) (cvar (ident ["κ", "ό", "σ", "μ", "ε"])), "").

>> (parse_opt (bind anychar (fun a => bind anychar (fun b => action (fun s => {prop| string.explode s [b, a] |})))) "hi" (_DoIt, Rest), _DoIt S) ?
>> Yes:
>> S := "ih",
>> Rest := "".

>> (parse_opt (bind anychar (fun a => bind anychar (fun b => action (`${b}${a}`)))) "hi" (Exp, Rest), expansion.str Exp S) ?
>> Yes:
>> S := "ih",
>> Rest := "".

>> parse_opt (action (fun (x: string) => x)) "" (X, _) ?
>> Yes:
>> X := (fun (x: string) => x).

testlam : peg cterm.
hoaslam : (cterm -> cterm) -> cterm.

>> parse_opt (action (hoaslam (fun x => hoaslam (fun y => (capp x [capp y [cvar (ident ["y"])]]))))) "" (X, _) ?
>> Yes:
>> X := hoaslam (fun x => hoaslam (fun y => (capp x [capp y [cvar (ident ["y"])]]))).

>> (eq _OPEN "λ  hello  . λ world . λ  hello  . λ world . ",
    eq _WHITESPACE "                                                                                   ",
    expansion.str `   hello   ` _BODY,
    expansion.str `${_OPEN} (${_WHITESPACE} ${_OPEN} (${_WHITESPACE} ${_OPEN} (
                   ${_OPEN} (
                   ${_WHITESPACE}
                   ${_WHITESPACE}
                   ${_BODY}) ${_BODY}) ${_BODY}) ${_BODY})` _STR,
    parse_opt cterm _STR _X) ?
>> Yes.

(* eval tests *)

>> parse_opt (fastrep (bind anychar (fun a => eval `return ${a} == '"a"' ? null : ${a};`))) "tralalala" X ?
>> Yes:
>> X := (["t", "r"], "alalala").

%end.
