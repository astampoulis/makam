%extend peg.

parsing_opt : testsuite. %testsuite parsing_opt.

>> parse_opt (bind anychar (fun a => seq (charclass " \n\t") (action a))) "a " Res ?
>> Yes:
>> Res := ("a", "").

>> parse_opt (bind anychar (fun a => seq (charclass " \n\t") (action a))) "a !" Res ?
>> Yes:
>> Res := ("a", "!").

slow_many : peg A -> peg (list A).

rule (slow_many P) (bind P (fun hd => bind (slow_many P) (fun tl => action (hd :: tl)))).
rule (slow_many P) (action []).

>> parse_opt (slow_many (exact "hi")) "hihi" Res ?
>> Yes:
>> Res := ([ "hi", "hi" ], "").

once_or_many : peg A -> peg (list A).

rule (once_or_many P) (bind P (fun hd => bind (many P) (fun tl => action (hd :: tl)))).

whitespace : peg unit.
rule whitespace (seq (once_or_many (charclass " \n\t")) (action unit)).

>> parse_opt (seq whitespace (action unit)) "   return " Res ?
>> Yes:
>> Res := (unit, "return ").

option : peg A -> peg (option A).
rule (option P) (bind P (fun res => action (some res))).
rule (option P) (action none).

token : peg A -> peg A.
rule (token P) (seq (option whitespace) P).

>> parse_opt (seq (token (exact "return")) (token (exact "true"))) " return true " Res ?
>> Yes:
>> Res := ("true", " ").

ident : peg string.
identfirst, identrest : peg string.

rule identfirst (charclass "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZαβγδεζηθικμνξοπρστυφχψωΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩάέήίύόώ_").
rule identrest (charclass "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZαβγδεζηθικλμνξοπρστυφχψωΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩάέήίύόώ_1234567890'").

rule ident (bind identfirst (fun (hd: string) => bind (charmany identrest) (fun tl =>
            eval (string.append hd tl) `return JSON.stringify(JSON.parse(${hd}) + JSON.parse(${tl}));`))).

cterm : type.
clam : string -> cterm -> cterm.
cvar : string -> cterm.
capp : cterm -> list cterm -> cterm.

cterm, cterm0, cterm1, cterm2 : peg cterm.

rule cterm cterm0.

rule cterm0 (seq (token (exact "λ")) (bind (token ident) (fun var => seq (token (exact "."))
                 (bind cterm0 (fun body => action (clam var body)))))).

rule cterm0 cterm1.

rule cterm1 (bind cterm2 (fun hd => bind (once_or_many (seq whitespace cterm2)) (fun tl => action (capp hd tl)))).

rule cterm1 cterm2.

rule cterm2 (bind (token ident) (fun var => action (cvar var))).

rule cterm2 (seq (token (exact "(")) (bind cterm0 (fun t => seq (token (exact ")")) (action t)))).

`( def_parser_js cterm ).

>> parse_opt cterm "λ x.x" Res ?
>> Yes:
>> Res := (clam "x" (cvar "x"), "").

>> parse_opt cterm "λf.λg.λx.f (g x)" Res ?
>> Yes:
>> Res := ((clam "f" (clam "g" (clam "x" (capp (cvar "f") [capp (cvar "g") [cvar "x"]])))), "").

>> parse_opt ident "kalimera" Res ?
>> Yes:
>> Res := ("kalimera", "").

>> parse_opt cterm "λ καλημέρα. κόσμε" Res ?
>> Yes:
>> Res := (clam "καλημέρα" (cvar "κόσμε"), "").

>> (parse_opt (bind anychar (fun a => bind anychar (fun b => action (fun s => {prop| string.explode s [b, a] |})))) "hi" (_DoIt, Rest), _DoIt S) ?
>> Yes:
>> S := "ih",
>> Rest := "".

>> (parse_opt (bind anychar (fun a => bind anychar (fun b => action (`${b}${a}`)))) "hi" (Exp, Rest), expansion.str Exp S) ?
>> Yes:
>> S := "ih",
>> Rest := "".

>> parse_opt (action (fun (x: string) => x)) "" (X, _) ?
>> Yes:
>> X := (fun (x: string) => x).

>> parse_opt (apply capp [captured cterm2, captured (many cterm2)]) "x y z" (X, _) ?
>> Yes:
>> X := capp (cvar "x") [cvar "y", cvar "z"].

>> parse_opt (transform (pfun x y res => string.append y x res) "(function(a, b) { return JSON.stringify(JSON.parse(b) + JSON.parse(a)); })" [ captured (charclass "a"), captured (charclass "b") ]) "ab" X ?
>> Yes:
>> X := ("ba", "").

testlam : peg cterm.
hoaslam : (cterm -> cterm) -> cterm.

>> parse_opt (action (hoaslam (fun x => hoaslam (fun y => (capp x [capp y [cvar "y"]]))))) "" (X, _) ?
>> Yes:
>> X := hoaslam (fun x => hoaslam (fun y => (capp x [capp y [cvar "y"]]))).

>> (eq _OPEN "λ  hello  . λ world . λ  hello  . λ world . ",
    eq _WHITESPACE "                                                                                   ",
    expansion.str `   hello   ` _BODY,
    expansion.str `${_OPEN} (${_WHITESPACE} ${_OPEN} (${_WHITESPACE} ${_OPEN} (
                   ${_OPEN} (
                   ${_WHITESPACE}
                   ${_WHITESPACE}
                   ${_BODY}) ${_BODY}) ${_BODY}) ${_BODY})` _STR,
    parse_opt cterm _STR _X) ?
>> Yes.

(* use two letrecs to make sure that unique symbols get generated *)
rec : int -> peg cterm.
rule (rec I)
           (letrec (open_next (fun cterm_lambda => open_next (fun cterm_base => open_end
           ([ (* lambda *)
             choices [
               (seq (token (exact "λ")) (bind (token ident) (fun var => seq (token (exact "."))
                     (bind cterm_lambda (fun body => action (clam var body)))))),
               cterm_base
             ],
             (* base *)
             choices [
               bind (token ident) (fun var => action (cvar var)),
               seq (token (exact "(")) (bind cterm_lambda (fun t => seq (token (exact ")")) (action t)))
             ]
          ],
          cterm_lambda))))).

>> parse_opt (choices [ seq (neg (rec 0)) (action (cvar "nope")), rec 1 ]) " λ x . λ y . (λx. x)" (X, _) ?
>> Yes:
>> X := clam "x" (clam "y" (clam "x" (cvar "x"))).

(* tests specific for parse_opt *)

>> parse_opt (many (bind anychar (fun a => eval `return ${a} == '"a"' ? null : ${a};`))) "tralalala" X ?
>> Yes:
>> X := (["t", "r"], "alalala").

external : peg cterm.

extern_def external Code
  when expansion.str
  `
  function (input, offset) {
    if (input.startsWith("identity", offset)) {
      return { result: 'peg.clam "x" (peg.cvar "x")',
               newOffset: offset + "identity".length };
    } else {
      return { result: null };
    }
  }
  ` Code.

>> parse_opt (many (choices [ external, cterm ] )) "identity λx.x" (X, _) ?
>> Yes:
>> X := [ clam "x" (cvar "x"), clam "x" (cvar "x") ].

>> parse_opt (eval_when anychar "(function (x) { return x.toUpperCase() == x; })") "Foo" (X, Rest) ?
>> Yes:
>> X := "F",
>> Rest := "oo".

%end.
