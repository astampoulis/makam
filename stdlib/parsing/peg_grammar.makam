%extend peg.

%extend peg_grammar.

ppegbase : peg (peg A).
ppeg : peg (peg A -> prop).

repplus : peg A -> peg (list A).
rule (repplus P) (bind P (fun hd => bind (fastrep P) (fun tl => action (hd :: tl)))).

whitespace : peg unit.
rule whitespace (seq (repplus (charclass " \n\t")) (action unit)).

option : peg A -> peg (option A).
rule (option P) (bind P (fun res => action (some res))).
rule (option P) (action none).

token : peg A -> peg A.
rule (token P) (seq (option whitespace) (bind P (fun p => seq whitespace (action p)))).

symbol : peg A -> peg A.
rule (symbol P) (seq (option whitespace) P).

ident : peg string.
identfirst, identrest : peg string.

rule identfirst (charclass "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZαβγδεζηθικμνξοπρστυφχψωΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩάέήίύόώ_").
rule identrest (charclass "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZαβγδεζηθικλμνξοπρστυφχψωΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩάέήίύόώ_1234567890'").

concat : list string -> string.

rule ident (bind identfirst (fun hd => bind (fastrep identrest) (fun tl => action (concat (hd :: tl))))).

app : (A -> B) -> peg A -> peg B.

peg.rule (app F Y) (bind Y (fun y => action (F y))).

peg.rule (ppegbase) (seq (symbol (exact ".")) (action anychar)).
peg.rule (ppegbase) (seq (symbol (exact "\""))
                    (bind (fastrep (seq (neg (exact "\"")) anychar)) (fun s =>
                    (seq (exact "\"")
                    (action (exact (concat s))))))).

cbind : peg A -> string -> peg B -> peg B.
cvar : string -> A.

ppegrule, ppegaction : peg (peg A -> prop).

get_res : [A] string -> A -> prop.

peg.rule (ppegaction) (bind (token ident) (fun id => action (pfun x => [Y] (get_res id Y, eq x (action Y))))).
 
peg.rule (ppegrule) (seq (symbol (exact "{")) (bind ppegaction (fun a =>
                     seq (symbol (exact "}")) (action a)))).

peg.rule (ppegrule) (bind ppegbase (fun hd =>
                    (seq whitespace
                    (bind ppegrule (fun tl =>
                    action (pfun x => [Tl] (tl Tl, eq x (seq hd Tl)))))))).

peg.rule (ppegrule) (bind (symbol ident) (fun id =>
                    (seq (symbol (exact ":"))
                    (bind ppegbase (fun hd =>
                    (seq whitespace
                    (bind ppegrule (fun tl =>
                    (action (pfun x => [Tl]((y:A -> get_res id y -> tl (Tl y)),
                                            eq x (bind hd Tl)))))))))))).

convert, convert_aux : [A]A -> A -> prop.
convert X Y :- demand.case_otherwise (convert_aux X Y) (structural convert X Y).
convert_aux ((concat (L: list string)): string) S :- string.concat L S.

peg.rule (ppeg) (bind (fastrep (seq (symbol (exact ("/"))) ppegrule)) (fun l =>
                (action (pfun x => [L'] (
                          map (pfun e res => e res) l L',
                          convert (choices L') x))))).

`( def_parser_js (ppeg: peg.peg (peg.peg string -> prop)) ).

peg_grammar : testsuite. %testsuite peg_grammar.

>> (peg.parse_opt ppeg "/ x : \"lala\" {  x  } " (_Res, _), _Res (Y : peg.peg string)) ?
>> Yes:
>> Y := choices (cons (bind (exact "lala") (fun a => action a)) nil).

>> (peg.parse_opt ppeg "/ x:\"lala\" {  x  } / y:. { y } " (_Res, _), _Res (Y : peg.peg string),
     peg.parse_opt Y "foobar" ResFinal ) ?
>> Yes:
>> Y := choices (cons (bind (exact "lala") action) (cons (bind anychar action) nil)),
>> ResFinal := ("f", "oobar").


%end.
%end.

