peg : type -> type.

bind : peg A -> (A -> peg B) -> peg B.
seq : peg A -> peg B -> peg B.
action : B -> peg B.
choices : list (peg A) -> peg A.

anychar : peg string.
charclass : string -> peg string.
exact : string -> peg string.
neg : peg A -> peg unit.
lookahead : peg A -> peg unit.
empty : peg unit.
void : peg A.
many : peg A -> peg (list A).
eval : (A -> prop) -> expansion -> peg A.
       (* this is eval with a Makam version and a JS version of the predicate. *)

(* js-only peg expressions: *)
eval : expansion -> peg A. (* evaluate in host language. needs to return a string of a term of type A *)

builtin : [A] peg A -> prop. (* used to tell if something is one of the builtins or a peg defined in terms of those *)
js_builtin : [A] peg A -> prop. (* used to tell if something is one of the builtins supposed to be used only through js generation, with `parse_opt` *)
inline : [A] peg A -> prop. (* used to inline user-defined PEG predicates *)

builtin (bind _ _).
builtin (seq _ _).
builtin (action _).
builtin (choices _).
builtin anychar.
builtin (charclass _).
builtin (exact _).
builtin (neg _).
builtin (lookahead _).
builtin (empty).
builtin (void).
builtin (many _).
builtin (eval _ _).

builtin (eval _). js_builtin (eval _).

parse : [A]peg A -> list string -> option (A * list string) -> prop.

parse (bind PegA PegB) S Res :-
  if (parse PegA S (some (A, S'))) then
     parse (PegB A) S' Res
  else
     eq Res none.

parse (seq PegA PegB) S Res :-
  if (parse PegA S (some (_, S'))) then
     parse PegB S' Res
  else
     eq Res none.

parse (action B) S (some (B, S)).

parse (choices []) S none.

parse (choices (HD :: TL)) S Res :-
  if (parse HD S (some R)) then
    eq Res (some R)
  else
    parse (choices TL) S Res.

parse (anychar) [] none.

parse (anychar) (HD :: TL) (some (HD, TL)).

parse (charclass S) (HD :: TL) Res :-
  if (string.contains S HD) then
    eq Res (some (HD, TL))
  else
    eq Res none.

parse (exact S) Input Res :-
  string.explode S List,
  if (append List Rest Input) then
    eq Res (some (S, Rest))
  else
    eq Res none.

parse (neg P) S Res :-
  if (parse P S (some _)) then
    eq Res none
  else
    eq Res (some (unit, S)).

parse (lookahead P) S Res :-
  if (parse P S (some _)) then
    eq Res (some (unit, S))
  else
    eq Res none.

parse (empty) S (some (unit, S)).

parse (void) S none.

parse (many P) S Res :-
  if (parse P S (some (HD, S'))) then
    (eq Res (some (HD :: TL, S'')),
     parse (many P) S' (some (TL, S'')))
  else (eq Res (some ([], S))).

parse (eval P _) S Res :-
  if (P Str)
  then (eq Res (some (Str, S)))
  else (eq Res none).

(* js-specific parsers *)
parse X _ _
  when js_builtin X,
       locget X Loc, tostring Loc LocS,
       refl.headargs X Head _, refl.headname Head HeadS,
       log_error X `Using parse with ${HeadS}, which is a PEG primitive only allowed when using parse_opt.`,
       failure.

rule : [A] peg A -> peg A -> prop.

extern_def : [A] peg A -> string -> prop.

get_peg_definition : [A] peg A -> peg A -> prop.
get_external_peg_definition : [A] peg A -> string -> prop.

get_peg_definition P Res when not(builtin P) :-
  refl.assume_get_applicable (rule P _) Rules0,
  refl.rules_get_applicable (rule P _) Rules1,
  append Rules0 Rules1 Rules,
  (* TODO: we're not checking the right thing here. We basically want to make
     sure that we're not left with any uninstantiated metavariables I think. *)
  map (pfun def res => [Guard Goal Def]
    if (clause.get_goal def (rule P Def), clause.get_guard def Guard) then
      (Guard, eq res Def)
    else
      (log_error def `Error at PEG definition rule`, failure)
  ) Rules Defs,
  eq Res (choices Defs).

get_external_peg_definition P Res when not(builtin P) :-
  refl.assume_get_applicable (extern_def P _) Rules0,
  refl.rules_get_applicable (extern_def P _) Rules1,
  append Rules0 Rules1 Rules,
  if (eq Rules [Rule]) then
    success
  else
    (locget P Loc, tostring Loc LocS,
       print_string `\n-- Error: zero or multiple PEG definition rules for external PEG parser used at ${LocS}\n`,
       failure),
  if ((eq Rule (clause (extern_def P Code) success);
      (eq Rule (whenclause (extern_def P Code) Guard success), Guard))) then
    eq Res Code
  else
    (locget Rule Loc, tostring Loc LocS,
     print_string `\n-- Error at external PEG definition rule at ${LocS}\n`,
     failure).

parse P S Res when not(builtin P) :-
  get_peg_definition P P',
  parse P' S Res.

parse : [A] peg A -> string -> (A * string) -> prop.

parse PegA S (A, S') :- string.explode S CharList, parse PegA CharList (some (A, Rest)), string.explode S' Rest.



(* now, let's add `letrec`. *)

peg_list : type -> type.
nil : peg_list unit.
cons : peg A -> peg_list B -> peg_list (A * B).

peg_list_open : type -> type -> type.
open_end : B -> peg_list_open unit B.
open_next : (peg HD -> peg_list_open TL B) -> peg_list_open (HD * TL) B.

%extend peg_list.
open : [AS A B] peg_list_open AS A -> (peg_list AS -> A -> prop) -> prop.
open (open_end A) P :- P [] A.
open (open_next (FA : peg HD -> peg_list_open TL A)) P :-
  (x:(peg HD) -> open (FA x) (pfun ps a => P (x :: ps) a)).

assume_many : [AS] (peg X -> peg X -> prop) -> peg_list AS -> peg_list AS -> prop -> prop.
assume_many P [] [] K :- K.
assume_many P (A :: AS) (B :: BS) K :- dyn.poly P P', (P' A B -> assume_many P AS BS K).
%end.

letrec : (peg_list_open AS (peg_list AS * peg A)) -> peg A.
builtin (letrec _).

parse (letrec DefsBody : peg A) Input (Result: option (A * list string))  :-
  peg_list.open DefsBody (pfun ps defsBody => [Defs Body]
    (eq defsBody (Defs, Body), peg_list.assume_many rule ps Defs (parse Body Input Result))).
