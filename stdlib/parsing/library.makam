(*
   Base combinators
*)

option : peg A -> peg (option A).
inline (option _).

rule (option P) (bind P (fun a => action (some a))).
rule (option P) (action none).

ignore : peg A -> peg unit.
inline (ignore _).
rule (ignore X) (seq X (action unit)).

once_or_many : peg A -> peg (list A).
inline (once_or_many _).
rule (once_or_many P)
     (bind P (fun hd => bind (many P) (fun tl => action (hd :: tl)))).

ws, ws_opt, ws_char : peg unit.
inline (ws). inline (ws_opt). inline (ws_char).

rule ws (seq (once_or_many (charclass " \n\t\r")) (action unit)).
rule ws_opt (seq (many (charclass " \n\t\r")) (action unit)).

eof : peg unit. inline (eof).
rule eof (neg anychar).

eval_when : peg string -> string -> peg string.
inline (eval_when _ _).

rule (eval_when P Test)
     (bind P (fun a => eval `return ((${Test})(JSON.parse(${a}))) ? ${a} : null;`)).

(* Pre-applied semantic actions. (as opposed to post-applied)

   example of syntax?
   { F } I0 [A] I1 [B] [C] ~~>
   apply F [ I0, captured A, I1, captured B, captured C ] ~~>
   seq I0 (bind A (fun a => seq I1 (bind B (fun b => bind C (fun c => action (F a b c))
*)

peg_args : type -> type -> type.
peg_captured : type -> type.
captured : peg A -> peg_captured A.

nil : peg_args A A.
cons : peg A -> peg_args B C -> peg_args B C.
cons : peg_captured A -> peg_args B C -> peg_args (A -> B) C.

apply : A -> peg_args A B -> peg B.
inline (apply _ _).

apply_convert : [A B] A -> peg_args A B -> peg B -> prop.
apply_convert F [] (action F).
apply_convert F ((HD: peg A) :: TL) (seq HD Rest) :- apply_convert F TL Rest.
apply_convert F ((captured (HD: peg A)) :: TL) (bind HD Rest) :-
  (x:A -> apply_convert (F x) TL (Rest x)).

rule (apply F PS) P' when apply_convert F PS P'.

transform : A -> string -> peg_args A (B -> prop) -> peg B.
inline (transform _ _ _).

transform_convert : [A B] A -> string -> list string -> peg_args A (B -> prop) -> peg B -> prop.
transform_convert F F_JS Args_JS [] (eval F (expansion Exp)) :-
  append ["return (", F_JS, ")("] Args_JS L0,
  append L0 [");"] Exp.
transform_convert F F_JS Args_JS ((HD: peg A) :: TL) (seq HD P') :-
  transform_convert F F_JS Args_JS TL P'.
transform_convert F F_JS Args_JS ((captured (HD: peg A)) :: TL) (bind HD Rest) :-
  (hd:A -> ([Args_JS']
    if (eq Args_JS [])
    then append Args_JS [result hd] Args_JS'
    else append Args_JS [", ", result hd] Args_JS',
    transform_convert (F hd) F_JS Args_JS' TL (Rest hd))).

rule (transform F F_JS PS) P' when transform_convert F F_JS [] PS P'.

stringappend : peg string -> peg string -> peg string.
stringmany : peg string -> peg string.
inline (stringappend _ _).

rule (stringappend P1 P2) (transform string.append
                             "(a, b) => JSON.stringify(JSON.parse(a) + JSON.parse(b))"
                             [ captured P1, captured P2 ]).
rule (stringmany P) (stringappend P (stringmany P)).
rule (stringmany P) (action "").

string_transform_gen_vars : [A] int -> peg_args A expansion -> A ->
                                string -> string -> string -> prop.

string_transform_gen_vars _ [] Expansion Result_js "" "" :- expansion.str Expansion Result_js.
string_transform_gen_vars N ((HD: peg A) :: TL) Expansion Result_js Params_js GetResults_js :-
  string_transform_gen_vars N TL Expansion Result_js Params_js GetResults_js.
string_transform_gen_vars N ((captured HD) :: TL) Expansion Result_js Params_js GetResults_js :-
  tostring N N_S,
  plus N 1 N',
  expansion.str `res_${N_S}` Result_var,
  expansion.str `\${res_${N_S}}` Result_quote,
  expansion.str `var_${N_S}` Param_js,
  expansion.str `const ${Result_var} = JSON.parse(${Param_js});` GetResult_js,
  string_transform_gen_vars N' TL (Expansion Result_quote) Result_js Params_js' GetResults_js',
  if (eq Params_js' "") then
    (eq Param_js Params_js, eq GetResult_js GetResults_js)
  else
    (expansion.str `${Param_js}, ${Params_js'}` Params_js,
     expansion.str `${GetResult_js} ${GetResults_js'}` GetResults_js).

expansion_to_stringprop : [StringsToStringProp StringsToExpansion] StringsToExpansion -> StringsToStringProp -> prop.
expansion_to_stringprop (X: expansion) (expansion.str X).
expansion_to_stringprop (F: string -> A) (F': string -> A') :-
  (x:string -> expansion_to_stringprop (F x) (F' x)).

peg_args_change_bodytype : [A A' B B'] peg_args A B -> peg_args A' B' -> prop.
peg_args_change_bodytype [] [].
peg_args_change_bodytype (cons (X: peg A) Y) (cons X Y') :-
  peg_args_change_bodytype Y Y'.
peg_args_change_bodytype (cons (X: peg_captured A) Y) (cons X Y') :-
  peg_args_change_bodytype Y Y'.

string_transform : StringsToExpansion ->
                   peg_args StringsToExpansion expansion -> peg string.
inline (string_transform _ _).
rule (string_transform Expansion PS)
     (transform P_String Code PS') :-
  expansion_to_stringprop Expansion P_String,
  peg_args_change_bodytype PS PS',
  string_transform_gen_vars 0 PS Expansion Result_js Params_js GetResults_js,
  expansion.str `function (${Params_js}) { ${GetResults_js} return JSON.stringify(\`${Result_js}\`); }` Code.
