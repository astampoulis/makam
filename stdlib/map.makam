map : type -> type -> type.

nil : map A B.
cons : A * B -> map A B -> map A B.

%extend map.

(* Remove the key-value pair matching the key. *)
remove_if_member : map A B -> A -> map A B -> prop.
remove_if_member nil A nil.
remove_if_member ((Key', Val') :: Map') Key MapR <-
  if (eqv Key Key')
  then (remove_if_member Map' Key MapR)
  else (remove_if_member Map' Key MapR', eq MapR ((Key', Val') :: MapR')).

remove : map A B -> A -> B -> map A B -> prop.
remove ((Key', Val') :: Map') Key Val MapR <-
  if (eqv Key Key')
  then (eq Val Val', remove_if_member Map' Key MapR)
  else (remove Map' Key Val MapR', eq MapR ((Key', Val') :: MapR')).

(* Get the first element of a map plus the rest of the map.
   Can be used to iterate through the map without duplicate key visits. *)
headtail : map A B -> A -> B -> map A B -> prop.
headtail ((Key, Val) :: Map') Key Val Map'' :-
  remove_if_member Map' Key Map''.

empty : map A B -> prop.
empty [].

(* Find the value corresponding to a key in a map *)
find : map A B -> A -> B -> prop.
find Map Key Val <-
  remove Map Key Val _.

(* Check whether a key exists in the map *)
elem : map A B -> A -> prop.
elem Map Key <- find Map Key _.

add_new : map A B -> A * B -> map A B -> prop.
add_new M (Key, Val) ((Key, Val) :: M) when not(elem M Key).

add_or_update : map A B -> A * B -> map A B -> prop.
add_or_update M (Key, Val) ((Key, Val) :: M') :- remove_if_member M Key M'.

to_list : map A B -> list (A * B) -> prop.
to_list [] [].
to_list ((Key, Val) :: M) ((Key, Val) :: L) :-
  remove_if_member M Key M',
  to_list M' L.

raw_length : map A B -> int -> prop.
raw_length [] 0.
raw_length (_ :: M) N :-
  raw_length M N', plus N' 1 N.

from_list : list (A * B) -> map A B -> prop.
from_list L M :- foldl add_or_update [] L M.

(* Check whether two maps are equal *)
eqv [] [].
eqv ((Key, Val) :: MapA') MapB :-
  remove MapB Key Val' MapB',
  eqv Val Val',
  eqv MapA' MapB'.

(* Map each value in the map through a predicate. *)
mapvalues : (A -> B -> prop) -> map K A -> map K B -> prop.
mapvalues P [] [].
mapvalues P ((Key, Val) :: Map) ((Key, Val') :: Map') :-
  P Val Val', mapvalues P Map Map'.

(* Compute the union of two maps, assuming the keys are distinct. *)
union : map A B -> map A B -> map A B -> prop.
union MapA MapB MapResult <-
  to_list MapB MapBList,
  foldl add_new MapA MapBList MapResult.

(* Compute the merge of two maps, with the latter map taking precedence. *)
merge_onto : map A B -> map A B -> map A B -> prop.
merge_onto MapA MapB MapResult <-
  to_list MapB MapBList,
  foldl add_or_update MapA MapBList MapResult.

%end.
